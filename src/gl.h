/**********************************************************************************************************************/
/*                                                                                                                    */
/* glex.h                                                                                                             */
/*                                                                                                                    */
/**********************************************************************************************************************/

#ifndef GLUA_GLEX_H
#define GLUA_GLEX_H

#include <windows.h>
#include <stdbool.h>
#define GLDECL WINAPI

#define GL_2D                                                         0x0600
#define GL_2_BYTES                                                    0x1407
#define GL_3D                                                         0x0601
#define GL_3D_COLOR                                                   0x0602
#define GL_3D_COLOR_TEXTURE                                           0x0603
#define GL_3_BYTES                                                    0x1408
#define GL_4D_COLOR_TEXTURE                                           0x0604
#define GL_4_BYTES                                                    0x1409
#define GL_ACCUM                                                      0x0100
#define GL_ACCUM_ALPHA_BITS                                           0x0D5B
#define GL_ACCUM_BLUE_BITS                                            0x0D5A
#define GL_ACCUM_BUFFER_BIT                                           0x00000200
#define GL_ACCUM_CLEAR_VALUE                                          0x0B80
#define GL_ACCUM_GREEN_BITS                                           0x0D59
#define GL_ACCUM_RED_BITS                                             0x0D58
#define GL_ADD                                                        0x0104
#define GL_ALL_ATTRIB_BITS                                            0xFFFFFFFF
#define GL_ALPHA                                                      0x1906
#define GL_ALPHA12                                                    0x803D
#define GL_ALPHA16                                                    0x803E
#define GL_ALPHA4                                                     0x803B
#define GL_ALPHA8                                                     0x803C
#define GL_ALPHA_BIAS                                                 0x0D1D
#define GL_ALPHA_BITS                                                 0x0D55
#define GL_ALPHA_SCALE                                                0x0D1C
#define GL_ALPHA_TEST                                                 0x0BC0
#define GL_ALPHA_TEST_FUNC                                            0x0BC1
#define GL_ALPHA_TEST_REF                                             0x0BC2
#define GL_ALWAYS                                                     0x0207
#define GL_AMBIENT                                                    0x1200
#define GL_AMBIENT_AND_DIFFUSE                                        0x1602
#define GL_AND                                                        0x1501
#define GL_AND_INVERTED                                               0x1504
#define GL_AND_REVERSE                                                0x1502
#define GL_ATTRIB_STACK_DEPTH                                         0x0BB0
#define GL_AUTO_NORMAL                                                0x0D80
#define GL_AUX0                                                       0x0409
#define GL_AUX1                                                       0x040A
#define GL_AUX2                                                       0x040B
#define GL_AUX3                                                       0x040C
#define GL_AUX_BUFFERS                                                0x0C00
#define GL_BACK                                                       0x0405
#define GL_BACK_LEFT                                                  0x0402
#define GL_BACK_RIGHT                                                 0x0403
#define GL_BITMAP                                                     0x1A00
#define GL_BITMAP_TOKEN                                               0x0704
#define GL_BLEND                                                      0x0BE2
#define GL_BLEND_DST                                                  0x0BE0
#define GL_BLEND_SRC                                                  0x0BE1
#define GL_BLUE                                                       0x1905
#define GL_BLUE_BIAS                                                  0x0D1B
#define GL_BLUE_BITS                                                  0x0D54
#define GL_BLUE_SCALE                                                 0x0D1A
#define GL_BYTE                                                       0x1400
#define GL_C3F_V3F                                                    0x2A24
#define GL_C4F_N3F_V3F                                                0x2A26
#define GL_C4UB_V2F                                                   0x2A22
#define GL_C4UB_V3F                                                   0x2A23
#define GL_CCW                                                        0x0901
#define GL_CLAMP                                                      0x2900
#define GL_CLEAR                                                      0x1500
#define GL_CLIENT_ALL_ATTRIB_BITS                                     0xFFFFFFFF
#define GL_CLIENT_ATTRIB_STACK_DEPTH                                  0x0BB1
#define GL_CLIENT_PIXEL_STORE_BIT                                     0x00000001
#define GL_CLIENT_VERTEX_ARRAY_BIT                                    0x00000002
#define GL_CLIP_PLANE0                                                0x3000
#define GL_CLIP_PLANE1                                                0x3001
#define GL_CLIP_PLANE2                                                0x3002
#define GL_CLIP_PLANE3                                                0x3003
#define GL_CLIP_PLANE4                                                0x3004
#define GL_CLIP_PLANE5                                                0x3005
#define GL_COEFF                                                      0x0A00
#define GL_COLOR                                                      0x1800
#define GL_COLOR_ARRAY                                                0x8076
#define GL_COLOR_ARRAY_POINTER                                        0x8090
#define GL_COLOR_ARRAY_SIZE                                           0x8081
#define GL_COLOR_ARRAY_STRIDE                                         0x8083
#define GL_COLOR_ARRAY_TYPE                                           0x8082
#define GL_COLOR_BUFFER_BIT                                           0x00004000
#define GL_COLOR_CLEAR_VALUE                                          0x0C22
#define GL_COLOR_INDEX                                                0x1900
#define GL_COLOR_INDEXES                                              0x1603
#define GL_COLOR_LOGIC_OP                                             0x0BF2
#define GL_COLOR_MATERIAL                                             0x0B57
#define GL_COLOR_MATERIAL_FACE                                        0x0B55
#define GL_COLOR_MATERIAL_PARAMETER                                   0x0B56
#define GL_COLOR_WRITEMASK                                            0x0C23
#define GL_COMPILE                                                    0x1300
#define GL_COMPILE_AND_EXECUTE                                        0x1301
#define GL_CONSTANT_ATTENUATION                                       0x1207
#define GL_COPY                                                       0x1503
#define GL_COPY_INVERTED                                              0x150C
#define GL_COPY_PIXEL_TOKEN                                           0x0706
#define GL_CULL_FACE                                                  0x0B44
#define GL_CULL_FACE_MODE                                             0x0B45
#define GL_CURRENT_BIT                                                0x00000001
#define GL_CURRENT_COLOR                                              0x0B00
#define GL_CURRENT_INDEX                                              0x0B01
#define GL_CURRENT_NORMAL                                             0x0B02
#define GL_CURRENT_RASTER_COLOR                                       0x0B04
#define GL_CURRENT_RASTER_DISTANCE                                    0x0B09
#define GL_CURRENT_RASTER_INDEX                                       0x0B05
#define GL_CURRENT_RASTER_POSITION                                    0x0B07
#define GL_CURRENT_RASTER_POSITION_VALID                              0x0B08
#define GL_CURRENT_RASTER_TEXTURE_COORDS                              0x0B06
#define GL_CURRENT_TEXTURE_COORDS                                     0x0B03
#define GL_CW                                                         0x0900
#define GL_DECAL                                                      0x2101
#define GL_DECR                                                       0x1E03
#define GL_DEPTH                                                      0x1801
#define GL_DEPTH_BIAS                                                 0x0D1F
#define GL_DEPTH_BITS                                                 0x0D56
#define GL_DEPTH_BUFFER_BIT                                           0x00000100
#define GL_DEPTH_CLEAR_VALUE                                          0x0B73
#define GL_DEPTH_COMPONENT                                            0x1902
#define GL_DEPTH_FUNC                                                 0x0B74
#define GL_DEPTH_RANGE                                                0x0B70
#define GL_DEPTH_SCALE                                                0x0D1E
#define GL_DEPTH_TEST                                                 0x0B71
#define GL_DEPTH_WRITEMASK                                            0x0B72
#define GL_DIFFUSE                                                    0x1201
#define GL_DITHER                                                     0x0BD0
#define GL_DOMAIN                                                     0x0A02
#define GL_DONT_CARE                                                  0x1100
#define GL_DOUBLE                                                     0x140A
#define GL_DOUBLEBUFFER                                               0x0C32
#define GL_DRAW_BUFFER                                                0x0C01
#define GL_DRAW_PIXEL_TOKEN                                           0x0705
#define GL_DST_ALPHA                                                  0x0304
#define GL_DST_COLOR                                                  0x0306
#define GL_EDGE_FLAG                                                  0x0B43
#define GL_EDGE_FLAG_ARRAY                                            0x8079
#define GL_EDGE_FLAG_ARRAY_POINTER                                    0x8093
#define GL_EDGE_FLAG_ARRAY_STRIDE                                     0x808C
#define GL_EMISSION                                                   0x1600
#define GL_ENABLE_BIT                                                 0x00002000
#define GL_EQUAL                                                      0x0202
#define GL_EQUIV                                                      0x1509
#define GL_EVAL_BIT                                                   0x00010000
#define GL_EXP                                                        0x0800
#define GL_EXP2                                                       0x0801
#define GL_EXTENSIONS                                                 0x1F03
#define GL_EYE_LINEAR                                                 0x2400
#define GL_EYE_PLANE                                                  0x2502
#define GL_FALSE                                                      0
#define GL_FASTEST                                                    0x1101
#define GL_FEEDBACK                                                   0x1C01
#define GL_FEEDBACK_BUFFER_POINTER                                    0x0DF0
#define GL_FEEDBACK_BUFFER_SIZE                                       0x0DF1
#define GL_FEEDBACK_BUFFER_TYPE                                       0x0DF2
#define GL_FILL                                                       0x1B02
#define GL_FLAT                                                       0x1D00
#define GL_FLOAT                                                      0x1406
#define GL_FOG                                                        0x0B60
#define GL_FOG_BIT                                                    0x00000080
#define GL_FOG_COLOR                                                  0x0B66
#define GL_FOG_DENSITY                                                0x0B62
#define GL_FOG_END                                                    0x0B64
#define GL_FOG_HINT                                                   0x0C54
#define GL_FOG_INDEX                                                  0x0B61
#define GL_FOG_MODE                                                   0x0B65
#define GL_FOG_START                                                  0x0B63
#define GL_FRONT                                                      0x0404
#define GL_FRONT_AND_BACK                                             0x0408
#define GL_FRONT_FACE                                                 0x0B46
#define GL_FRONT_LEFT                                                 0x0400
#define GL_FRONT_RIGHT                                                0x0401
#define GL_GEQUAL                                                     0x0206
#define GL_GREATER                                                    0x0204
#define GL_GREEN                                                      0x1904
#define GL_GREEN_BIAS                                                 0x0D19
#define GL_GREEN_BITS                                                 0x0D53
#define GL_GREEN_SCALE                                                0x0D18
#define GL_HINT_BIT                                                   0x00008000
#define GL_INCR                                                       0x1E02
#define GL_INDEX_ARRAY                                                0x8077
#define GL_INDEX_ARRAY_POINTER                                        0x8091
#define GL_INDEX_ARRAY_STRIDE                                         0x8086
#define GL_INDEX_ARRAY_TYPE                                           0x8085
#define GL_INDEX_BITS                                                 0x0D51
#define GL_INDEX_CLEAR_VALUE                                          0x0C20
#define GL_INDEX_LOGIC_OP                                             0x0BF1
#define GL_INDEX_MODE                                                 0x0C30
#define GL_INDEX_OFFSET                                               0x0D13
#define GL_INDEX_SHIFT                                                0x0D12
#define GL_INDEX_WRITEMASK                                            0x0C21
#define GL_INT                                                        0x1404
#define GL_INTENSITY                                                  0x8049
#define GL_INTENSITY12                                                0x804C
#define GL_INTENSITY16                                                0x804D
#define GL_INTENSITY4                                                 0x804A
#define GL_INTENSITY8                                                 0x804B
#define GL_INVALID_ENUM                                               0x0500
#define GL_INVALID_OPERATION                                          0x0502
#define GL_INVALID_VALUE                                              0x0501
#define GL_INVERT                                                     0x150A
#define GL_KEEP                                                       0x1E00
#define GL_LEFT                                                       0x0406
#define GL_LEQUAL                                                     0x0203
#define GL_LESS                                                       0x0201
#define GL_LIGHT0                                                     0x4000
#define GL_LIGHT1                                                     0x4001
#define GL_LIGHT2                                                     0x4002
#define GL_LIGHT3                                                     0x4003
#define GL_LIGHT4                                                     0x4004
#define GL_LIGHT5                                                     0x4005
#define GL_LIGHT6                                                     0x4006
#define GL_LIGHT7                                                     0x4007
#define GL_LIGHTING                                                   0x0B50
#define GL_LIGHTING_BIT                                               0x00000040
#define GL_LIGHT_MODEL_AMBIENT                                        0x0B53
#define GL_LIGHT_MODEL_LOCAL_VIEWER                                   0x0B51
#define GL_LIGHT_MODEL_TWO_SIDE                                       0x0B52
#define GL_LINE                                                       0x1B01
#define GL_LINEAR                                                     0x2601
#define GL_LINEAR_ATTENUATION                                         0x1208
#define GL_LINEAR_MIPMAP_LINEAR                                       0x2703
#define GL_LINEAR_MIPMAP_NEAREST                                      0x2701
#define GL_LINES                                                      0x0001
#define GL_LINE_BIT                                                   0x00000004
#define GL_LINE_LOOP                                                  0x0002
#define GL_LINE_RESET_TOKEN                                           0x0707
#define GL_LINE_SMOOTH                                                0x0B20
#define GL_LINE_SMOOTH_HINT                                           0x0C52
#define GL_LINE_STIPPLE                                               0x0B24
#define GL_LINE_STIPPLE_PATTERN                                       0x0B25
#define GL_LINE_STIPPLE_REPEAT                                        0x0B26
#define GL_LINE_STRIP                                                 0x0003
#define GL_LINE_TOKEN                                                 0x0702
#define GL_LINE_WIDTH                                                 0x0B21
#define GL_LINE_WIDTH_GRANULARITY                                     0x0B23
#define GL_LINE_WIDTH_RANGE                                           0x0B22
#define GL_LIST_BASE                                                  0x0B32
#define GL_LIST_BIT                                                   0x00020000
#define GL_LIST_INDEX                                                 0x0B33
#define GL_LIST_MODE                                                  0x0B30
#define GL_LOAD                                                       0x0101
#define GL_LOGIC_OP                                                   0x0BF1
#define GL_LOGIC_OP_MODE                                              0x0BF0
#define GL_LUMINANCE                                                  0x1909
#define GL_LUMINANCE12                                                0x8041
#define GL_LUMINANCE12_ALPHA12                                        0x8047
#define GL_LUMINANCE12_ALPHA4                                         0x8046
#define GL_LUMINANCE16                                                0x8042
#define GL_LUMINANCE16_ALPHA16                                        0x8048
#define GL_LUMINANCE4                                                 0x803F
#define GL_LUMINANCE4_ALPHA4                                          0x8043
#define GL_LUMINANCE6_ALPHA2                                          0x8044
#define GL_LUMINANCE8                                                 0x8040
#define GL_LUMINANCE8_ALPHA8                                          0x8045
#define GL_LUMINANCE_ALPHA                                            0x190A
#define GL_MAP1_COLOR_4                                               0x0D90
#define GL_MAP1_GRID_DOMAIN                                           0x0DD0
#define GL_MAP1_GRID_SEGMENTS                                         0x0DD1
#define GL_MAP1_INDEX                                                 0x0D91
#define GL_MAP1_NORMAL                                                0x0D92
#define GL_MAP1_TEXTURE_COORD_1                                       0x0D93
#define GL_MAP1_TEXTURE_COORD_2                                       0x0D94
#define GL_MAP1_TEXTURE_COORD_3                                       0x0D95
#define GL_MAP1_TEXTURE_COORD_4                                       0x0D96
#define GL_MAP1_VERTEX_3                                              0x0D97
#define GL_MAP1_VERTEX_4                                              0x0D98
#define GL_MAP2_COLOR_4                                               0x0DB0
#define GL_MAP2_GRID_DOMAIN                                           0x0DD2
#define GL_MAP2_GRID_SEGMENTS                                         0x0DD3
#define GL_MAP2_INDEX                                                 0x0DB1
#define GL_MAP2_NORMAL                                                0x0DB2
#define GL_MAP2_TEXTURE_COORD_1                                       0x0DB3
#define GL_MAP2_TEXTURE_COORD_2                                       0x0DB4
#define GL_MAP2_TEXTURE_COORD_3                                       0x0DB5
#define GL_MAP2_TEXTURE_COORD_4                                       0x0DB6
#define GL_MAP2_VERTEX_3                                              0x0DB7
#define GL_MAP2_VERTEX_4                                              0x0DB8
#define GL_MAP_COLOR                                                  0x0D10
#define GL_MAP_STENCIL                                                0x0D11
#define GL_MATRIX_MODE                                                0x0BA0
#define GL_MAX_ATTRIB_STACK_DEPTH                                     0x0D35
#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH                              0x0D3B
#define GL_MAX_CLIP_PLANES                                            0x0D32
#define GL_MAX_EVAL_ORDER                                             0x0D30
#define GL_MAX_LIGHTS                                                 0x0D31
#define GL_MAX_LIST_NESTING                                           0x0B31
#define GL_MAX_MODELVIEW_STACK_DEPTH                                  0x0D36
#define GL_MAX_NAME_STACK_DEPTH                                       0x0D37
#define GL_MAX_PIXEL_MAP_TABLE                                        0x0D34
#define GL_MAX_PROJECTION_STACK_DEPTH                                 0x0D38
#define GL_MAX_TEXTURE_SIZE                                           0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH                                    0x0D39
#define GL_MAX_VIEWPORT_DIMS                                          0x0D3A
#define GL_MODELVIEW                                                  0x1700
#define GL_MODELVIEW_MATRIX                                           0x0BA6
#define GL_MODELVIEW_STACK_DEPTH                                      0x0BA3
#define GL_MODULATE                                                   0x2100
#define GL_MULT                                                       0x0103
#define GL_N3F_V3F                                                    0x2A25
#define GL_NAME_STACK_DEPTH                                           0x0D70
#define GL_NAND                                                       0x150E
#define GL_NEAREST                                                    0x2600
#define GL_NEAREST_MIPMAP_LINEAR                                      0x2702
#define GL_NEAREST_MIPMAP_NEAREST                                     0x2700
#define GL_NEVER                                                      0x0200
#define GL_NICEST                                                     0x1102
#define GL_NONE                                                       0
#define GL_NOOP                                                       0x1505
#define GL_NOR                                                        0x1508
#define GL_NORMALIZE                                                  0x0BA1
#define GL_NORMAL_ARRAY                                               0x8075
#define GL_NORMAL_ARRAY_POINTER                                       0x808F
#define GL_NORMAL_ARRAY_STRIDE                                        0x807F
#define GL_NORMAL_ARRAY_TYPE                                          0x807E
#define GL_NOTEQUAL                                                   0x0205
#define GL_NO_ERROR                                                   0
#define GL_OBJECT_LINEAR                                              0x2401
#define GL_OBJECT_PLANE                                               0x2501
#define GL_ONE                                                        1
#define GL_ONE_MINUS_DST_ALPHA                                        0x0305
#define GL_ONE_MINUS_DST_COLOR                                        0x0307
#define GL_ONE_MINUS_SRC_ALPHA                                        0x0303
#define GL_ONE_MINUS_SRC_COLOR                                        0x0301
#define GL_OR                                                         0x1507
#define GL_ORDER                                                      0x0A01
#define GL_OR_INVERTED                                                0x150D
#define GL_OR_REVERSE                                                 0x150B
#define GL_OUT_OF_MEMORY                                              0x0505
#define GL_PACK_ALIGNMENT                                             0x0D05
#define GL_PACK_LSB_FIRST                                             0x0D01
#define GL_PACK_ROW_LENGTH                                            0x0D02
#define GL_PACK_SKIP_PIXELS                                           0x0D04
#define GL_PACK_SKIP_ROWS                                             0x0D03
#define GL_PACK_SWAP_BYTES                                            0x0D00
#define GL_PASS_THROUGH_TOKEN                                         0x0700
#define GL_PERSPECTIVE_CORRECTION_HINT                                0x0C50
#define GL_PIXEL_MAP_A_TO_A                                           0x0C79
#define GL_PIXEL_MAP_A_TO_A_SIZE                                      0x0CB9
#define GL_PIXEL_MAP_B_TO_B                                           0x0C78
#define GL_PIXEL_MAP_B_TO_B_SIZE                                      0x0CB8
#define GL_PIXEL_MAP_G_TO_G                                           0x0C77
#define GL_PIXEL_MAP_G_TO_G_SIZE                                      0x0CB7
#define GL_PIXEL_MAP_I_TO_A                                           0x0C75
#define GL_PIXEL_MAP_I_TO_A_SIZE                                      0x0CB5
#define GL_PIXEL_MAP_I_TO_B                                           0x0C74
#define GL_PIXEL_MAP_I_TO_B_SIZE                                      0x0CB4
#define GL_PIXEL_MAP_I_TO_G                                           0x0C73
#define GL_PIXEL_MAP_I_TO_G_SIZE                                      0x0CB3
#define GL_PIXEL_MAP_I_TO_I                                           0x0C70
#define GL_PIXEL_MAP_I_TO_I_SIZE                                      0x0CB0
#define GL_PIXEL_MAP_I_TO_R                                           0x0C72
#define GL_PIXEL_MAP_I_TO_R_SIZE                                      0x0CB2
#define GL_PIXEL_MAP_R_TO_R                                           0x0C76
#define GL_PIXEL_MAP_R_TO_R_SIZE                                      0x0CB6
#define GL_PIXEL_MAP_S_TO_S                                           0x0C71
#define GL_PIXEL_MAP_S_TO_S_SIZE                                      0x0CB1
#define GL_PIXEL_MODE_BIT                                             0x00000020
#define GL_POINT                                                      0x1B00
#define GL_POINTS                                                     0x0000
#define GL_POINT_BIT                                                  0x00000002
#define GL_POINT_SIZE                                                 0x0B11
#define GL_POINT_SIZE_GRANULARITY                                     0x0B13
#define GL_POINT_SIZE_RANGE                                           0x0B12
#define GL_POINT_SMOOTH                                               0x0B10
#define GL_POINT_SMOOTH_HINT                                          0x0C51
#define GL_POINT_TOKEN                                                0x0701
#define GL_POLYGON                                                    0x0009
#define GL_POLYGON_BIT                                                0x00000008
#define GL_POLYGON_MODE                                               0x0B40
#define GL_POLYGON_OFFSET_FACTOR                                      0x8038
#define GL_POLYGON_OFFSET_FILL                                        0x8037
#define GL_POLYGON_OFFSET_LINE                                        0x2A02
#define GL_POLYGON_OFFSET_POINT                                       0x2A01
#define GL_POLYGON_OFFSET_UNITS                                       0x2A00
#define GL_POLYGON_SMOOTH                                             0x0B41
#define GL_POLYGON_SMOOTH_HINT                                        0x0C53
#define GL_POLYGON_STIPPLE                                            0x0B42
#define GL_POLYGON_STIPPLE_BIT                                        0x00000010
#define GL_POLYGON_TOKEN                                              0x0703
#define GL_POSITION                                                   0x1203
#define GL_PROJECTION                                                 0x1701
#define GL_PROJECTION_MATRIX                                          0x0BA7
#define GL_PROJECTION_STACK_DEPTH                                     0x0BA4
#define GL_PROXY_TEXTURE_1D                                           0x8063
#define GL_PROXY_TEXTURE_2D                                           0x8064
#define GL_Q                                                          0x2003
#define GL_QUADRATIC_ATTENUATION                                      0x1209
#define GL_QUADS                                                      0x0007
#define GL_QUAD_STRIP                                                 0x0008
#define GL_R                                                          0x2002
#define GL_R3_G3_B2                                                   0x2A10
#define GL_READ_BUFFER                                                0x0C02
#define GL_RED                                                        0x1903
#define GL_RED_BIAS                                                   0x0D15
#define GL_RED_BITS                                                   0x0D52
#define GL_RED_SCALE                                                  0x0D14
#define GL_RENDER                                                     0x1C00
#define GL_RENDERER                                                   0x1F01
#define GL_RENDER_MODE                                                0x0C40
#define GL_REPEAT                                                     0x2901
#define GL_REPLACE                                                    0x1E01
#define GL_RETURN                                                     0x0102
#define GL_RGB                                                        0x1907
#define GL_RGB10                                                      0x8052
#define GL_RGB10_A2                                                   0x8059
#define GL_RGB12                                                      0x8053
#define GL_RGB16                                                      0x8054
#define GL_RGB4                                                       0x804F
#define GL_RGB5                                                       0x8050
#define GL_RGB5_A1                                                    0x8057
#define GL_RGB8                                                       0x8051
#define GL_RGBA                                                       0x1908
#define GL_RGBA12                                                     0x805A
#define GL_RGBA16                                                     0x805B
#define GL_RGBA2                                                      0x8055
#define GL_RGBA4                                                      0x8056
#define GL_RGBA8                                                      0x8058
#define GL_RGBA_MODE                                                  0x0C31
#define GL_RIGHT                                                      0x0407
#define GL_S                                                          0x2000
#define GL_SCISSOR_BIT                                                0x00080000
#define GL_SCISSOR_BOX                                                0x0C10
#define GL_SCISSOR_TEST                                               0x0C11
#define GL_SELECT                                                     0x1C02
#define GL_SELECTION_BUFFER_POINTER                                   0x0DF3
#define GL_SELECTION_BUFFER_SIZE                                      0x0DF4
#define GL_SET                                                        0x150F
#define GL_SHADE_MODEL                                                0x0B54
#define GL_SHININESS                                                  0x1601
#define GL_SHORT                                                      0x1402
#define GL_SMOOTH                                                     0x1D01
#define GL_SPECULAR                                                   0x1202
#define GL_SPHERE_MAP                                                 0x2402
#define GL_SPOT_CUTOFF                                                0x1206
#define GL_SPOT_DIRECTION                                             0x1204
#define GL_SPOT_EXPONENT                                              0x1205
#define GL_SRC_ALPHA                                                  0x0302
#define GL_SRC_ALPHA_SATURATE                                         0x0308
#define GL_SRC_COLOR                                                  0x0300
#define GL_STACK_OVERFLOW                                             0x0503
#define GL_STACK_UNDERFLOW                                            0x0504
#define GL_STENCIL                                                    0x1802
#define GL_STENCIL_BITS                                               0x0D57
#define GL_STENCIL_BUFFER_BIT                                         0x00000400
#define GL_STENCIL_CLEAR_VALUE                                        0x0B91
#define GL_STENCIL_FAIL                                               0x0B94
#define GL_STENCIL_FUNC                                               0x0B92
#define GL_STENCIL_INDEX                                              0x1901
#define GL_STENCIL_PASS_DEPTH_FAIL                                    0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS                                    0x0B96
#define GL_STENCIL_REF                                                0x0B97
#define GL_STENCIL_TEST                                               0x0B90
#define GL_STENCIL_VALUE_MASK                                         0x0B93
#define GL_STENCIL_WRITEMASK                                          0x0B98
#define GL_STEREO                                                     0x0C33
#define GL_SUBPIXEL_BITS                                              0x0D50
#define GL_T                                                          0x2001
#define GL_T2F_C3F_V3F                                                0x2A2A
#define GL_T2F_C4F_N3F_V3F                                            0x2A2C
#define GL_T2F_C4UB_V3F                                               0x2A29
#define GL_T2F_N3F_V3F                                                0x2A2B
#define GL_T2F_V3F                                                    0x2A27
#define GL_T4F_C4F_N3F_V4F                                            0x2A2D
#define GL_T4F_V4F                                                    0x2A28
#define GL_TEXTURE                                                    0x1702
#define GL_TEXTURE_1D                                                 0x0DE0
#define GL_TEXTURE_2D                                                 0x0DE1
#define GL_TEXTURE_ALPHA_SIZE                                         0x805F
#define GL_TEXTURE_BINDING_1D                                         0x8068
#define GL_TEXTURE_BINDING_2D                                         0x8069
#define GL_TEXTURE_BIT                                                0x00040000
#define GL_TEXTURE_BLUE_SIZE                                          0x805E
#define GL_TEXTURE_BORDER                                             0x1005
#define GL_TEXTURE_BORDER_COLOR                                       0x1004
#define GL_TEXTURE_COMPONENTS                                         0x1003
#define GL_TEXTURE_COORD_ARRAY                                        0x8078
#define GL_TEXTURE_COORD_ARRAY_POINTER                                0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE                                   0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE                                 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE                                   0x8089
#define GL_TEXTURE_ENV                                                0x2300
#define GL_TEXTURE_ENV_COLOR                                          0x2201
#define GL_TEXTURE_ENV_MODE                                           0x2200
#define GL_TEXTURE_GEN_MODE                                           0x2500
#define GL_TEXTURE_GEN_Q                                              0x0C63
#define GL_TEXTURE_GEN_R                                              0x0C62
#define GL_TEXTURE_GEN_S                                              0x0C60
#define GL_TEXTURE_GEN_T                                              0x0C61
#define GL_TEXTURE_GREEN_SIZE                                         0x805D
#define GL_TEXTURE_HEIGHT                                             0x1001
#define GL_TEXTURE_INTENSITY_SIZE                                     0x8061
#define GL_TEXTURE_INTERNAL_FORMAT                                    0x1003
#define GL_TEXTURE_LUMINANCE_SIZE                                     0x8060
#define GL_TEXTURE_MAG_FILTER                                         0x2800
#define GL_TEXTURE_MATRIX                                             0x0BA8
#define GL_TEXTURE_MIN_FILTER                                         0x2801
#define GL_TEXTURE_PRIORITY                                           0x8066
#define GL_TEXTURE_RED_SIZE                                           0x805C
#define GL_TEXTURE_RESIDENT                                           0x8067
#define GL_TEXTURE_STACK_DEPTH                                        0x0BA5
#define GL_TEXTURE_WIDTH                                              0x1000
#define GL_TEXTURE_WRAP_S                                             0x2802
#define GL_TEXTURE_WRAP_T                                             0x2803
#define GL_TRANSFORM_BIT                                              0x00001000
#define GL_TRIANGLES                                                  0x0004
#define GL_TRIANGLE_FAN                                               0x0006
#define GL_TRIANGLE_STRIP                                             0x0005
#define GL_TRUE                                                       1
#define GL_UNPACK_ALIGNMENT                                           0x0CF5
#define GL_UNPACK_LSB_FIRST                                           0x0CF1
#define GL_UNPACK_ROW_LENGTH                                          0x0CF2
#define GL_UNPACK_SKIP_PIXELS                                         0x0CF4
#define GL_UNPACK_SKIP_ROWS                                           0x0CF3
#define GL_UNPACK_SWAP_BYTES                                          0x0CF0
#define GL_UNSIGNED_BYTE                                              0x1401
#define GL_UNSIGNED_INT                                               0x1405
#define GL_UNSIGNED_SHORT                                             0x1403
#define GL_V2F                                                        0x2A20
#define GL_V3F                                                        0x2A21
#define GL_VENDOR                                                     0x1F00
#define GL_VERSION                                                    0x1F02
#define GL_VERTEX_ARRAY                                               0x8074
#define GL_VERTEX_ARRAY_POINTER                                       0x808E
#define GL_VERTEX_ARRAY_SIZE                                          0x807A
#define GL_VERTEX_ARRAY_STRIDE                                        0x807C
#define GL_VERTEX_ARRAY_TYPE                                          0x807B
#define GL_VIEWPORT                                                   0x0BA2
#define GL_VIEWPORT_BIT                                               0x00000800
#define GL_XOR                                                        0x1506
#define GL_ZERO                                                       0
#define GL_ZOOM_X                                                     0x0D16
#define GL_ZOOM_Y                                                     0x0D17
#define GL_ALIASED_LINE_WIDTH_RANGE                                   0x846E
#define GL_ALIASED_POINT_SIZE_RANGE                                   0x846D
#define GL_BGR                                                        0x80E0
#define GL_BGRA                                                       0x80E1
#define GL_CLAMP_TO_EDGE                                              0x812F
#define GL_LIGHT_MODEL_COLOR_CONTROL                                  0x81F8
#define GL_MAX_3D_TEXTURE_SIZE                                        0x8073
#define GL_MAX_ELEMENTS_INDICES                                       0x80E9
#define GL_MAX_ELEMENTS_VERTICES                                      0x80E8
#define GL_PACK_IMAGE_HEIGHT                                          0x806C
#define GL_PACK_SKIP_IMAGES                                           0x806B
#define GL_PROXY_TEXTURE_3D                                           0x8070
#define GL_RESCALE_NORMAL                                             0x803A
#define GL_SEPARATE_SPECULAR_COLOR                                    0x81FA
#define GL_SINGLE_COLOR                                               0x81F9
#define GL_SMOOTH_LINE_WIDTH_GRANULARITY                              0x0B23
#define GL_SMOOTH_LINE_WIDTH_RANGE                                    0x0B22
#define GL_SMOOTH_POINT_SIZE_GRANULARITY                              0x0B13
#define GL_SMOOTH_POINT_SIZE_RANGE                                    0x0B12
#define GL_TEXTURE_3D                                                 0x806F
#define GL_TEXTURE_BASE_LEVEL                                         0x813C
#define GL_TEXTURE_BINDING_3D                                         0x806A
#define GL_TEXTURE_DEPTH                                              0x8071
#define GL_TEXTURE_MAX_LEVEL                                          0x813D
#define GL_TEXTURE_MAX_LOD                                            0x813B
#define GL_TEXTURE_MIN_LOD                                            0x813A
#define GL_TEXTURE_WRAP_R                                             0x8072
#define GL_UNPACK_IMAGE_HEIGHT                                        0x806E
#define GL_UNPACK_SKIP_IMAGES                                         0x806D
#define GL_UNSIGNED_BYTE_2_3_3_REV                                    0x8362
#define GL_UNSIGNED_BYTE_3_3_2                                        0x8032
#define GL_UNSIGNED_INT_10_10_10_2                                    0x8036
#define GL_UNSIGNED_INT_2_10_10_10_REV                                0x8368
#define GL_UNSIGNED_INT_8_8_8_8                                       0x8035
#define GL_UNSIGNED_INT_8_8_8_8_REV                                   0x8367
#define GL_UNSIGNED_SHORT_1_5_5_5_REV                                 0x8366
#define GL_UNSIGNED_SHORT_4_4_4_4                                     0x8033
#define GL_UNSIGNED_SHORT_4_4_4_4_REV                                 0x8365
#define GL_UNSIGNED_SHORT_5_5_5_1                                     0x8034
#define GL_UNSIGNED_SHORT_5_6_5                                       0x8363
#define GL_UNSIGNED_SHORT_5_6_5_REV                                   0x8364
#define GL_ACTIVE_TEXTURE                                             0x84E0
#define GL_ADD_SIGNED                                                 0x8574
#define GL_CLAMP_TO_BORDER                                            0x812D
#define GL_CLIENT_ACTIVE_TEXTURE                                      0x84E1
#define GL_COMBINE                                                    0x8570
#define GL_COMBINE_ALPHA                                              0x8572
#define GL_COMBINE_RGB                                                0x8571
#define GL_COMPRESSED_ALPHA                                           0x84E9
#define GL_COMPRESSED_INTENSITY                                       0x84EC
#define GL_COMPRESSED_LUMINANCE                                       0x84EA
#define GL_COMPRESSED_LUMINANCE_ALPHA                                 0x84EB
#define GL_COMPRESSED_RGB                                             0x84ED
#define GL_COMPRESSED_RGBA                                            0x84EE
#define GL_COMPRESSED_TEXTURE_FORMATS                                 0x86A3
#define GL_CONSTANT                                                   0x8576
#define GL_DOT3_RGB                                                   0x86AE
#define GL_DOT3_RGBA                                                  0x86AF
#define GL_INTERPOLATE                                                0x8575
#define GL_MAX_CUBE_MAP_TEXTURE_SIZE                                  0x851C
#define GL_MAX_TEXTURE_UNITS                                          0x84E2
#define GL_MULTISAMPLE                                                0x809D
#define GL_MULTISAMPLE_BIT                                            0x20000000
#define GL_NORMAL_MAP                                                 0x8511
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS                             0x86A2
#define GL_OPERAND0_ALPHA                                             0x8598
#define GL_OPERAND0_RGB                                               0x8590
#define GL_OPERAND1_ALPHA                                             0x8599
#define GL_OPERAND1_RGB                                               0x8591
#define GL_OPERAND2_ALPHA                                             0x859A
#define GL_OPERAND2_RGB                                               0x8592
#define GL_PREVIOUS                                                   0x8578
#define GL_PRIMARY_COLOR                                              0x8577
#define GL_PROXY_TEXTURE_CUBE_MAP                                     0x851B
#define GL_REFLECTION_MAP                                             0x8512
#define GL_RGB_SCALE                                                  0x8573
#define GL_SAMPLES                                                    0x80A9
#define GL_SAMPLE_ALPHA_TO_COVERAGE                                   0x809E
#define GL_SAMPLE_ALPHA_TO_ONE                                        0x809F
#define GL_SAMPLE_BUFFERS                                             0x80A8
#define GL_SAMPLE_COVERAGE                                            0x80A0
#define GL_SAMPLE_COVERAGE_INVERT                                     0x80AB
#define GL_SAMPLE_COVERAGE_VALUE                                      0x80AA
#define GL_SOURCE0_ALPHA                                              0x8588
#define GL_SOURCE0_RGB                                                0x8580
#define GL_SOURCE1_ALPHA                                              0x8589
#define GL_SOURCE1_RGB                                                0x8581
#define GL_SOURCE2_ALPHA                                              0x858A
#define GL_SOURCE2_RGB                                                0x8582
#define GL_SUBTRACT                                                   0x84E7
#define GL_TEXTURE0                                                   0x84C0
#define GL_TEXTURE1                                                   0x84C1
#define GL_TEXTURE10                                                  0x84CA
#define GL_TEXTURE11                                                  0x84CB
#define GL_TEXTURE12                                                  0x84CC
#define GL_TEXTURE13                                                  0x84CD
#define GL_TEXTURE14                                                  0x84CE
#define GL_TEXTURE15                                                  0x84CF
#define GL_TEXTURE16                                                  0x84D0
#define GL_TEXTURE17                                                  0x84D1
#define GL_TEXTURE18                                                  0x84D2
#define GL_TEXTURE19                                                  0x84D3
#define GL_TEXTURE2                                                   0x84C2
#define GL_TEXTURE20                                                  0x84D4
#define GL_TEXTURE21                                                  0x84D5
#define GL_TEXTURE22                                                  0x84D6
#define GL_TEXTURE23                                                  0x84D7
#define GL_TEXTURE24                                                  0x84D8
#define GL_TEXTURE25                                                  0x84D9
#define GL_TEXTURE26                                                  0x84DA
#define GL_TEXTURE27                                                  0x84DB
#define GL_TEXTURE28                                                  0x84DC
#define GL_TEXTURE29                                                  0x84DD
#define GL_TEXTURE3                                                   0x84C3
#define GL_TEXTURE30                                                  0x84DE
#define GL_TEXTURE31                                                  0x84DF
#define GL_TEXTURE4                                                   0x84C4
#define GL_TEXTURE5                                                   0x84C5
#define GL_TEXTURE6                                                   0x84C6
#define GL_TEXTURE7                                                   0x84C7
#define GL_TEXTURE8                                                   0x84C8
#define GL_TEXTURE9                                                   0x84C9
#define GL_TEXTURE_BINDING_CUBE_MAP                                   0x8514
#define GL_TEXTURE_COMPRESSED                                         0x86A1
#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE                              0x86A0
#define GL_TEXTURE_COMPRESSION_HINT                                   0x84EF
#define GL_TEXTURE_CUBE_MAP                                           0x8513
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X                                0x8516
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y                                0x8518
#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z                                0x851A
#define GL_TEXTURE_CUBE_MAP_POSITIVE_X                                0x8515
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y                                0x8517
#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z                                0x8519
#define GL_TRANSPOSE_COLOR_MATRIX                                     0x84E6
#define GL_TRANSPOSE_MODELVIEW_MATRIX                                 0x84E3
#define GL_TRANSPOSE_PROJECTION_MATRIX                                0x84E4
#define GL_TRANSPOSE_TEXTURE_MATRIX                                   0x84E5
#define GL_BLEND_COLOR                                                0x8005
#define GL_BLEND_DST_ALPHA                                            0x80CA
#define GL_BLEND_DST_RGB                                              0x80C8
#define GL_BLEND_SRC_ALPHA                                            0x80CB
#define GL_BLEND_SRC_RGB                                              0x80C9
#define GL_COLOR_SUM                                                  0x8458
#define GL_COMPARE_R_TO_TEXTURE                                       0x884E
#define GL_CONSTANT_ALPHA                                             0x8003
#define GL_CONSTANT_COLOR                                             0x8001
#define GL_CURRENT_FOG_COORDINATE                                     0x8453
#define GL_CURRENT_SECONDARY_COLOR                                    0x8459
#define GL_DECR_WRAP                                                  0x8508
#define GL_DEPTH_COMPONENT16                                          0x81A5
#define GL_DEPTH_COMPONENT24                                          0x81A6
#define GL_DEPTH_COMPONENT32                                          0x81A7
#define GL_DEPTH_TEXTURE_MODE                                         0x884B
#define GL_FOG_COORDINATE                                             0x8451
#define GL_FOG_COORDINATE_ARRAY                                       0x8457
#define GL_FOG_COORDINATE_ARRAY_POINTER                               0x8456
#define GL_FOG_COORDINATE_ARRAY_STRIDE                                0x8455
#define GL_FOG_COORDINATE_ARRAY_TYPE                                  0x8454
#define GL_FOG_COORDINATE_SOURCE                                      0x8450
#define GL_FRAGMENT_DEPTH                                             0x8452
#define GL_FUNC_ADD                                                   0x8006
#define GL_FUNC_REVERSE_SUBTRACT                                      0x800B
#define GL_FUNC_SUBTRACT                                              0x800A
#define GL_GENERATE_MIPMAP                                            0x8191
#define GL_GENERATE_MIPMAP_HINT                                       0x8192
#define GL_INCR_WRAP                                                  0x8507
#define GL_MAX                                                        0x8008
#define GL_MAX_TEXTURE_LOD_BIAS                                       0x84FD
#define GL_MIN                                                        0x8007
#define GL_MIRRORED_REPEAT                                            0x8370
#define GL_ONE_MINUS_CONSTANT_ALPHA                                   0x8004
#define GL_ONE_MINUS_CONSTANT_COLOR                                   0x8002
#define GL_POINT_DISTANCE_ATTENUATION                                 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE                                  0x8128
#define GL_POINT_SIZE_MAX                                             0x8127
#define GL_POINT_SIZE_MIN                                             0x8126
#define GL_SECONDARY_COLOR_ARRAY                                      0x845E
#define GL_SECONDARY_COLOR_ARRAY_POINTER                              0x845D
#define GL_SECONDARY_COLOR_ARRAY_SIZE                                 0x845A
#define GL_SECONDARY_COLOR_ARRAY_STRIDE                               0x845C
#define GL_SECONDARY_COLOR_ARRAY_TYPE                                 0x845B
#define GL_TEXTURE_COMPARE_FUNC                                       0x884D
#define GL_TEXTURE_COMPARE_MODE                                       0x884C
#define GL_TEXTURE_DEPTH_SIZE                                         0x884A
#define GL_TEXTURE_FILTER_CONTROL                                     0x8500
#define GL_TEXTURE_LOD_BIAS                                           0x8501
#define GL_ARRAY_BUFFER                                               0x8892
#define GL_ARRAY_BUFFER_BINDING                                       0x8894
#define GL_BUFFER_ACCESS                                              0x88BB
#define GL_BUFFER_MAPPED                                              0x88BC
#define GL_BUFFER_MAP_POINTER                                         0x88BD
#define GL_BUFFER_SIZE                                                0x8764
#define GL_BUFFER_USAGE                                               0x8765
#define GL_COLOR_ARRAY_BUFFER_BINDING                                 0x8898
#define GL_CURRENT_FOG_COORD                                          0x8453
#define GL_CURRENT_QUERY                                              0x8865
#define GL_DYNAMIC_COPY                                               0x88EA
#define GL_DYNAMIC_DRAW                                               0x88E8
#define GL_DYNAMIC_READ                                               0x88E9
#define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING                             0x889B
#define GL_ELEMENT_ARRAY_BUFFER                                       0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING                               0x8895
#define GL_FOG_COORD                                                  0x8451
#define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING                        0x889D
#define GL_FOG_COORD_ARRAY                                            0x8457
#define GL_FOG_COORD_ARRAY_BUFFER_BINDING                             0x889D
#define GL_FOG_COORD_ARRAY_POINTER                                    0x8456
#define GL_FOG_COORD_ARRAY_STRIDE                                     0x8455
#define GL_FOG_COORD_ARRAY_TYPE                                       0x8454
#define GL_FOG_COORD_SRC                                              0x8450
#define GL_INDEX_ARRAY_BUFFER_BINDING                                 0x8899
#define GL_NORMAL_ARRAY_BUFFER_BINDING                                0x8897
#define GL_QUERY_COUNTER_BITS                                         0x8864
#define GL_QUERY_RESULT                                               0x8866
#define GL_QUERY_RESULT_AVAILABLE                                     0x8867
#define GL_READ_ONLY                                                  0x88B8
#define GL_READ_WRITE                                                 0x88BA
#define GL_SAMPLES_PASSED                                             0x8914
#define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING                       0x889C
#define GL_SRC0_ALPHA                                                 0x8588
#define GL_SRC0_RGB                                                   0x8580
#define GL_SRC1_ALPHA                                                 0x8589
#define GL_SRC1_RGB                                                   0x8581
#define GL_SRC2_ALPHA                                                 0x858A
#define GL_SRC2_RGB                                                   0x8582
#define GL_STATIC_COPY                                                0x88E6
#define GL_STATIC_DRAW                                                0x88E4
#define GL_STATIC_READ                                                0x88E5
#define GL_STREAM_COPY                                                0x88E2
#define GL_STREAM_DRAW                                                0x88E0
#define GL_STREAM_READ                                                0x88E1
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING                         0x889A
#define GL_VERTEX_ARRAY_BUFFER_BINDING                                0x8896
#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING                         0x889F
#define GL_WEIGHT_ARRAY_BUFFER_BINDING                                0x889E
#define GL_WRITE_ONLY                                                 0x88B9
#define GL_ACTIVE_ATTRIBUTES                                          0x8B89
#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH                                0x8B8A
#define GL_ACTIVE_UNIFORMS                                            0x8B86
#define GL_ACTIVE_UNIFORM_MAX_LENGTH                                  0x8B87
#define GL_ATTACHED_SHADERS                                           0x8B85
#define GL_BLEND_EQUATION_ALPHA                                       0x883D
#define GL_BLEND_EQUATION_RGB                                         0x8009
#define GL_BOOL                                                       0x8B56
#define GL_BOOL_VEC2                                                  0x8B57
#define GL_BOOL_VEC3                                                  0x8B58
#define GL_BOOL_VEC4                                                  0x8B59
#define GL_COMPILE_STATUS                                             0x8B81
#define GL_COORD_REPLACE                                              0x8862
#define GL_CURRENT_PROGRAM                                            0x8B8D
#define GL_CURRENT_VERTEX_ATTRIB                                      0x8626
#define GL_DELETE_STATUS                                              0x8B80
#define GL_DRAW_BUFFER0                                               0x8825
#define GL_DRAW_BUFFER1                                               0x8826
#define GL_DRAW_BUFFER10                                              0x882F
#define GL_DRAW_BUFFER11                                              0x8830
#define GL_DRAW_BUFFER12                                              0x8831
#define GL_DRAW_BUFFER13                                              0x8832
#define GL_DRAW_BUFFER14                                              0x8833
#define GL_DRAW_BUFFER15                                              0x8834
#define GL_DRAW_BUFFER2                                               0x8827
#define GL_DRAW_BUFFER3                                               0x8828
#define GL_DRAW_BUFFER4                                               0x8829
#define GL_DRAW_BUFFER5                                               0x882A
#define GL_DRAW_BUFFER6                                               0x882B
#define GL_DRAW_BUFFER7                                               0x882C
#define GL_DRAW_BUFFER8                                               0x882D
#define GL_DRAW_BUFFER9                                               0x882E
#define GL_FLOAT_MAT2                                                 0x8B5A
#define GL_FLOAT_MAT3                                                 0x8B5B
#define GL_FLOAT_MAT4                                                 0x8B5C
#define GL_FLOAT_VEC2                                                 0x8B50
#define GL_FLOAT_VEC3                                                 0x8B51
#define GL_FLOAT_VEC4                                                 0x8B52
#define GL_FRAGMENT_SHADER                                            0x8B30
#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT                            0x8B8B
#define GL_INFO_LOG_LENGTH                                            0x8B84
#define GL_INT_VEC2                                                   0x8B53
#define GL_INT_VEC3                                                   0x8B54
#define GL_INT_VEC4                                                   0x8B55
#define GL_LINK_STATUS                                                0x8B82
#define GL_LOWER_LEFT                                                 0x8CA1
#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS                           0x8B4D
#define GL_MAX_DRAW_BUFFERS                                           0x8824
#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS                            0x8B49
#define GL_MAX_TEXTURE_COORDS                                         0x8871
#define GL_MAX_TEXTURE_IMAGE_UNITS                                    0x8872
#define GL_MAX_VARYING_FLOATS                                         0x8B4B
#define GL_MAX_VERTEX_ATTRIBS                                         0x8869
#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS                             0x8B4C
#define GL_MAX_VERTEX_UNIFORM_COMPONENTS                              0x8B4A
#define GL_POINT_SPRITE                                               0x8861
#define GL_POINT_SPRITE_COORD_ORIGIN                                  0x8CA0
#define GL_SAMPLER_1D                                                 0x8B5D
#define GL_SAMPLER_1D_SHADOW                                          0x8B61
#define GL_SAMPLER_2D                                                 0x8B5E
#define GL_SAMPLER_2D_SHADOW                                          0x8B62
#define GL_SAMPLER_3D                                                 0x8B5F
#define GL_SAMPLER_CUBE                                               0x8B60
#define GL_SHADER_SOURCE_LENGTH                                       0x8B88
#define GL_SHADER_TYPE                                                0x8B4F
#define GL_SHADING_LANGUAGE_VERSION                                   0x8B8C
#define GL_STENCIL_BACK_FAIL                                          0x8801
#define GL_STENCIL_BACK_FUNC                                          0x8800
#define GL_STENCIL_BACK_PASS_DEPTH_FAIL                               0x8802
#define GL_STENCIL_BACK_PASS_DEPTH_PASS                               0x8803
#define GL_STENCIL_BACK_REF                                           0x8CA3
#define GL_STENCIL_BACK_VALUE_MASK                                    0x8CA4
#define GL_STENCIL_BACK_WRITEMASK                                     0x8CA5
#define GL_UPPER_LEFT                                                 0x8CA2
#define GL_VALIDATE_STATUS                                            0x8B83
#define GL_VERTEX_ATTRIB_ARRAY_ENABLED                                0x8622
#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED                             0x886A
#define GL_VERTEX_ATTRIB_ARRAY_POINTER                                0x8645
#define GL_VERTEX_ATTRIB_ARRAY_SIZE                                   0x8623
#define GL_VERTEX_ATTRIB_ARRAY_STRIDE                                 0x8624
#define GL_VERTEX_ATTRIB_ARRAY_TYPE                                   0x8625
#define GL_VERTEX_PROGRAM_POINT_SIZE                                  0x8642
#define GL_VERTEX_PROGRAM_TWO_SIDE                                    0x8643
#define GL_VERTEX_SHADER                                              0x8B31
#define GL_COMPRESSED_SLUMINANCE                                      0x8C4A
#define GL_COMPRESSED_SLUMINANCE_ALPHA                                0x8C4B
#define GL_COMPRESSED_SRGB                                            0x8C48
#define GL_COMPRESSED_SRGB_ALPHA                                      0x8C49
#define GL_CURRENT_RASTER_SECONDARY_COLOR                             0x845F
#define GL_FLOAT_MAT2x3                                               0x8B65
#define GL_FLOAT_MAT2x4                                               0x8B66
#define GL_FLOAT_MAT3x2                                               0x8B67
#define GL_FLOAT_MAT3x4                                               0x8B68
#define GL_FLOAT_MAT4x2                                               0x8B69
#define GL_FLOAT_MAT4x3                                               0x8B6A
#define GL_PIXEL_PACK_BUFFER                                          0x88EB
#define GL_PIXEL_PACK_BUFFER_BINDING                                  0x88ED
#define GL_PIXEL_UNPACK_BUFFER                                        0x88EC
#define GL_PIXEL_UNPACK_BUFFER_BINDING                                0x88EF
#define GL_SLUMINANCE                                                 0x8C46
#define GL_SLUMINANCE8                                                0x8C47
#define GL_SLUMINANCE8_ALPHA8                                         0x8C45
#define GL_SLUMINANCE_ALPHA                                           0x8C44
#define GL_SRGB                                                       0x8C40
#define GL_SRGB8                                                      0x8C41
#define GL_SRGB8_ALPHA8                                               0x8C43
#define GL_SRGB_ALPHA                                                 0x8C42
#define GL_ALPHA_INTEGER                                              0x8D97
#define GL_BGRA_INTEGER                                               0x8D9B
#define GL_BGR_INTEGER                                                0x8D9A
#define GL_BLUE_INTEGER                                               0x8D96
#define GL_BUFFER_ACCESS_FLAGS                                        0x911F
#define GL_BUFFER_MAP_LENGTH                                          0x9120
#define GL_BUFFER_MAP_OFFSET                                          0x9121
#define GL_CLAMP_FRAGMENT_COLOR                                       0x891B
#define GL_CLAMP_READ_COLOR                                           0x891C
#define GL_CLAMP_VERTEX_COLOR                                         0x891A
#define GL_CLIP_DISTANCE0                                             0x3000
#define GL_CLIP_DISTANCE1                                             0x3001
#define GL_CLIP_DISTANCE2                                             0x3002
#define GL_CLIP_DISTANCE3                                             0x3003
#define GL_CLIP_DISTANCE4                                             0x3004
#define GL_CLIP_DISTANCE5                                             0x3005
#define GL_CLIP_DISTANCE6                                             0x3006
#define GL_CLIP_DISTANCE7                                             0x3007
#define GL_COLOR_ATTACHMENT0                                          0x8CE0
#define GL_COLOR_ATTACHMENT1                                          0x8CE1
#define GL_COLOR_ATTACHMENT10                                         0x8CEA
#define GL_COLOR_ATTACHMENT11                                         0x8CEB
#define GL_COLOR_ATTACHMENT12                                         0x8CEC
#define GL_COLOR_ATTACHMENT13                                         0x8CED
#define GL_COLOR_ATTACHMENT14                                         0x8CEE
#define GL_COLOR_ATTACHMENT15                                         0x8CEF
#define GL_COLOR_ATTACHMENT16                                         0x8CF0
#define GL_COLOR_ATTACHMENT17                                         0x8CF1
#define GL_COLOR_ATTACHMENT18                                         0x8CF2
#define GL_COLOR_ATTACHMENT19                                         0x8CF3
#define GL_COLOR_ATTACHMENT2                                          0x8CE2
#define GL_COLOR_ATTACHMENT20                                         0x8CF4
#define GL_COLOR_ATTACHMENT21                                         0x8CF5
#define GL_COLOR_ATTACHMENT22                                         0x8CF6
#define GL_COLOR_ATTACHMENT23                                         0x8CF7
#define GL_COLOR_ATTACHMENT24                                         0x8CF8
#define GL_COLOR_ATTACHMENT25                                         0x8CF9
#define GL_COLOR_ATTACHMENT26                                         0x8CFA
#define GL_COLOR_ATTACHMENT27                                         0x8CFB
#define GL_COLOR_ATTACHMENT28                                         0x8CFC
#define GL_COLOR_ATTACHMENT29                                         0x8CFD
#define GL_COLOR_ATTACHMENT3                                          0x8CE3
#define GL_COLOR_ATTACHMENT30                                         0x8CFE
#define GL_COLOR_ATTACHMENT31                                         0x8CFF
#define GL_COLOR_ATTACHMENT4                                          0x8CE4
#define GL_COLOR_ATTACHMENT5                                          0x8CE5
#define GL_COLOR_ATTACHMENT6                                          0x8CE6
#define GL_COLOR_ATTACHMENT7                                          0x8CE7
#define GL_COLOR_ATTACHMENT8                                          0x8CE8
#define GL_COLOR_ATTACHMENT9                                          0x8CE9
#define GL_COMPARE_REF_TO_TEXTURE                                     0x884E
#define GL_COMPRESSED_RED                                             0x8225
#define GL_COMPRESSED_RED_RGTC1                                       0x8DBB
#define GL_COMPRESSED_RG                                              0x8226
#define GL_COMPRESSED_RG_RGTC2                                        0x8DBD
#define GL_COMPRESSED_SIGNED_RED_RGTC1                                0x8DBC
#define GL_COMPRESSED_SIGNED_RG_RGTC2                                 0x8DBE
#define GL_CONTEXT_FLAGS                                              0x821E
#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT                        0x00000001
#define GL_DEPTH24_STENCIL8                                           0x88F0
#define GL_DEPTH32F_STENCIL8                                          0x8CAD
#define GL_DEPTH_ATTACHMENT                                           0x8D00
#define GL_DEPTH_COMPONENT32F                                         0x8CAC
#define GL_DEPTH_STENCIL                                              0x84F9
#define GL_DEPTH_STENCIL_ATTACHMENT                                   0x821A
#define GL_DRAW_FRAMEBUFFER                                           0x8CA9
#define GL_DRAW_FRAMEBUFFER_BINDING                                   0x8CA6
#define GL_FIXED_ONLY                                                 0x891D
#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV                             0x8DAD
#define GL_FRAMEBUFFER                                                0x8D40
#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE                          0x8215
#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE                           0x8214
#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING                      0x8210
#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE                      0x8211
#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE                          0x8216
#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE                          0x8213
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME                         0x8CD1
#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE                         0x8CD0
#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE                            0x8212
#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE                        0x8217
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE               0x8CD3
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER                       0x8CD4
#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL                       0x8CD2
#define GL_FRAMEBUFFER_BINDING                                        0x8CA6
#define GL_FRAMEBUFFER_COMPLETE                                       0x8CD5
#define GL_FRAMEBUFFER_DEFAULT                                        0x8218
#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT                          0x8CD6
#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER                         0x8CDB
#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT                  0x8CD7
#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE                         0x8D56
#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER                         0x8CDC
#define GL_FRAMEBUFFER_SRGB                                           0x8DB9
#define GL_FRAMEBUFFER_UNDEFINED                                      0x8219
#define GL_FRAMEBUFFER_UNSUPPORTED                                    0x8CDD
#define GL_GREEN_INTEGER                                              0x8D95
#define GL_HALF_FLOAT                                                 0x140B
#define GL_INTERLEAVED_ATTRIBS                                        0x8C8C
#define GL_INT_SAMPLER_1D                                             0x8DC9
#define GL_INT_SAMPLER_1D_ARRAY                                       0x8DCE
#define GL_INT_SAMPLER_2D                                             0x8DCA
#define GL_INT_SAMPLER_2D_ARRAY                                       0x8DCF
#define GL_INT_SAMPLER_3D                                             0x8DCB
#define GL_INT_SAMPLER_CUBE                                           0x8DCC
#define GL_INVALID_FRAMEBUFFER_OPERATION                              0x0506
#define GL_MAJOR_VERSION                                              0x821B
#define GL_MAP_FLUSH_EXPLICIT_BIT                                     0x0010
#define GL_MAP_INVALIDATE_BUFFER_BIT                                  0x0008
#define GL_MAP_INVALIDATE_RANGE_BIT                                   0x0004
#define GL_MAP_READ_BIT                                               0x0001
#define GL_MAP_UNSYNCHRONIZED_BIT                                     0x0020
#define GL_MAP_WRITE_BIT                                              0x0002
#define GL_MAX_ARRAY_TEXTURE_LAYERS                                   0x88FF
#define GL_MAX_CLIP_DISTANCES                                         0x0D32
#define GL_MAX_COLOR_ATTACHMENTS                                      0x8CDF
#define GL_MAX_PROGRAM_TEXEL_OFFSET                                   0x8905
#define GL_MAX_RENDERBUFFER_SIZE                                      0x84E8
#define GL_MAX_SAMPLES                                                0x8D57
#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS              0x8C8A
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS                    0x8C8B
#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS                 0x8C80
#define GL_MAX_VARYING_COMPONENTS                                     0x8B4B
#define GL_MINOR_VERSION                                              0x821C
#define GL_MIN_PROGRAM_TEXEL_OFFSET                                   0x8904
#define GL_NUM_EXTENSIONS                                             0x821D
#define GL_PRIMITIVES_GENERATED                                       0x8C87
#define GL_PROXY_TEXTURE_1D_ARRAY                                     0x8C19
#define GL_PROXY_TEXTURE_2D_ARRAY                                     0x8C1B
#define GL_QUERY_BY_REGION_NO_WAIT                                    0x8E16
#define GL_QUERY_BY_REGION_WAIT                                       0x8E15
#define GL_QUERY_NO_WAIT                                              0x8E14
#define GL_QUERY_WAIT                                                 0x8E13
#define GL_R11F_G11F_B10F                                             0x8C3A
#define GL_R16                                                        0x822A
#define GL_R16F                                                       0x822D
#define GL_R16I                                                       0x8233
#define GL_R16UI                                                      0x8234
#define GL_R32F                                                       0x822E
#define GL_R32I                                                       0x8235
#define GL_R32UI                                                      0x8236
#define GL_R8                                                         0x8229
#define GL_R8I                                                        0x8231
#define GL_R8UI                                                       0x8232
#define GL_RASTERIZER_DISCARD                                         0x8C89
#define GL_READ_FRAMEBUFFER                                           0x8CA8
#define GL_READ_FRAMEBUFFER_BINDING                                   0x8CAA
#define GL_RED_INTEGER                                                0x8D94
#define GL_RENDERBUFFER                                               0x8D41
#define GL_RENDERBUFFER_ALPHA_SIZE                                    0x8D53
#define GL_RENDERBUFFER_BINDING                                       0x8CA7
#define GL_RENDERBUFFER_BLUE_SIZE                                     0x8D52
#define GL_RENDERBUFFER_DEPTH_SIZE                                    0x8D54
#define GL_RENDERBUFFER_GREEN_SIZE                                    0x8D51
#define GL_RENDERBUFFER_HEIGHT                                        0x8D43
#define GL_RENDERBUFFER_INTERNAL_FORMAT                               0x8D44
#define GL_RENDERBUFFER_RED_SIZE                                      0x8D50
#define GL_RENDERBUFFER_SAMPLES                                       0x8CAB
#define GL_RENDERBUFFER_STENCIL_SIZE                                  0x8D55
#define GL_RENDERBUFFER_WIDTH                                         0x8D42
#define GL_RG                                                         0x8227
#define GL_RG16                                                       0x822C
#define GL_RG16F                                                      0x822F
#define GL_RG16I                                                      0x8239
#define GL_RG16UI                                                     0x823A
#define GL_RG32F                                                      0x8230
#define GL_RG32I                                                      0x823B
#define GL_RG32UI                                                     0x823C
#define GL_RG8                                                        0x822B
#define GL_RG8I                                                       0x8237
#define GL_RG8UI                                                      0x8238
#define GL_RGB16F                                                     0x881B
#define GL_RGB16I                                                     0x8D89
#define GL_RGB16UI                                                    0x8D77
#define GL_RGB32F                                                     0x8815
#define GL_RGB32I                                                     0x8D83
#define GL_RGB32UI                                                    0x8D71
#define GL_RGB8I                                                      0x8D8F
#define GL_RGB8UI                                                     0x8D7D
#define GL_RGB9_E5                                                    0x8C3D
#define GL_RGBA16F                                                    0x881A
#define GL_RGBA16I                                                    0x8D88
#define GL_RGBA16UI                                                   0x8D76
#define GL_RGBA32F                                                    0x8814
#define GL_RGBA32I                                                    0x8D82
#define GL_RGBA32UI                                                   0x8D70
#define GL_RGBA8I                                                     0x8D8E
#define GL_RGBA8UI                                                    0x8D7C
#define GL_RGBA_INTEGER                                               0x8D99
#define GL_RGB_INTEGER                                                0x8D98
#define GL_RG_INTEGER                                                 0x8228
#define GL_SAMPLER_1D_ARRAY                                           0x8DC0
#define GL_SAMPLER_1D_ARRAY_SHADOW                                    0x8DC3
#define GL_SAMPLER_2D_ARRAY                                           0x8DC1
#define GL_SAMPLER_2D_ARRAY_SHADOW                                    0x8DC4
#define GL_SAMPLER_CUBE_SHADOW                                        0x8DC5
#define GL_SEPARATE_ATTRIBS                                           0x8C8D
#define GL_STENCIL_ATTACHMENT                                         0x8D20
#define GL_STENCIL_INDEX1                                             0x8D46
#define GL_STENCIL_INDEX16                                            0x8D49
#define GL_STENCIL_INDEX4                                             0x8D47
#define GL_STENCIL_INDEX8                                             0x8D48
#define GL_TEXTURE_1D_ARRAY                                           0x8C18
#define GL_TEXTURE_2D_ARRAY                                           0x8C1A
#define GL_TEXTURE_ALPHA_TYPE                                         0x8C13
#define GL_TEXTURE_BINDING_1D_ARRAY                                   0x8C1C
#define GL_TEXTURE_BINDING_2D_ARRAY                                   0x8C1D
#define GL_TEXTURE_BLUE_TYPE                                          0x8C12
#define GL_TEXTURE_DEPTH_TYPE                                         0x8C16
#define GL_TEXTURE_GREEN_TYPE                                         0x8C11
#define GL_TEXTURE_RED_TYPE                                           0x8C10
#define GL_TEXTURE_SHARED_SIZE                                        0x8C3F
#define GL_TEXTURE_STENCIL_SIZE                                       0x88F1
#define GL_TRANSFORM_FEEDBACK_BUFFER                                  0x8C8E
#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING                          0x8C8F
#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE                             0x8C7F
#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE                             0x8C85
#define GL_TRANSFORM_FEEDBACK_BUFFER_START                            0x8C84
#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN                      0x8C88
#define GL_TRANSFORM_FEEDBACK_VARYINGS                                0x8C83
#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH                      0x8C76
#define GL_UNSIGNED_INT_10F_11F_11F_REV                               0x8C3B
#define GL_UNSIGNED_INT_24_8                                          0x84FA
#define GL_UNSIGNED_INT_5_9_9_9_REV                                   0x8C3E
#define GL_UNSIGNED_INT_SAMPLER_1D                                    0x8DD1
#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY                              0x8DD6
#define GL_UNSIGNED_INT_SAMPLER_2D                                    0x8DD2
#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY                              0x8DD7
#define GL_UNSIGNED_INT_SAMPLER_3D                                    0x8DD3
#define GL_UNSIGNED_INT_SAMPLER_CUBE                                  0x8DD4
#define GL_UNSIGNED_INT_VEC2                                          0x8DC6
#define GL_UNSIGNED_INT_VEC3                                          0x8DC7
#define GL_UNSIGNED_INT_VEC4                                          0x8DC8
#define GL_UNSIGNED_NORMALIZED                                        0x8C17
#define GL_VERTEX_ARRAY_BINDING                                       0x85B5
#define GL_VERTEX_ATTRIB_ARRAY_INTEGER                                0x88FD
#define GL_ACTIVE_UNIFORM_BLOCKS                                      0x8A36
#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH                       0x8A35
#define GL_COPY_READ_BUFFER                                           0x8F36
#define GL_COPY_WRITE_BUFFER                                          0x8F37
#define GL_INT_SAMPLER_2D_RECT                                        0x8DCD
#define GL_INT_SAMPLER_BUFFER                                         0x8DD0
#define GL_INVALID_INDEX                                              0xFFFFFFFF
#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS                   0x8A33
#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS                   0x8A32
#define GL_MAX_COMBINED_UNIFORM_BLOCKS                                0x8A2E
#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS                     0x8A31
#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS                                0x8A2D
#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS                                0x8A2C
#define GL_MAX_RECTANGLE_TEXTURE_SIZE                                 0x84F8
#define GL_MAX_TEXTURE_BUFFER_SIZE                                    0x8C2B
#define GL_MAX_UNIFORM_BLOCK_SIZE                                     0x8A30
#define GL_MAX_UNIFORM_BUFFER_BINDINGS                                0x8A2F
#define GL_MAX_VERTEX_UNIFORM_BLOCKS                                  0x8A2B
#define GL_PRIMITIVE_RESTART                                          0x8F9D
#define GL_PRIMITIVE_RESTART_INDEX                                    0x8F9E
#define GL_PROXY_TEXTURE_RECTANGLE                                    0x84F7
#define GL_R16_SNORM                                                  0x8F98
#define GL_R8_SNORM                                                   0x8F94
#define GL_RG16_SNORM                                                 0x8F99
#define GL_RG8_SNORM                                                  0x8F95
#define GL_RGB16_SNORM                                                0x8F9A
#define GL_RGB8_SNORM                                                 0x8F96
#define GL_RGBA16_SNORM                                               0x8F9B
#define GL_RGBA8_SNORM                                                0x8F97
#define GL_SAMPLER_2D_RECT                                            0x8B63
#define GL_SAMPLER_2D_RECT_SHADOW                                     0x8B64
#define GL_SAMPLER_BUFFER                                             0x8DC2
#define GL_SIGNED_NORMALIZED                                          0x8F9C
#define GL_TEXTURE_BINDING_BUFFER                                     0x8C2C
#define GL_TEXTURE_BINDING_RECTANGLE                                  0x84F6
#define GL_TEXTURE_BUFFER                                             0x8C2A
#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING                          0x8C2D
#define GL_TEXTURE_RECTANGLE                                          0x84F5
#define GL_UNIFORM_ARRAY_STRIDE                                       0x8A3C
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS                              0x8A42
#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES                       0x8A43
#define GL_UNIFORM_BLOCK_BINDING                                      0x8A3F
#define GL_UNIFORM_BLOCK_DATA_SIZE                                    0x8A40
#define GL_UNIFORM_BLOCK_INDEX                                        0x8A3A
#define GL_UNIFORM_BLOCK_NAME_LENGTH                                  0x8A41
#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER                0x8A46
#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER                0x8A45
#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER                  0x8A44
#define GL_UNIFORM_BUFFER                                             0x8A11
#define GL_UNIFORM_BUFFER_BINDING                                     0x8A28
#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT                            0x8A34
#define GL_UNIFORM_BUFFER_SIZE                                        0x8A2A
#define GL_UNIFORM_BUFFER_START                                       0x8A29
#define GL_UNIFORM_IS_ROW_MAJOR                                       0x8A3E
#define GL_UNIFORM_MATRIX_STRIDE                                      0x8A3D
#define GL_UNIFORM_NAME_LENGTH                                        0x8A39
#define GL_UNIFORM_OFFSET                                             0x8A3B
#define GL_UNIFORM_SIZE                                               0x8A38
#define GL_UNIFORM_TYPE                                               0x8A37
#define GL_UNSIGNED_INT_SAMPLER_2D_RECT                               0x8DD5
#define GL_UNSIGNED_INT_SAMPLER_BUFFER                                0x8DD8
#define GL_ALREADY_SIGNALED                                           0x911A
#define GL_CONDITION_SATISFIED                                        0x911C
#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT                          0x00000002
#define GL_CONTEXT_CORE_PROFILE_BIT                                   0x00000001
#define GL_CONTEXT_PROFILE_MASK                                       0x9126
#define GL_DEPTH_CLAMP                                                0x864F
#define GL_FIRST_VERTEX_CONVENTION                                    0x8E4D
#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED                             0x8DA7
#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS                       0x8DA8
#define GL_GEOMETRY_INPUT_TYPE                                        0x8917
#define GL_GEOMETRY_OUTPUT_TYPE                                       0x8918
#define GL_GEOMETRY_SHADER                                            0x8DD9
#define GL_GEOMETRY_VERTICES_OUT                                      0x8916
#define GL_INT_SAMPLER_2D_MULTISAMPLE                                 0x9109
#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY                           0x910C
#define GL_LAST_VERTEX_CONVENTION                                     0x8E4E
#define GL_LINES_ADJACENCY                                            0x000A
#define GL_LINE_STRIP_ADJACENCY                                       0x000B
#define GL_MAX_COLOR_TEXTURE_SAMPLES                                  0x910E
#define GL_MAX_DEPTH_TEXTURE_SAMPLES                                  0x910F
#define GL_MAX_FRAGMENT_INPUT_COMPONENTS                              0x9125
#define GL_MAX_GEOMETRY_INPUT_COMPONENTS                              0x9123
#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS                             0x9124
#define GL_MAX_GEOMETRY_OUTPUT_VERTICES                               0x8DE0
#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS                           0x8C29
#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS                       0x8DE1
#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS                            0x8DDF
#define GL_MAX_INTEGER_SAMPLES                                        0x9110
#define GL_MAX_SAMPLE_MASK_WORDS                                      0x8E59
#define GL_MAX_SERVER_WAIT_TIMEOUT                                    0x9111
#define GL_MAX_VERTEX_OUTPUT_COMPONENTS                               0x9122
#define GL_OBJECT_TYPE                                                0x9112
#define GL_PROGRAM_POINT_SIZE                                         0x8642
#define GL_PROVOKING_VERTEX                                           0x8E4F
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE                               0x9101
#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY                         0x9103
#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION                   0x8E4C
#define GL_SAMPLER_2D_MULTISAMPLE                                     0x9108
#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY                               0x910B
#define GL_SAMPLE_MASK                                                0x8E51
#define GL_SAMPLE_MASK_VALUE                                          0x8E52
#define GL_SAMPLE_POSITION                                            0x8E50
#define GL_SIGNALED                                                   0x9119
#define GL_SYNC_CONDITION                                             0x9113
#define GL_SYNC_FENCE                                                 0x9116
#define GL_SYNC_FLAGS                                                 0x9115
#define GL_SYNC_FLUSH_COMMANDS_BIT                                    0x00000001
#define GL_SYNC_GPU_COMMANDS_COMPLETE                                 0x9117
#define GL_SYNC_STATUS                                                0x9114
#define GL_TEXTURE_2D_MULTISAMPLE                                     0x9100
#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY                               0x9102
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE                             0x9104
#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY                       0x9105
#define GL_TEXTURE_CUBE_MAP_SEAMLESS                                  0x884F
#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS                             0x9107
#define GL_TEXTURE_SAMPLES                                            0x9106
#define GL_TIMEOUT_EXPIRED                                            0x911B
#define GL_TIMEOUT_IGNORED                                            0xFFFFFFFFFFFFFFFF
#define GL_TRIANGLES_ADJACENCY                                        0x000C
#define GL_TRIANGLE_STRIP_ADJACENCY                                   0x000D
#define GL_UNSIGNALED                                                 0x9118
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE                        0x910A
#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY                  0x910D
#define GL_WAIT_FAILED                                                0x911D
#define GL_ANY_SAMPLES_PASSED                                         0x8C2F
#define GL_INT_2_10_10_10_REV                                         0x8D9F
#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS                               0x88FC
#define GL_ONE_MINUS_SRC1_ALPHA                                       0x88FB
#define GL_ONE_MINUS_SRC1_COLOR                                       0x88FA
#define GL_RGB10_A2UI                                                 0x906F
#define GL_SAMPLER_BINDING                                            0x8919
#define GL_SRC1_COLOR                                                 0x88F9
#define GL_TEXTURE_SWIZZLE_A                                          0x8E45
#define GL_TEXTURE_SWIZZLE_B                                          0x8E44
#define GL_TEXTURE_SWIZZLE_G                                          0x8E43
#define GL_TEXTURE_SWIZZLE_R                                          0x8E42
#define GL_TEXTURE_SWIZZLE_RGBA                                       0x8E46
#define GL_TIMESTAMP                                                  0x8E28
#define GL_TIME_ELAPSED                                               0x88BF
#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR                                0x88FE
#define GL_ACTIVE_SUBROUTINES                                         0x8DE5
#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH                               0x8E48
#define GL_ACTIVE_SUBROUTINE_UNIFORMS                                 0x8DE6
#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS                        0x8E47
#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH                       0x8E49
#define GL_COMPATIBLE_SUBROUTINES                                     0x8E4B
#define GL_DOUBLE_MAT2                                                0x8F46
#define GL_DOUBLE_MAT2x3                                              0x8F49
#define GL_DOUBLE_MAT2x4                                              0x8F4A
#define GL_DOUBLE_MAT3                                                0x8F47
#define GL_DOUBLE_MAT3x2                                              0x8F4B
#define GL_DOUBLE_MAT3x4                                              0x8F4C
#define GL_DOUBLE_MAT4                                                0x8F48
#define GL_DOUBLE_MAT4x2                                              0x8F4D
#define GL_DOUBLE_MAT4x3                                              0x8F4E
#define GL_DOUBLE_VEC2                                                0x8FFC
#define GL_DOUBLE_VEC3                                                0x8FFD
#define GL_DOUBLE_VEC4                                                0x8FFE
#define GL_DRAW_INDIRECT_BUFFER                                       0x8F3F
#define GL_DRAW_INDIRECT_BUFFER_BINDING                               0x8F43
#define GL_FRACTIONAL_EVEN                                            0x8E7C
#define GL_FRACTIONAL_ODD                                             0x8E7B
#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS                         0x8E5D
#define GL_GEOMETRY_SHADER_INVOCATIONS                                0x887F
#define GL_INT_SAMPLER_CUBE_MAP_ARRAY                                 0x900E
#define GL_ISOLINES                                                   0x8E7A
#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS               0x8E1E
#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS            0x8E1F
#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET                          0x8E5C
#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS                            0x8E5A
#define GL_MAX_PATCH_VERTICES                                         0x8E7D
#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET                          0x8E5F
#define GL_MAX_SUBROUTINES                                            0x8DE7
#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS                           0x8DE8
#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS                          0x886C
#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS                         0x8E83
#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS                       0x8E81
#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS                   0x8E85
#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS                            0x8E89
#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS                        0x8E7F
#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS                       0x886D
#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS                      0x8E86
#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS                    0x8E82
#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS                         0x8E8A
#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS                     0x8E80
#define GL_MAX_TESS_GEN_LEVEL                                         0x8E7E
#define GL_MAX_TESS_PATCH_COMPONENTS                                  0x8E84
#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS                             0x8E70
#define GL_MAX_VERTEX_STREAMS                                         0x8E71
#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET                          0x8E5B
#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET                          0x8E5E
#define GL_MIN_SAMPLE_SHADING_VALUE                                   0x8C37
#define GL_NUM_COMPATIBLE_SUBROUTINES                                 0x8E4A
#define GL_PATCHES                                                    0x000E
#define GL_PATCH_DEFAULT_INNER_LEVEL                                  0x8E73
#define GL_PATCH_DEFAULT_OUTER_LEVEL                                  0x8E74
#define GL_PATCH_VERTICES                                             0x8E72
#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY                               0x900B
#define GL_SAMPLER_CUBE_MAP_ARRAY                                     0x900C
#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW                              0x900D
#define GL_SAMPLE_SHADING                                             0x8C36
#define GL_TESS_CONTROL_OUTPUT_VERTICES                               0x8E75
#define GL_TESS_CONTROL_SHADER                                        0x8E88
#define GL_TESS_EVALUATION_SHADER                                     0x8E87
#define GL_TESS_GEN_MODE                                              0x8E76
#define GL_TESS_GEN_POINT_MODE                                        0x8E79
#define GL_TESS_GEN_SPACING                                           0x8E77
#define GL_TESS_GEN_VERTEX_ORDER                                      0x8E78
#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY                             0x900A
#define GL_TEXTURE_CUBE_MAP_ARRAY                                     0x9009
#define GL_TRANSFORM_FEEDBACK                                         0x8E22
#define GL_TRANSFORM_FEEDBACK_BINDING                                 0x8E25
#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE                           0x8E24
#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED                           0x8E23
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER            0x84F0
#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER         0x84F1
#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY                        0x900F
#define GL_ACTIVE_PROGRAM                                             0x8259
#define GL_ALL_SHADER_BITS                                            0xFFFFFFFF
#define GL_FIXED                                                      0x140C
#define GL_FRAGMENT_SHADER_BIT                                        0x00000002
#define GL_GEOMETRY_SHADER_BIT                                        0x00000004
#define GL_HIGH_FLOAT                                                 0x8DF2
#define GL_HIGH_INT                                                   0x8DF5
#define GL_IMPLEMENTATION_COLOR_READ_FORMAT                           0x8B9B
#define GL_IMPLEMENTATION_COLOR_READ_TYPE                             0x8B9A
#define GL_LAYER_PROVOKING_VERTEX                                     0x825E
#define GL_LOW_FLOAT                                                  0x8DF0
#define GL_LOW_INT                                                    0x8DF3
#define GL_MAX_FRAGMENT_UNIFORM_VECTORS                               0x8DFD
#define GL_MAX_VARYING_VECTORS                                        0x8DFC
#define GL_MAX_VERTEX_UNIFORM_VECTORS                                 0x8DFB
#define GL_MAX_VIEWPORTS                                              0x825B
#define GL_MEDIUM_FLOAT                                               0x8DF1
#define GL_MEDIUM_INT                                                 0x8DF4
#define GL_NUM_PROGRAM_BINARY_FORMATS                                 0x87FE
#define GL_NUM_SHADER_BINARY_FORMATS                                  0x8DF9
#define GL_PROGRAM_BINARY_FORMATS                                     0x87FF
#define GL_PROGRAM_BINARY_LENGTH                                      0x8741
#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT                            0x8257
#define GL_PROGRAM_PIPELINE_BINDING                                   0x825A
#define GL_PROGRAM_SEPARABLE                                          0x8258
#define GL_RGB565                                                     0x8D62
#define GL_SHADER_BINARY_FORMATS                                      0x8DF8
#define GL_SHADER_COMPILER                                            0x8DFA
#define GL_TESS_CONTROL_SHADER_BIT                                    0x00000008
#define GL_TESS_EVALUATION_SHADER_BIT                                 0x00000010
#define GL_UNDEFINED_VERTEX                                           0x8260
#define GL_VERTEX_SHADER_BIT                                          0x00000001
#define GL_VIEWPORT_BOUNDS_RANGE                                      0x825D
#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX                            0x825F
#define GL_VIEWPORT_SUBPIXEL_BITS                                     0x825C
#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS                              0x92D9
#define GL_ALL_BARRIER_BITS                                           0xFFFFFFFF
#define GL_ATOMIC_COUNTER_BARRIER_BIT                                 0x00001000
#define GL_ATOMIC_COUNTER_BUFFER                                      0x92C0
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS               0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES        0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_BINDING                              0x92C1
#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE                            0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER        0x92CB
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER        0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER    0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER          0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_SIZE                                 0x92C3
#define GL_ATOMIC_COUNTER_BUFFER_START                                0x92C2
#define GL_BUFFER_UPDATE_BARRIER_BIT                                  0x00000200
#define GL_COMMAND_BARRIER_BIT                                        0x00000040
#define GL_COMPRESSED_RGBA_BPTC_UNORM                                 0x8E8C
#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT                           0x8E8E
#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT                         0x8E8F
#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM                           0x8E8D
#define GL_COPY_READ_BUFFER_BINDING                                   0x8F36
#define GL_COPY_WRITE_BUFFER_BINDING                                  0x8F37
#define GL_ELEMENT_ARRAY_BARRIER_BIT                                  0x00000002
#define GL_FRAMEBUFFER_BARRIER_BIT                                    0x00000400
#define GL_IMAGE_1D                                                   0x904C
#define GL_IMAGE_1D_ARRAY                                             0x9052
#define GL_IMAGE_2D                                                   0x904D
#define GL_IMAGE_2D_ARRAY                                             0x9053
#define GL_IMAGE_2D_MULTISAMPLE                                       0x9055
#define GL_IMAGE_2D_MULTISAMPLE_ARRAY                                 0x9056
#define GL_IMAGE_2D_RECT                                              0x904F
#define GL_IMAGE_3D                                                   0x904E
#define GL_IMAGE_BINDING_ACCESS                                       0x8F3E
#define GL_IMAGE_BINDING_FORMAT                                       0x906E
#define GL_IMAGE_BINDING_LAYER                                        0x8F3D
#define GL_IMAGE_BINDING_LAYERED                                      0x8F3C
#define GL_IMAGE_BINDING_LEVEL                                        0x8F3B
#define GL_IMAGE_BINDING_NAME                                         0x8F3A
#define GL_IMAGE_BUFFER                                               0x9051
#define GL_IMAGE_CUBE                                                 0x9050
#define GL_IMAGE_CUBE_MAP_ARRAY                                       0x9054
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS                        0x90C9
#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE                         0x90C8
#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE                            0x90C7
#define GL_INT_IMAGE_1D                                               0x9057
#define GL_INT_IMAGE_1D_ARRAY                                         0x905D
#define GL_INT_IMAGE_2D                                               0x9058
#define GL_INT_IMAGE_2D_ARRAY                                         0x905E
#define GL_INT_IMAGE_2D_MULTISAMPLE                                   0x9060
#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY                             0x9061
#define GL_INT_IMAGE_2D_RECT                                          0x905A
#define GL_INT_IMAGE_3D                                               0x9059
#define GL_INT_IMAGE_BUFFER                                           0x905C
#define GL_INT_IMAGE_CUBE                                             0x905B
#define GL_INT_IMAGE_CUBE_MAP_ARRAY                                   0x905F
#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS                         0x92DC
#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE                             0x92D8
#define GL_MAX_COMBINED_ATOMIC_COUNTERS                               0x92D7
#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS                        0x92D1
#define GL_MAX_COMBINED_IMAGE_UNIFORMS                                0x90CF
#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS              0x8F39
#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS                               0x92D6
#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS                        0x92D0
#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS                                0x90CE
#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS                               0x92D5
#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS                        0x92CF
#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS                                0x90CD
#define GL_MAX_IMAGE_SAMPLES                                          0x906D
#define GL_MAX_IMAGE_UNITS                                            0x8F38
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS                           0x92D3
#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS                    0x92CD
#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS                            0x90CB
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS                        0x92D4
#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS                 0x92CE
#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS                         0x90CC
#define GL_MAX_VERTEX_ATOMIC_COUNTERS                                 0x92D2
#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS                          0x92CC
#define GL_MAX_VERTEX_IMAGE_UNIFORMS                                  0x90CA
#define GL_MIN_MAP_BUFFER_ALIGNMENT                                   0x90BC
#define GL_NUM_SAMPLE_COUNTS                                          0x9380
#define GL_PACK_COMPRESSED_BLOCK_DEPTH                                0x912D
#define GL_PACK_COMPRESSED_BLOCK_HEIGHT                               0x912C
#define GL_PACK_COMPRESSED_BLOCK_SIZE                                 0x912E
#define GL_PACK_COMPRESSED_BLOCK_WIDTH                                0x912B
#define GL_PIXEL_BUFFER_BARRIER_BIT                                   0x00000080
#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT                            0x00000020
#define GL_TEXTURE_FETCH_BARRIER_BIT                                  0x00000008
#define GL_TEXTURE_IMMUTABLE_FORMAT                                   0x912F
#define GL_TEXTURE_UPDATE_BARRIER_BIT                                 0x00000100
#define GL_TRANSFORM_FEEDBACK_ACTIVE                                  0x8E24
#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT                             0x00000800
#define GL_TRANSFORM_FEEDBACK_PAUSED                                  0x8E23
#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX                        0x92DA
#define GL_UNIFORM_BARRIER_BIT                                        0x00000004
#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH                              0x9129
#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT                             0x9128
#define GL_UNPACK_COMPRESSED_BLOCK_SIZE                               0x912A
#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH                              0x9127
#define GL_UNSIGNED_INT_ATOMIC_COUNTER                                0x92DB
#define GL_UNSIGNED_INT_IMAGE_1D                                      0x9062
#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY                                0x9068
#define GL_UNSIGNED_INT_IMAGE_2D                                      0x9063
#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY                                0x9069
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE                          0x906B
#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY                    0x906C
#define GL_UNSIGNED_INT_IMAGE_2D_RECT                                 0x9065
#define GL_UNSIGNED_INT_IMAGE_3D                                      0x9064
#define GL_UNSIGNED_INT_IMAGE_BUFFER                                  0x9067
#define GL_UNSIGNED_INT_IMAGE_CUBE                                    0x9066
#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY                          0x906A
#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT                            0x00000001
#define GL_ACTIVE_RESOURCES                                           0x92F5
#define GL_ACTIVE_VARIABLES                                           0x9305
#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE                            0x8D6A
#define GL_ARRAY_SIZE                                                 0x92FB
#define GL_ARRAY_STRIDE                                               0x92FE
#define GL_ATOMIC_COUNTER_BUFFER_INDEX                                0x9301
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER         0x90ED
#define GL_AUTO_GENERATE_MIPMAP                                       0x8295
#define GL_BLOCK_INDEX                                                0x92FD
#define GL_BUFFER                                                     0x82E0
#define GL_BUFFER_BINDING                                             0x9302
#define GL_BUFFER_DATA_SIZE                                           0x9303
#define GL_BUFFER_VARIABLE                                            0x92E5
#define GL_CAVEAT_SUPPORT                                             0x82B8
#define GL_CLEAR_BUFFER                                               0x82B4
#define GL_COLOR_COMPONENTS                                           0x8283
#define GL_COLOR_ENCODING                                             0x8296
#define GL_COLOR_RENDERABLE                                           0x8286
#define GL_COMPRESSED_R11_EAC                                         0x9270
#define GL_COMPRESSED_RG11_EAC                                        0x9272
#define GL_COMPRESSED_RGB8_ETC2                                       0x9274
#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2                   0x9276
#define GL_COMPRESSED_RGBA8_ETC2_EAC                                  0x9278
#define GL_COMPRESSED_SIGNED_R11_EAC                                  0x9271
#define GL_COMPRESSED_SIGNED_RG11_EAC                                 0x9273
#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC                           0x9279
#define GL_COMPRESSED_SRGB8_ETC2                                      0x9275
#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2                  0x9277
#define GL_COMPUTE_SHADER                                             0x91B9
#define GL_COMPUTE_SHADER_BIT                                         0x00000020
#define GL_COMPUTE_SUBROUTINE                                         0x92ED
#define GL_COMPUTE_SUBROUTINE_UNIFORM                                 0x92F3
#define GL_COMPUTE_TEXTURE                                            0x82A0
#define GL_COMPUTE_WORK_GROUP_SIZE                                    0x8267
#define GL_CONTEXT_FLAG_DEBUG_BIT                                     0x00000002
#define GL_DEBUG_CALLBACK_FUNCTION                                    0x8244
#define GL_DEBUG_CALLBACK_USER_PARAM                                  0x8245
#define GL_DEBUG_GROUP_STACK_DEPTH                                    0x826D
#define GL_DEBUG_LOGGED_MESSAGES                                      0x9145
#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH                           0x8243
#define GL_DEBUG_OUTPUT                                               0x92E0
#define GL_DEBUG_OUTPUT_SYNCHRONOUS                                   0x8242
#define GL_DEBUG_SEVERITY_HIGH                                        0x9146
#define GL_DEBUG_SEVERITY_LOW                                         0x9148
#define GL_DEBUG_SEVERITY_MEDIUM                                      0x9147
#define GL_DEBUG_SEVERITY_NOTIFICATION                                0x826B
#define GL_DEBUG_SOURCE_API                                           0x8246
#define GL_DEBUG_SOURCE_APPLICATION                                   0x824A
#define GL_DEBUG_SOURCE_OTHER                                         0x824B
#define GL_DEBUG_SOURCE_SHADER_COMPILER                               0x8248
#define GL_DEBUG_SOURCE_THIRD_PARTY                                   0x8249
#define GL_DEBUG_SOURCE_WINDOW_SYSTEM                                 0x8247
#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR                             0x824D
#define GL_DEBUG_TYPE_ERROR                                           0x824C
#define GL_DEBUG_TYPE_MARKER                                          0x8268
#define GL_DEBUG_TYPE_OTHER                                           0x8251
#define GL_DEBUG_TYPE_PERFORMANCE                                     0x8250
#define GL_DEBUG_TYPE_POP_GROUP                                       0x826A
#define GL_DEBUG_TYPE_PORTABILITY                                     0x824F
#define GL_DEBUG_TYPE_PUSH_GROUP                                      0x8269
#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR                              0x824E
#define GL_DEPTH_COMPONENTS                                           0x8284
#define GL_DEPTH_RENDERABLE                                           0x8287
#define GL_DEPTH_STENCIL_TEXTURE_MODE                                 0x90EA
#define GL_DISPATCH_INDIRECT_BUFFER                                   0x90EE
#define GL_DISPATCH_INDIRECT_BUFFER_BINDING                           0x90EF
#define GL_FILTER                                                     0x829A
#define GL_FRAGMENT_SUBROUTINE                                        0x92EC
#define GL_FRAGMENT_SUBROUTINE_UNIFORM                                0x92F2
#define GL_FRAGMENT_TEXTURE                                           0x829F
#define GL_FRAMEBUFFER_BLEND                                          0x828B
#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS                 0x9314
#define GL_FRAMEBUFFER_DEFAULT_HEIGHT                                 0x9311
#define GL_FRAMEBUFFER_DEFAULT_LAYERS                                 0x9312
#define GL_FRAMEBUFFER_DEFAULT_SAMPLES                                0x9313
#define GL_FRAMEBUFFER_DEFAULT_WIDTH                                  0x9310
#define GL_FRAMEBUFFER_RENDERABLE                                     0x8289
#define GL_FRAMEBUFFER_RENDERABLE_LAYERED                             0x828A
#define GL_FULL_SUPPORT                                               0x82B7
#define GL_GEOMETRY_SUBROUTINE                                        0x92EB
#define GL_GEOMETRY_SUBROUTINE_UNIFORM                                0x92F1
#define GL_GEOMETRY_TEXTURE                                           0x829E
#define GL_GET_TEXTURE_IMAGE_FORMAT                                   0x8291
#define GL_GET_TEXTURE_IMAGE_TYPE                                     0x8292
#define GL_IMAGE_CLASS_10_10_10_2                                     0x82C3
#define GL_IMAGE_CLASS_11_11_10                                       0x82C2
#define GL_IMAGE_CLASS_1_X_16                                         0x82BE
#define GL_IMAGE_CLASS_1_X_32                                         0x82BB
#define GL_IMAGE_CLASS_1_X_8                                          0x82C1
#define GL_IMAGE_CLASS_2_X_16                                         0x82BD
#define GL_IMAGE_CLASS_2_X_32                                         0x82BA
#define GL_IMAGE_CLASS_2_X_8                                          0x82C0
#define GL_IMAGE_CLASS_4_X_16                                         0x82BC
#define GL_IMAGE_CLASS_4_X_32                                         0x82B9
#define GL_IMAGE_CLASS_4_X_8                                          0x82BF
#define GL_IMAGE_COMPATIBILITY_CLASS                                  0x82A8
#define GL_IMAGE_PIXEL_FORMAT                                         0x82A9
#define GL_IMAGE_PIXEL_TYPE                                           0x82AA
#define GL_IMAGE_TEXEL_SIZE                                           0x82A7
#define GL_INTERNALFORMAT_ALPHA_SIZE                                  0x8274
#define GL_INTERNALFORMAT_ALPHA_TYPE                                  0x827B
#define GL_INTERNALFORMAT_BLUE_SIZE                                   0x8273
#define GL_INTERNALFORMAT_BLUE_TYPE                                   0x827A
#define GL_INTERNALFORMAT_DEPTH_SIZE                                  0x8275
#define GL_INTERNALFORMAT_DEPTH_TYPE                                  0x827C
#define GL_INTERNALFORMAT_GREEN_SIZE                                  0x8272
#define GL_INTERNALFORMAT_GREEN_TYPE                                  0x8279
#define GL_INTERNALFORMAT_PREFERRED                                   0x8270
#define GL_INTERNALFORMAT_RED_SIZE                                    0x8271
#define GL_INTERNALFORMAT_RED_TYPE                                    0x8278
#define GL_INTERNALFORMAT_SHARED_SIZE                                 0x8277
#define GL_INTERNALFORMAT_STENCIL_SIZE                                0x8276
#define GL_INTERNALFORMAT_STENCIL_TYPE                                0x827D
#define GL_INTERNALFORMAT_SUPPORTED                                   0x826F
#define GL_IS_PER_PATCH                                               0x92E7
#define GL_IS_ROW_MAJOR                                               0x9300
#define GL_LOCATION                                                   0x930E
#define GL_LOCATION_INDEX                                             0x930F
#define GL_MANUAL_GENERATE_MIPMAP                                     0x8294
#define GL_MATRIX_STRIDE                                              0x92FF
#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS                    0x8266
#define GL_MAX_COMBINED_DIMENSIONS                                    0x8282
#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES                       0x8F39
#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS                         0x90DC
#define GL_MAX_COMPUTE_ATOMIC_COUNTERS                                0x8265
#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS                         0x8264
#define GL_MAX_COMPUTE_IMAGE_UNIFORMS                                 0x91BD
#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS                          0x90DB
#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE                             0x8262
#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS                            0x91BC
#define GL_MAX_COMPUTE_UNIFORM_BLOCKS                                 0x91BB
#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS                             0x8263
#define GL_MAX_COMPUTE_WORK_GROUP_COUNT                               0x91BE
#define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS                         0x90EB
#define GL_MAX_COMPUTE_WORK_GROUP_SIZE                                0x91BF
#define GL_MAX_DEBUG_GROUP_STACK_DEPTH                                0x826C
#define GL_MAX_DEBUG_LOGGED_MESSAGES                                  0x9144
#define GL_MAX_DEBUG_MESSAGE_LENGTH                                   0x9143
#define GL_MAX_DEPTH                                                  0x8280
#define GL_MAX_ELEMENT_INDEX                                          0x8D6B
#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS                         0x90DA
#define GL_MAX_FRAMEBUFFER_HEIGHT                                     0x9316
#define GL_MAX_FRAMEBUFFER_LAYERS                                     0x9317
#define GL_MAX_FRAMEBUFFER_SAMPLES                                    0x9318
#define GL_MAX_FRAMEBUFFER_WIDTH                                      0x9315
#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS                         0x90D7
#define GL_MAX_HEIGHT                                                 0x827F
#define GL_MAX_LABEL_LENGTH                                           0x82E8
#define GL_MAX_LAYERS                                                 0x8281
#define GL_MAX_NAME_LENGTH                                            0x92F6
#define GL_MAX_NUM_ACTIVE_VARIABLES                                   0x92F7
#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES                             0x92F8
#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE                              0x90DE
#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS                         0x90DD
#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS                     0x90D8
#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS                  0x90D9
#define GL_MAX_UNIFORM_LOCATIONS                                      0x826E
#define GL_MAX_VERTEX_ATTRIB_BINDINGS                                 0x82DA
#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET                          0x82D9
#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS                           0x90D6
#define GL_MAX_WIDTH                                                  0x827E
#define GL_MIPMAP                                                     0x8293
#define GL_NAME_LENGTH                                                0x92F9
#define GL_NUM_ACTIVE_VARIABLES                                       0x9304
#define GL_NUM_SHADING_LANGUAGE_VERSIONS                              0x82E9
#define GL_OFFSET                                                     0x92FC
#define GL_PRIMITIVE_RESTART_FIXED_INDEX                              0x8D69
#define GL_PROGRAM                                                    0x82E2
#define GL_PROGRAM_INPUT                                              0x92E3
#define GL_PROGRAM_OUTPUT                                             0x92E4
#define GL_PROGRAM_PIPELINE                                           0x82E4
#define GL_QUERY                                                      0x82E3
#define GL_READ_PIXELS                                                0x828C
#define GL_READ_PIXELS_FORMAT                                         0x828D
#define GL_READ_PIXELS_TYPE                                           0x828E
#define GL_REFERENCED_BY_COMPUTE_SHADER                               0x930B
#define GL_REFERENCED_BY_FRAGMENT_SHADER                              0x930A
#define GL_REFERENCED_BY_GEOMETRY_SHADER                              0x9309
#define GL_REFERENCED_BY_TESS_CONTROL_SHADER                          0x9307
#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER                       0x9308
#define GL_REFERENCED_BY_VERTEX_SHADER                                0x9306
#define GL_SAMPLER                                                    0x82E6
#define GL_SHADER                                                     0x82E1
#define GL_SHADER_IMAGE_ATOMIC                                        0x82A6
#define GL_SHADER_IMAGE_LOAD                                          0x82A4
#define GL_SHADER_IMAGE_STORE                                         0x82A5
#define GL_SHADER_STORAGE_BARRIER_BIT                                 0x00002000
#define GL_SHADER_STORAGE_BLOCK                                       0x92E6
#define GL_SHADER_STORAGE_BUFFER                                      0x90D2
#define GL_SHADER_STORAGE_BUFFER_BINDING                              0x90D3
#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT                     0x90DF
#define GL_SHADER_STORAGE_BUFFER_SIZE                                 0x90D5
#define GL_SHADER_STORAGE_BUFFER_START                                0x90D4
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST                        0x82AC
#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE                       0x82AE
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST                      0x82AD
#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE                     0x82AF
#define GL_SRGB_READ                                                  0x8297
#define GL_SRGB_WRITE                                                 0x8298
#define GL_STENCIL_COMPONENTS                                         0x8285
#define GL_STENCIL_RENDERABLE                                         0x8288
#define GL_TESS_CONTROL_SUBROUTINE                                    0x92E9
#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM                            0x92EF
#define GL_TESS_CONTROL_TEXTURE                                       0x829C
#define GL_TESS_EVALUATION_SUBROUTINE                                 0x92EA
#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM                         0x92F0
#define GL_TESS_EVALUATION_TEXTURE                                    0x829D
#define GL_TEXTURE_BUFFER_OFFSET                                      0x919D
#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT                            0x919F
#define GL_TEXTURE_BUFFER_SIZE                                        0x919E
#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT                            0x82B2
#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE                              0x82B3
#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH                             0x82B1
#define GL_TEXTURE_GATHER                                             0x82A2
#define GL_TEXTURE_GATHER_SHADOW                                      0x82A3
#define GL_TEXTURE_IMAGE_FORMAT                                       0x828F
#define GL_TEXTURE_IMAGE_TYPE                                         0x8290
#define GL_TEXTURE_IMMUTABLE_LEVELS                                   0x82DF
#define GL_TEXTURE_SHADOW                                             0x82A1
#define GL_TEXTURE_VIEW                                               0x82B5
#define GL_TEXTURE_VIEW_MIN_LAYER                                     0x82DD
#define GL_TEXTURE_VIEW_MIN_LEVEL                                     0x82DB
#define GL_TEXTURE_VIEW_NUM_LAYERS                                    0x82DE
#define GL_TEXTURE_VIEW_NUM_LEVELS                                    0x82DC
#define GL_TOP_LEVEL_ARRAY_SIZE                                       0x930C
#define GL_TOP_LEVEL_ARRAY_STRIDE                                     0x930D
#define GL_TRANSFORM_FEEDBACK_VARYING                                 0x92F4
#define GL_TYPE                                                       0x92FA
#define GL_UNIFORM                                                    0x92E1
#define GL_UNIFORM_BLOCK                                              0x92E2
#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER                 0x90EC
#define GL_VERTEX_ATTRIB_ARRAY_LONG                                   0x874E
#define GL_VERTEX_ATTRIB_BINDING                                      0x82D4
#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET                              0x82D5
#define GL_VERTEX_BINDING_BUFFER                                      0x8F4F
#define GL_VERTEX_BINDING_DIVISOR                                     0x82D6
#define GL_VERTEX_BINDING_OFFSET                                      0x82D7
#define GL_VERTEX_BINDING_STRIDE                                      0x82D8
#define GL_VERTEX_SUBROUTINE                                          0x92E8
#define GL_VERTEX_SUBROUTINE_UNIFORM                                  0x92EE
#define GL_VERTEX_TEXTURE                                             0x829B
#define GL_VIEW_CLASS_128_BITS                                        0x82C4
#define GL_VIEW_CLASS_16_BITS                                         0x82CA
#define GL_VIEW_CLASS_24_BITS                                         0x82C9
#define GL_VIEW_CLASS_32_BITS                                         0x82C8
#define GL_VIEW_CLASS_48_BITS                                         0x82C7
#define GL_VIEW_CLASS_64_BITS                                         0x82C6
#define GL_VIEW_CLASS_8_BITS                                          0x82CB
#define GL_VIEW_CLASS_96_BITS                                         0x82C5
#define GL_VIEW_CLASS_BPTC_FLOAT                                      0x82D3
#define GL_VIEW_CLASS_BPTC_UNORM                                      0x82D2
#define GL_VIEW_CLASS_RGTC1_RED                                       0x82D0
#define GL_VIEW_CLASS_RGTC2_RG                                        0x82D1
#define GL_VIEW_CLASS_S3TC_DXT1_RGB                                   0x82CC
#define GL_VIEW_CLASS_S3TC_DXT1_RGBA                                  0x82CD
#define GL_VIEW_CLASS_S3TC_DXT3_RGBA                                  0x82CE
#define GL_VIEW_CLASS_S3TC_DXT5_RGBA                                  0x82CF
#define GL_VIEW_COMPATIBILITY_CLASS                                   0x82B6
#define GL_BUFFER_IMMUTABLE_STORAGE                                   0x821F
#define GL_BUFFER_STORAGE_FLAGS                                       0x8220
#define GL_CLEAR_TEXTURE                                              0x9365
#define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT                           0x00004000
#define GL_CLIENT_STORAGE_BIT                                         0x0200
#define GL_DYNAMIC_STORAGE_BIT                                        0x0100
#define GL_LOCATION_COMPONENT                                         0x934A
#define GL_MAP_COHERENT_BIT                                           0x0080
#define GL_MAP_PERSISTENT_BIT                                         0x0040
#define GL_MAX_VERTEX_ATTRIB_STRIDE                                   0x82E5
#define GL_MIRROR_CLAMP_TO_EDGE                                       0x8743
#define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED                    0x8221
#define GL_QUERY_BUFFER                                               0x9192
#define GL_QUERY_BUFFER_BARRIER_BIT                                   0x00008000
#define GL_QUERY_BUFFER_BINDING                                       0x9193
#define GL_QUERY_RESULT_NO_WAIT                                       0x9194
#define GL_TEXTURE_BUFFER_BINDING                                     0x8C2A
#define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX                            0x934B
#define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE                           0x934C

#include <GL/gl.h>
#include <GL/glcorearb.h>

typedef char      GLchar;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;

typedef void            GLDECL CopyTexSubImage3Dproc(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);                                                                                                                                extern CopyTexSubImage3Dproc*                           glCopyTexSubImage3D;
typedef void            GLDECL DrawRangeElementsproc(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices);                                                                                                                                                                 extern DrawRangeElementsproc*                           glDrawRangeElements;
typedef void            GLDECL TexImage3Dproc(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels);                                                                                                  extern TexImage3Dproc*                                  glTexImage3D;
typedef void            GLDECL TexSubImage3Dproc(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);                                                                                      extern TexSubImage3Dproc*                               glTexSubImage3D;
typedef void            GLDECL ActiveTextureproc(GLenum texture);                                                                                                                                                                                                                                              extern ActiveTextureproc*                               glActiveTexture;
typedef void            GLDECL ClientActiveTextureproc(GLenum texture);                                                                                                                                                                                                                                        extern ClientActiveTextureproc*                         glClientActiveTexture;
typedef void            GLDECL CompressedTexImage1Dproc(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data);                                                                                                                                 extern CompressedTexImage1Dproc*                        glCompressedTexImage1D;
typedef void            GLDECL CompressedTexImage2Dproc(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data);                                                                                                                 extern CompressedTexImage2Dproc*                        glCompressedTexImage2D;
typedef void            GLDECL CompressedTexImage3Dproc(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data);                                                                                                  extern CompressedTexImage3Dproc*                        glCompressedTexImage3D;
typedef void            GLDECL CompressedTexSubImage1Dproc(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);                                                                                                                                     extern CompressedTexSubImage1Dproc*                     glCompressedTexSubImage1D;
typedef void            GLDECL CompressedTexSubImage2Dproc(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);                                                                                                      extern CompressedTexSubImage2Dproc*                     glCompressedTexSubImage2D;
typedef void            GLDECL CompressedTexSubImage3Dproc(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);                                                                        extern CompressedTexSubImage3Dproc*                     glCompressedTexSubImage3D;
typedef void            GLDECL GetCompressedTexImageproc(GLenum target, GLint level, void * img);                                                                                                                                                                                                              extern GetCompressedTexImageproc*                       glGetCompressedTexImage;
typedef void            GLDECL LoadTransposeMatrixdproc(const GLdouble * m);                                                                                                                                                                                                                                   extern LoadTransposeMatrixdproc*                        glLoadTransposeMatrixd;
typedef void            GLDECL LoadTransposeMatrixfproc(const GLfloat * m);                                                                                                                                                                                                                                    extern LoadTransposeMatrixfproc*                        glLoadTransposeMatrixf;
typedef void            GLDECL MultTransposeMatrixdproc(const GLdouble * m);                                                                                                                                                                                                                                   extern MultTransposeMatrixdproc*                        glMultTransposeMatrixd;
typedef void            GLDECL MultTransposeMatrixfproc(const GLfloat * m);                                                                                                                                                                                                                                    extern MultTransposeMatrixfproc*                        glMultTransposeMatrixf;
typedef void            GLDECL MultiTexCoord1dproc(GLenum target, GLdouble s);                                                                                                                                                                                                                                 extern MultiTexCoord1dproc*                             glMultiTexCoord1d;
typedef void            GLDECL MultiTexCoord1dvproc(GLenum target, const GLdouble * v);                                                                                                                                                                                                                        extern MultiTexCoord1dvproc*                            glMultiTexCoord1dv;
typedef void            GLDECL MultiTexCoord1fproc(GLenum target, GLfloat s);                                                                                                                                                                                                                                  extern MultiTexCoord1fproc*                             glMultiTexCoord1f;
typedef void            GLDECL MultiTexCoord1fvproc(GLenum target, const GLfloat * v);                                                                                                                                                                                                                         extern MultiTexCoord1fvproc*                            glMultiTexCoord1fv;
typedef void            GLDECL MultiTexCoord1iproc(GLenum target, GLint s);                                                                                                                                                                                                                                    extern MultiTexCoord1iproc*                             glMultiTexCoord1i;
typedef void            GLDECL MultiTexCoord1ivproc(GLenum target, const GLint * v);                                                                                                                                                                                                                           extern MultiTexCoord1ivproc*                            glMultiTexCoord1iv;
typedef void            GLDECL MultiTexCoord1sproc(GLenum target, GLshort s);                                                                                                                                                                                                                                  extern MultiTexCoord1sproc*                             glMultiTexCoord1s;
typedef void            GLDECL MultiTexCoord1svproc(GLenum target, const GLshort * v);                                                                                                                                                                                                                         extern MultiTexCoord1svproc*                            glMultiTexCoord1sv;
typedef void            GLDECL MultiTexCoord2dproc(GLenum target, GLdouble s, GLdouble t);                                                                                                                                                                                                                     extern MultiTexCoord2dproc*                             glMultiTexCoord2d;
typedef void            GLDECL MultiTexCoord2dvproc(GLenum target, const GLdouble * v);                                                                                                                                                                                                                        extern MultiTexCoord2dvproc*                            glMultiTexCoord2dv;
typedef void            GLDECL MultiTexCoord2fproc(GLenum target, GLfloat s, GLfloat t);                                                                                                                                                                                                                       extern MultiTexCoord2fproc*                             glMultiTexCoord2f;
typedef void            GLDECL MultiTexCoord2fvproc(GLenum target, const GLfloat * v);                                                                                                                                                                                                                         extern MultiTexCoord2fvproc*                            glMultiTexCoord2fv;
typedef void            GLDECL MultiTexCoord2iproc(GLenum target, GLint s, GLint t);                                                                                                                                                                                                                           extern MultiTexCoord2iproc*                             glMultiTexCoord2i;
typedef void            GLDECL MultiTexCoord2ivproc(GLenum target, const GLint * v);                                                                                                                                                                                                                           extern MultiTexCoord2ivproc*                            glMultiTexCoord2iv;
typedef void            GLDECL MultiTexCoord2sproc(GLenum target, GLshort s, GLshort t);                                                                                                                                                                                                                       extern MultiTexCoord2sproc*                             glMultiTexCoord2s;
typedef void            GLDECL MultiTexCoord2svproc(GLenum target, const GLshort * v);                                                                                                                                                                                                                         extern MultiTexCoord2svproc*                            glMultiTexCoord2sv;
typedef void            GLDECL MultiTexCoord3dproc(GLenum target, GLdouble s, GLdouble t, GLdouble r);                                                                                                                                                                                                         extern MultiTexCoord3dproc*                             glMultiTexCoord3d;
typedef void            GLDECL MultiTexCoord3dvproc(GLenum target, const GLdouble * v);                                                                                                                                                                                                                        extern MultiTexCoord3dvproc*                            glMultiTexCoord3dv;
typedef void            GLDECL MultiTexCoord3fproc(GLenum target, GLfloat s, GLfloat t, GLfloat r);                                                                                                                                                                                                            extern MultiTexCoord3fproc*                             glMultiTexCoord3f;
typedef void            GLDECL MultiTexCoord3fvproc(GLenum target, const GLfloat * v);                                                                                                                                                                                                                         extern MultiTexCoord3fvproc*                            glMultiTexCoord3fv;
typedef void            GLDECL MultiTexCoord3iproc(GLenum target, GLint s, GLint t, GLint r);                                                                                                                                                                                                                  extern MultiTexCoord3iproc*                             glMultiTexCoord3i;
typedef void            GLDECL MultiTexCoord3ivproc(GLenum target, const GLint * v);                                                                                                                                                                                                                           extern MultiTexCoord3ivproc*                            glMultiTexCoord3iv;
typedef void            GLDECL MultiTexCoord3sproc(GLenum target, GLshort s, GLshort t, GLshort r);                                                                                                                                                                                                            extern MultiTexCoord3sproc*                             glMultiTexCoord3s;
typedef void            GLDECL MultiTexCoord3svproc(GLenum target, const GLshort * v);                                                                                                                                                                                                                         extern MultiTexCoord3svproc*                            glMultiTexCoord3sv;
typedef void            GLDECL MultiTexCoord4dproc(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);                                                                                                                                                                                             extern MultiTexCoord4dproc*                             glMultiTexCoord4d;
typedef void            GLDECL MultiTexCoord4dvproc(GLenum target, const GLdouble * v);                                                                                                                                                                                                                        extern MultiTexCoord4dvproc*                            glMultiTexCoord4dv;
typedef void            GLDECL MultiTexCoord4fproc(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);                                                                                                                                                                                                 extern MultiTexCoord4fproc*                             glMultiTexCoord4f;
typedef void            GLDECL MultiTexCoord4fvproc(GLenum target, const GLfloat * v);                                                                                                                                                                                                                         extern MultiTexCoord4fvproc*                            glMultiTexCoord4fv;
typedef void            GLDECL MultiTexCoord4iproc(GLenum target, GLint s, GLint t, GLint r, GLint q);                                                                                                                                                                                                         extern MultiTexCoord4iproc*                             glMultiTexCoord4i;
typedef void            GLDECL MultiTexCoord4ivproc(GLenum target, const GLint * v);                                                                                                                                                                                                                           extern MultiTexCoord4ivproc*                            glMultiTexCoord4iv;
typedef void            GLDECL MultiTexCoord4sproc(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);                                                                                                                                                                                                 extern MultiTexCoord4sproc*                             glMultiTexCoord4s;
typedef void            GLDECL MultiTexCoord4svproc(GLenum target, const GLshort * v);                                                                                                                                                                                                                         extern MultiTexCoord4svproc*                            glMultiTexCoord4sv;
typedef void            GLDECL SampleCoverageproc(GLfloat value, GLboolean invert);                                                                                                                                                                                                                            extern SampleCoverageproc*                              glSampleCoverage;
typedef void            GLDECL BlendColorproc(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);                                                                                                                                                                                                        extern BlendColorproc*                                  glBlendColor;
typedef void            GLDECL BlendEquationproc(GLenum mode);                                                                                                                                                                                                                                                 extern BlendEquationproc*                               glBlendEquation;
typedef void            GLDECL BlendFuncSeparateproc(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);                                                                                                                                                                          extern BlendFuncSeparateproc*                           glBlendFuncSeparate;
typedef void            GLDECL FogCoordPointerproc(GLenum type, GLsizei stride, const void * pointer);                                                                                                                                                                                                         extern FogCoordPointerproc*                             glFogCoordPointer;
typedef void            GLDECL FogCoorddproc(GLdouble coord);                                                                                                                                                                                                                                                  extern FogCoorddproc*                                   glFogCoordd;
typedef void            GLDECL FogCoorddvproc(const GLdouble * coord);                                                                                                                                                                                                                                         extern FogCoorddvproc*                                  glFogCoorddv;
typedef void            GLDECL FogCoordfproc(GLfloat coord);                                                                                                                                                                                                                                                   extern FogCoordfproc*                                   glFogCoordf;
typedef void            GLDECL FogCoordfvproc(const GLfloat * coord);                                                                                                                                                                                                                                          extern FogCoordfvproc*                                  glFogCoordfv;
typedef void            GLDECL MultiDrawArraysproc(GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount);                                                                                                                                                                                extern MultiDrawArraysproc*                             glMultiDrawArrays;
typedef void            GLDECL MultiDrawElementsproc(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount);                                                                                                                                                          extern MultiDrawElementsproc*                           glMultiDrawElements;
typedef void            GLDECL PointParameterfproc(GLenum pname, GLfloat param);                                                                                                                                                                                                                               extern PointParameterfproc*                             glPointParameterf;
typedef void            GLDECL PointParameterfvproc(GLenum pname, const GLfloat * params);                                                                                                                                                                                                                     extern PointParameterfvproc*                            glPointParameterfv;
typedef void            GLDECL PointParameteriproc(GLenum pname, GLint param);                                                                                                                                                                                                                                 extern PointParameteriproc*                             glPointParameteri;
typedef void            GLDECL PointParameterivproc(GLenum pname, const GLint * params);                                                                                                                                                                                                                       extern PointParameterivproc*                            glPointParameteriv;
typedef void            GLDECL SecondaryColor3bproc(GLbyte red, GLbyte green, GLbyte blue);                                                                                                                                                                                                                    extern SecondaryColor3bproc*                            glSecondaryColor3b;
typedef void            GLDECL SecondaryColor3bvproc(const GLbyte * v);                                                                                                                                                                                                                                        extern SecondaryColor3bvproc*                           glSecondaryColor3bv;
typedef void            GLDECL SecondaryColor3dproc(GLdouble red, GLdouble green, GLdouble blue);                                                                                                                                                                                                              extern SecondaryColor3dproc*                            glSecondaryColor3d;
typedef void            GLDECL SecondaryColor3dvproc(const GLdouble * v);                                                                                                                                                                                                                                      extern SecondaryColor3dvproc*                           glSecondaryColor3dv;
typedef void            GLDECL SecondaryColor3fproc(GLfloat red, GLfloat green, GLfloat blue);                                                                                                                                                                                                                 extern SecondaryColor3fproc*                            glSecondaryColor3f;
typedef void            GLDECL SecondaryColor3fvproc(const GLfloat * v);                                                                                                                                                                                                                                       extern SecondaryColor3fvproc*                           glSecondaryColor3fv;
typedef void            GLDECL SecondaryColor3iproc(GLint red, GLint green, GLint blue);                                                                                                                                                                                                                       extern SecondaryColor3iproc*                            glSecondaryColor3i;
typedef void            GLDECL SecondaryColor3ivproc(const GLint * v);                                                                                                                                                                                                                                         extern SecondaryColor3ivproc*                           glSecondaryColor3iv;
typedef void            GLDECL SecondaryColor3sproc(GLshort red, GLshort green, GLshort blue);                                                                                                                                                                                                                 extern SecondaryColor3sproc*                            glSecondaryColor3s;
typedef void            GLDECL SecondaryColor3svproc(const GLshort * v);                                                                                                                                                                                                                                       extern SecondaryColor3svproc*                           glSecondaryColor3sv;
typedef void            GLDECL SecondaryColor3ubproc(GLubyte red, GLubyte green, GLubyte blue);                                                                                                                                                                                                                extern SecondaryColor3ubproc*                           glSecondaryColor3ub;
typedef void            GLDECL SecondaryColor3ubvproc(const GLubyte * v);                                                                                                                                                                                                                                      extern SecondaryColor3ubvproc*                          glSecondaryColor3ubv;
typedef void            GLDECL SecondaryColor3uiproc(GLuint red, GLuint green, GLuint blue);                                                                                                                                                                                                                   extern SecondaryColor3uiproc*                           glSecondaryColor3ui;
typedef void            GLDECL SecondaryColor3uivproc(const GLuint * v);                                                                                                                                                                                                                                       extern SecondaryColor3uivproc*                          glSecondaryColor3uiv;
typedef void            GLDECL SecondaryColor3usproc(GLushort red, GLushort green, GLushort blue);                                                                                                                                                                                                             extern SecondaryColor3usproc*                           glSecondaryColor3us;
typedef void            GLDECL SecondaryColor3usvproc(const GLushort * v);                                                                                                                                                                                                                                     extern SecondaryColor3usvproc*                          glSecondaryColor3usv;
typedef void            GLDECL SecondaryColorPointerproc(GLint size, GLenum type, GLsizei stride, const void * pointer);                                                                                                                                                                                       extern SecondaryColorPointerproc*                       glSecondaryColorPointer;
typedef void            GLDECL WindowPos2dproc(GLdouble x, GLdouble y);                                                                                                                                                                                                                                        extern WindowPos2dproc*                                 glWindowPos2d;
typedef void            GLDECL WindowPos2dvproc(const GLdouble * v);                                                                                                                                                                                                                                           extern WindowPos2dvproc*                                glWindowPos2dv;
typedef void            GLDECL WindowPos2fproc(GLfloat x, GLfloat y);                                                                                                                                                                                                                                          extern WindowPos2fproc*                                 glWindowPos2f;
typedef void            GLDECL WindowPos2fvproc(const GLfloat * v);                                                                                                                                                                                                                                            extern WindowPos2fvproc*                                glWindowPos2fv;
typedef void            GLDECL WindowPos2iproc(GLint x, GLint y);                                                                                                                                                                                                                                              extern WindowPos2iproc*                                 glWindowPos2i;
typedef void            GLDECL WindowPos2ivproc(const GLint * v);                                                                                                                                                                                                                                              extern WindowPos2ivproc*                                glWindowPos2iv;
typedef void            GLDECL WindowPos2sproc(GLshort x, GLshort y);                                                                                                                                                                                                                                          extern WindowPos2sproc*                                 glWindowPos2s;
typedef void            GLDECL WindowPos2svproc(const GLshort * v);                                                                                                                                                                                                                                            extern WindowPos2svproc*                                glWindowPos2sv;
typedef void            GLDECL WindowPos3dproc(GLdouble x, GLdouble y, GLdouble z);                                                                                                                                                                                                                            extern WindowPos3dproc*                                 glWindowPos3d;
typedef void            GLDECL WindowPos3dvproc(const GLdouble * v);                                                                                                                                                                                                                                           extern WindowPos3dvproc*                                glWindowPos3dv;
typedef void            GLDECL WindowPos3fproc(GLfloat x, GLfloat y, GLfloat z);                                                                                                                                                                                                                               extern WindowPos3fproc*                                 glWindowPos3f;
typedef void            GLDECL WindowPos3fvproc(const GLfloat * v);                                                                                                                                                                                                                                            extern WindowPos3fvproc*                                glWindowPos3fv;
typedef void            GLDECL WindowPos3iproc(GLint x, GLint y, GLint z);                                                                                                                                                                                                                                     extern WindowPos3iproc*                                 glWindowPos3i;
typedef void            GLDECL WindowPos3ivproc(const GLint * v);                                                                                                                                                                                                                                              extern WindowPos3ivproc*                                glWindowPos3iv;
typedef void            GLDECL WindowPos3sproc(GLshort x, GLshort y, GLshort z);                                                                                                                                                                                                                               extern WindowPos3sproc*                                 glWindowPos3s;
typedef void            GLDECL WindowPos3svproc(const GLshort * v);                                                                                                                                                                                                                                            extern WindowPos3svproc*                                glWindowPos3sv;
typedef void            GLDECL BeginQueryproc(GLenum target, GLuint id);                                                                                                                                                                                                                                       extern BeginQueryproc*                                  glBeginQuery;
typedef void            GLDECL BindBufferproc(GLenum target, GLuint buffer);                                                                                                                                                                                                                                   extern BindBufferproc*                                  glBindBuffer;
typedef void            GLDECL BufferDataproc(GLenum target, GLsizeiptr size, const void * data, GLenum usage);                                                                                                                                                                                                extern BufferDataproc*                                  glBufferData;
typedef void            GLDECL BufferSubDataproc(GLenum target, GLintptr offset, GLsizeiptr size, const void * data);                                                                                                                                                                                          extern BufferSubDataproc*                               glBufferSubData;
typedef void            GLDECL DeleteBuffersproc(GLsizei n, const GLuint * buffers);                                                                                                                                                                                                                           extern DeleteBuffersproc*                               glDeleteBuffers;
typedef void            GLDECL DeleteQueriesproc(GLsizei n, const GLuint * ids);                                                                                                                                                                                                                               extern DeleteQueriesproc*                               glDeleteQueries;
typedef void            GLDECL EndQueryproc(GLenum target);                                                                                                                                                                                                                                                    extern EndQueryproc*                                    glEndQuery;
typedef void            GLDECL GenBuffersproc(GLsizei n, GLuint * buffers);                                                                                                                                                                                                                                    extern GenBuffersproc*                                  glGenBuffers;
typedef void            GLDECL GenQueriesproc(GLsizei n, GLuint * ids);                                                                                                                                                                                                                                        extern GenQueriesproc*                                  glGenQueries;
typedef void            GLDECL GetBufferParameterivproc(GLenum target, GLenum pname, GLint * params);                                                                                                                                                                                                          extern GetBufferParameterivproc*                        glGetBufferParameteriv;
typedef void            GLDECL GetBufferPointervproc(GLenum target, GLenum pname, void ** params);                                                                                                                                                                                                             extern GetBufferPointervproc*                           glGetBufferPointerv;
typedef void            GLDECL GetBufferSubDataproc(GLenum target, GLintptr offset, GLsizeiptr size, void * data);                                                                                                                                                                                             extern GetBufferSubDataproc*                            glGetBufferSubData;
typedef void            GLDECL GetQueryObjectivproc(GLuint id, GLenum pname, GLint * params);                                                                                                                                                                                                                  extern GetQueryObjectivproc*                            glGetQueryObjectiv;
typedef void            GLDECL GetQueryObjectuivproc(GLuint id, GLenum pname, GLuint * params);                                                                                                                                                                                                                extern GetQueryObjectuivproc*                           glGetQueryObjectuiv;
typedef void            GLDECL GetQueryivproc(GLenum target, GLenum pname, GLint * params);                                                                                                                                                                                                                    extern GetQueryivproc*                                  glGetQueryiv;
typedef GLboolean       GLDECL IsBufferproc(GLuint buffer);                                                                                                                                                                                                                                                    extern IsBufferproc*                                    glIsBuffer;
typedef GLboolean       GLDECL IsQueryproc(GLuint id);                                                                                                                                                                                                                                                         extern IsQueryproc*                                     glIsQuery;
typedef void *          GLDECL MapBufferproc(GLenum target, GLenum access);                                                                                                                                                                                                                                    extern MapBufferproc*                                   glMapBuffer;
typedef GLboolean       GLDECL UnmapBufferproc(GLenum target);                                                                                                                                                                                                                                                 extern UnmapBufferproc*                                 glUnmapBuffer;
typedef void            GLDECL AttachShaderproc(GLuint program, GLuint shader);                                                                                                                                                                                                                                extern AttachShaderproc*                                glAttachShader;
typedef void            GLDECL BindAttribLocationproc(GLuint program, GLuint index, const GLchar * name);                                                                                                                                                                                                      extern BindAttribLocationproc*                          glBindAttribLocation;
typedef void            GLDECL BlendEquationSeparateproc(GLenum modeRGB, GLenum modeAlpha);                                                                                                                                                                                                                    extern BlendEquationSeparateproc*                       glBlendEquationSeparate;
typedef void            GLDECL CompileShaderproc(GLuint shader);                                                                                                                                                                                                                                               extern CompileShaderproc*                               glCompileShader;
typedef GLuint          GLDECL CreateProgramproc(void);                                                                                                                                                                                                                                                        extern CreateProgramproc*                               glCreateProgram;
typedef GLuint          GLDECL CreateShaderproc(GLenum type);                                                                                                                                                                                                                                                  extern CreateShaderproc*                                glCreateShader;
typedef void            GLDECL DeleteProgramproc(GLuint program);                                                                                                                                                                                                                                              extern DeleteProgramproc*                               glDeleteProgram;
typedef void            GLDECL DeleteShaderproc(GLuint shader);                                                                                                                                                                                                                                                extern DeleteShaderproc*                                glDeleteShader;
typedef void            GLDECL DetachShaderproc(GLuint program, GLuint shader);                                                                                                                                                                                                                                extern DetachShaderproc*                                glDetachShader;
typedef void            GLDECL DisableVertexAttribArrayproc(GLuint index);                                                                                                                                                                                                                                     extern DisableVertexAttribArrayproc*                    glDisableVertexAttribArray;
typedef void            GLDECL DrawBuffersproc(GLsizei n, const GLenum * bufs);                                                                                                                                                                                                                                extern DrawBuffersproc*                                 glDrawBuffers;
typedef void            GLDECL EnableVertexAttribArrayproc(GLuint index);                                                                                                                                                                                                                                      extern EnableVertexAttribArrayproc*                     glEnableVertexAttribArray;
typedef void            GLDECL GetActiveAttribproc(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);                                                                                                                                               extern GetActiveAttribproc*                             glGetActiveAttrib;
typedef void            GLDECL GetActiveUniformproc(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);                                                                                                                                              extern GetActiveUniformproc*                            glGetActiveUniform;
typedef void            GLDECL GetAttachedShadersproc(GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders);                                                                                                                                                                                    extern GetAttachedShadersproc*                          glGetAttachedShaders;
typedef GLint           GLDECL GetAttribLocationproc(GLuint program, const GLchar * name);                                                                                                                                                                                                                     extern GetAttribLocationproc*                           glGetAttribLocation;
typedef void            GLDECL GetProgramInfoLogproc(GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog);                                                                                                                                                                                     extern GetProgramInfoLogproc*                           glGetProgramInfoLog;
typedef void            GLDECL GetProgramivproc(GLuint program, GLenum pname, GLint * params);                                                                                                                                                                                                                 extern GetProgramivproc*                                glGetProgramiv;
typedef void            GLDECL GetShaderInfoLogproc(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog);                                                                                                                                                                                       extern GetShaderInfoLogproc*                            glGetShaderInfoLog;
typedef void            GLDECL GetShaderSourceproc(GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source);                                                                                                                                                                                         extern GetShaderSourceproc*                             glGetShaderSource;
typedef void            GLDECL GetShaderivproc(GLuint shader, GLenum pname, GLint * params);                                                                                                                                                                                                                   extern GetShaderivproc*                                 glGetShaderiv;
typedef GLint           GLDECL GetUniformLocationproc(GLuint program, const GLchar * name);                                                                                                                                                                                                                    extern GetUniformLocationproc*                          glGetUniformLocation;
typedef void            GLDECL GetUniformfvproc(GLuint program, GLint location, GLfloat * params);                                                                                                                                                                                                             extern GetUniformfvproc*                                glGetUniformfv;
typedef void            GLDECL GetUniformivproc(GLuint program, GLint location, GLint * params);                                                                                                                                                                                                               extern GetUniformivproc*                                glGetUniformiv;
typedef void            GLDECL GetVertexAttribPointervproc(GLuint index, GLenum pname, void ** pointer);                                                                                                                                                                                                       extern GetVertexAttribPointervproc*                     glGetVertexAttribPointerv;
typedef void            GLDECL GetVertexAttribdvproc(GLuint index, GLenum pname, GLdouble * params);                                                                                                                                                                                                           extern GetVertexAttribdvproc*                           glGetVertexAttribdv;
typedef void            GLDECL GetVertexAttribfvproc(GLuint index, GLenum pname, GLfloat * params);                                                                                                                                                                                                            extern GetVertexAttribfvproc*                           glGetVertexAttribfv;
typedef void            GLDECL GetVertexAttribivproc(GLuint index, GLenum pname, GLint * params);                                                                                                                                                                                                              extern GetVertexAttribivproc*                           glGetVertexAttribiv;
typedef GLboolean       GLDECL IsProgramproc(GLuint program);                                                                                                                                                                                                                                                  extern IsProgramproc*                                   glIsProgram;
typedef GLboolean       GLDECL IsShaderproc(GLuint shader);                                                                                                                                                                                                                                                    extern IsShaderproc*                                    glIsShader;
typedef void            GLDECL LinkProgramproc(GLuint program);                                                                                                                                                                                                                                                extern LinkProgramproc*                                 glLinkProgram;
typedef void            GLDECL ShaderSourceproc(GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length);                                                                                                                                                                              extern ShaderSourceproc*                                glShaderSource;
typedef void            GLDECL StencilFuncSeparateproc(GLenum face, GLenum func, GLint ref, GLuint mask);                                                                                                                                                                                                      extern StencilFuncSeparateproc*                         glStencilFuncSeparate;
typedef void            GLDECL StencilMaskSeparateproc(GLenum face, GLuint mask);                                                                                                                                                                                                                              extern StencilMaskSeparateproc*                         glStencilMaskSeparate;
typedef void            GLDECL StencilOpSeparateproc(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);                                                                                                                                                                                                 extern StencilOpSeparateproc*                           glStencilOpSeparate;
typedef void            GLDECL Uniform1fproc(GLint location, GLfloat v0);                                                                                                                                                                                                                                      extern Uniform1fproc*                                   glUniform1f;
typedef void            GLDECL Uniform1fvproc(GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                                           extern Uniform1fvproc*                                  glUniform1fv;
typedef void            GLDECL Uniform1iproc(GLint location, GLint v0);                                                                                                                                                                                                                                        extern Uniform1iproc*                                   glUniform1i;
typedef void            GLDECL Uniform1ivproc(GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                                             extern Uniform1ivproc*                                  glUniform1iv;
typedef void            GLDECL Uniform2fproc(GLint location, GLfloat v0, GLfloat v1);                                                                                                                                                                                                                          extern Uniform2fproc*                                   glUniform2f;
typedef void            GLDECL Uniform2fvproc(GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                                           extern Uniform2fvproc*                                  glUniform2fv;
typedef void            GLDECL Uniform2iproc(GLint location, GLint v0, GLint v1);                                                                                                                                                                                                                              extern Uniform2iproc*                                   glUniform2i;
typedef void            GLDECL Uniform2ivproc(GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                                             extern Uniform2ivproc*                                  glUniform2iv;
typedef void            GLDECL Uniform3fproc(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);                                                                                                                                                                                                              extern Uniform3fproc*                                   glUniform3f;
typedef void            GLDECL Uniform3fvproc(GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                                           extern Uniform3fvproc*                                  glUniform3fv;
typedef void            GLDECL Uniform3iproc(GLint location, GLint v0, GLint v1, GLint v2);                                                                                                                                                                                                                    extern Uniform3iproc*                                   glUniform3i;
typedef void            GLDECL Uniform3ivproc(GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                                             extern Uniform3ivproc*                                  glUniform3iv;
typedef void            GLDECL Uniform4fproc(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);                                                                                                                                                                                                  extern Uniform4fproc*                                   glUniform4f;
typedef void            GLDECL Uniform4fvproc(GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                                           extern Uniform4fvproc*                                  glUniform4fv;
typedef void            GLDECL Uniform4iproc(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);                                                                                                                                                                                                          extern Uniform4iproc*                                   glUniform4i;
typedef void            GLDECL Uniform4ivproc(GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                                             extern Uniform4ivproc*                                  glUniform4iv;
typedef void            GLDECL UniformMatrix2fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                                extern UniformMatrix2fvproc*                            glUniformMatrix2fv;
typedef void            GLDECL UniformMatrix3fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                                extern UniformMatrix3fvproc*                            glUniformMatrix3fv;
typedef void            GLDECL UniformMatrix4fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                                extern UniformMatrix4fvproc*                            glUniformMatrix4fv;
typedef void            GLDECL UseProgramproc(GLuint program);                                                                                                                                                                                                                                                 extern UseProgramproc*                                  glUseProgram;
typedef void            GLDECL ValidateProgramproc(GLuint program);                                                                                                                                                                                                                                            extern ValidateProgramproc*                             glValidateProgram;
typedef void            GLDECL VertexAttrib1dproc(GLuint index, GLdouble x);                                                                                                                                                                                                                                   extern VertexAttrib1dproc*                              glVertexAttrib1d;
typedef void            GLDECL VertexAttrib1dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                          extern VertexAttrib1dvproc*                             glVertexAttrib1dv;
typedef void            GLDECL VertexAttrib1fproc(GLuint index, GLfloat x);                                                                                                                                                                                                                                    extern VertexAttrib1fproc*                              glVertexAttrib1f;
typedef void            GLDECL VertexAttrib1fvproc(GLuint index, const GLfloat * v);                                                                                                                                                                                                                           extern VertexAttrib1fvproc*                             glVertexAttrib1fv;
typedef void            GLDECL VertexAttrib1sproc(GLuint index, GLshort x);                                                                                                                                                                                                                                    extern VertexAttrib1sproc*                              glVertexAttrib1s;
typedef void            GLDECL VertexAttrib1svproc(GLuint index, const GLshort * v);                                                                                                                                                                                                                           extern VertexAttrib1svproc*                             glVertexAttrib1sv;
typedef void            GLDECL VertexAttrib2dproc(GLuint index, GLdouble x, GLdouble y);                                                                                                                                                                                                                       extern VertexAttrib2dproc*                              glVertexAttrib2d;
typedef void            GLDECL VertexAttrib2dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                          extern VertexAttrib2dvproc*                             glVertexAttrib2dv;
typedef void            GLDECL VertexAttrib2fproc(GLuint index, GLfloat x, GLfloat y);                                                                                                                                                                                                                         extern VertexAttrib2fproc*                              glVertexAttrib2f;
typedef void            GLDECL VertexAttrib2fvproc(GLuint index, const GLfloat * v);                                                                                                                                                                                                                           extern VertexAttrib2fvproc*                             glVertexAttrib2fv;
typedef void            GLDECL VertexAttrib2sproc(GLuint index, GLshort x, GLshort y);                                                                                                                                                                                                                         extern VertexAttrib2sproc*                              glVertexAttrib2s;
typedef void            GLDECL VertexAttrib2svproc(GLuint index, const GLshort * v);                                                                                                                                                                                                                           extern VertexAttrib2svproc*                             glVertexAttrib2sv;
typedef void            GLDECL VertexAttrib3dproc(GLuint index, GLdouble x, GLdouble y, GLdouble z);                                                                                                                                                                                                           extern VertexAttrib3dproc*                              glVertexAttrib3d;
typedef void            GLDECL VertexAttrib3dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                          extern VertexAttrib3dvproc*                             glVertexAttrib3dv;
typedef void            GLDECL VertexAttrib3fproc(GLuint index, GLfloat x, GLfloat y, GLfloat z);                                                                                                                                                                                                              extern VertexAttrib3fproc*                              glVertexAttrib3f;
typedef void            GLDECL VertexAttrib3fvproc(GLuint index, const GLfloat * v);                                                                                                                                                                                                                           extern VertexAttrib3fvproc*                             glVertexAttrib3fv;
typedef void            GLDECL VertexAttrib3sproc(GLuint index, GLshort x, GLshort y, GLshort z);                                                                                                                                                                                                              extern VertexAttrib3sproc*                              glVertexAttrib3s;
typedef void            GLDECL VertexAttrib3svproc(GLuint index, const GLshort * v);                                                                                                                                                                                                                           extern VertexAttrib3svproc*                             glVertexAttrib3sv;
typedef void            GLDECL VertexAttrib4Nbvproc(GLuint index, const GLbyte * v);                                                                                                                                                                                                                           extern VertexAttrib4Nbvproc*                            glVertexAttrib4Nbv;
typedef void            GLDECL VertexAttrib4Nivproc(GLuint index, const GLint * v);                                                                                                                                                                                                                            extern VertexAttrib4Nivproc*                            glVertexAttrib4Niv;
typedef void            GLDECL VertexAttrib4Nsvproc(GLuint index, const GLshort * v);                                                                                                                                                                                                                          extern VertexAttrib4Nsvproc*                            glVertexAttrib4Nsv;
typedef void            GLDECL VertexAttrib4Nubproc(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);                                                                                                                                                                                                 extern VertexAttrib4Nubproc*                            glVertexAttrib4Nub;
typedef void            GLDECL VertexAttrib4Nubvproc(GLuint index, const GLubyte * v);                                                                                                                                                                                                                         extern VertexAttrib4Nubvproc*                           glVertexAttrib4Nubv;
typedef void            GLDECL VertexAttrib4Nuivproc(GLuint index, const GLuint * v);                                                                                                                                                                                                                          extern VertexAttrib4Nuivproc*                           glVertexAttrib4Nuiv;
typedef void            GLDECL VertexAttrib4Nusvproc(GLuint index, const GLushort * v);                                                                                                                                                                                                                        extern VertexAttrib4Nusvproc*                           glVertexAttrib4Nusv;
typedef void            GLDECL VertexAttrib4bvproc(GLuint index, const GLbyte * v);                                                                                                                                                                                                                            extern VertexAttrib4bvproc*                             glVertexAttrib4bv;
typedef void            GLDECL VertexAttrib4dproc(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);                                                                                                                                                                                               extern VertexAttrib4dproc*                              glVertexAttrib4d;
typedef void            GLDECL VertexAttrib4dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                          extern VertexAttrib4dvproc*                             glVertexAttrib4dv;
typedef void            GLDECL VertexAttrib4fproc(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);                                                                                                                                                                                                   extern VertexAttrib4fproc*                              glVertexAttrib4f;
typedef void            GLDECL VertexAttrib4fvproc(GLuint index, const GLfloat * v);                                                                                                                                                                                                                           extern VertexAttrib4fvproc*                             glVertexAttrib4fv;
typedef void            GLDECL VertexAttrib4ivproc(GLuint index, const GLint * v);                                                                                                                                                                                                                             extern VertexAttrib4ivproc*                             glVertexAttrib4iv;
typedef void            GLDECL VertexAttrib4sproc(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);                                                                                                                                                                                                   extern VertexAttrib4sproc*                              glVertexAttrib4s;
typedef void            GLDECL VertexAttrib4svproc(GLuint index, const GLshort * v);                                                                                                                                                                                                                           extern VertexAttrib4svproc*                             glVertexAttrib4sv;
typedef void            GLDECL VertexAttrib4ubvproc(GLuint index, const GLubyte * v);                                                                                                                                                                                                                          extern VertexAttrib4ubvproc*                            glVertexAttrib4ubv;
typedef void            GLDECL VertexAttrib4uivproc(GLuint index, const GLuint * v);                                                                                                                                                                                                                           extern VertexAttrib4uivproc*                            glVertexAttrib4uiv;
typedef void            GLDECL VertexAttrib4usvproc(GLuint index, const GLushort * v);                                                                                                                                                                                                                         extern VertexAttrib4usvproc*                            glVertexAttrib4usv;
typedef void            GLDECL VertexAttribPointerproc(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer);                                                                                                                                                     extern VertexAttribPointerproc*                         glVertexAttribPointer;
typedef void            GLDECL UniformMatrix2x3fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                              extern UniformMatrix2x3fvproc*                          glUniformMatrix2x3fv;
typedef void            GLDECL UniformMatrix2x4fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                              extern UniformMatrix2x4fvproc*                          glUniformMatrix2x4fv;
typedef void            GLDECL UniformMatrix3x2fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                              extern UniformMatrix3x2fvproc*                          glUniformMatrix3x2fv;
typedef void            GLDECL UniformMatrix3x4fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                              extern UniformMatrix3x4fvproc*                          glUniformMatrix3x4fv;
typedef void            GLDECL UniformMatrix4x2fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                              extern UniformMatrix4x2fvproc*                          glUniformMatrix4x2fv;
typedef void            GLDECL UniformMatrix4x3fvproc(GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                                              extern UniformMatrix4x3fvproc*                          glUniformMatrix4x3fv;
typedef void            GLDECL BeginConditionalRenderproc(GLuint id, GLenum mode);                                                                                                                                                                                                                             extern BeginConditionalRenderproc*                      glBeginConditionalRender;
typedef void            GLDECL BeginTransformFeedbackproc(GLenum primitiveMode);                                                                                                                                                                                                                               extern BeginTransformFeedbackproc*                      glBeginTransformFeedback;
typedef void            GLDECL BindBufferBaseproc(GLenum target, GLuint index, GLuint buffer);                                                                                                                                                                                                                 extern BindBufferBaseproc*                              glBindBufferBase;
typedef void            GLDECL BindBufferRangeproc(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);                                                                                                                                                                              extern BindBufferRangeproc*                             glBindBufferRange;
typedef void            GLDECL BindFragDataLocationproc(GLuint program, GLuint color, const GLchar * name);                                                                                                                                                                                                    extern BindFragDataLocationproc*                        glBindFragDataLocation;
typedef void            GLDECL BindFramebufferproc(GLenum target, GLuint framebuffer);                                                                                                                                                                                                                         extern BindFramebufferproc*                             glBindFramebuffer;
typedef void            GLDECL BindRenderbufferproc(GLenum target, GLuint renderbuffer);                                                                                                                                                                                                                       extern BindRenderbufferproc*                            glBindRenderbuffer;
typedef void            GLDECL BindVertexArrayproc(GLuint ren_array);                                                                                                                                                                                                                                          extern BindVertexArrayproc*                             glBindVertexArray;
typedef void            GLDECL BlitFramebufferproc(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);                                                                                                                    extern BlitFramebufferproc*                             glBlitFramebuffer;
typedef GLenum          GLDECL CheckFramebufferStatusproc(GLenum target);                                                                                                                                                                                                                                      extern CheckFramebufferStatusproc*                      glCheckFramebufferStatus;
typedef void            GLDECL ClampColorproc(GLenum target, GLenum clamp);                                                                                                                                                                                                                                    extern ClampColorproc*                                  glClampColor;
typedef void            GLDECL ClearBufferfiproc(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);                                                                                                                                                                                               extern ClearBufferfiproc*                               glClearBufferfi;
typedef void            GLDECL ClearBufferfvproc(GLenum buffer, GLint drawbuffer, const GLfloat * value);                                                                                                                                                                                                      extern ClearBufferfvproc*                               glClearBufferfv;
typedef void            GLDECL ClearBufferivproc(GLenum buffer, GLint drawbuffer, const GLint * value);                                                                                                                                                                                                        extern ClearBufferivproc*                               glClearBufferiv;
typedef void            GLDECL ClearBufferuivproc(GLenum buffer, GLint drawbuffer, const GLuint * value);                                                                                                                                                                                                      extern ClearBufferuivproc*                              glClearBufferuiv;
typedef void            GLDECL ColorMaskiproc(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);                                                                                                                                                                                               extern ColorMaskiproc*                                  glColorMaski;
typedef void            GLDECL DeleteFramebuffersproc(GLsizei n, const GLuint * framebuffers);                                                                                                                                                                                                                 extern DeleteFramebuffersproc*                          glDeleteFramebuffers;
typedef void            GLDECL DeleteRenderbuffersproc(GLsizei n, const GLuint * renderbuffers);                                                                                                                                                                                                               extern DeleteRenderbuffersproc*                         glDeleteRenderbuffers;
typedef void            GLDECL DeleteVertexArraysproc(GLsizei n, const GLuint * arrays);                                                                                                                                                                                                                       extern DeleteVertexArraysproc*                          glDeleteVertexArrays;
typedef void            GLDECL Disableiproc(GLenum target, GLuint index);                                                                                                                                                                                                                                      extern Disableiproc*                                    glDisablei;
typedef void            GLDECL Enableiproc(GLenum target, GLuint index);                                                                                                                                                                                                                                       extern Enableiproc*                                     glEnablei;
typedef void            GLDECL EndConditionalRenderproc(void);                                                                                                                                                                                                                                                 extern EndConditionalRenderproc*                        glEndConditionalRender;
typedef void            GLDECL EndTransformFeedbackproc(void);                                                                                                                                                                                                                                                 extern EndTransformFeedbackproc*                        glEndTransformFeedback;
typedef void            GLDECL FlushMappedBufferRangeproc(GLenum target, GLintptr offset, GLsizeiptr length);                                                                                                                                                                                                  extern FlushMappedBufferRangeproc*                      glFlushMappedBufferRange;
typedef void            GLDECL FramebufferRenderbufferproc(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);                                                                                                                                                                  extern FramebufferRenderbufferproc*                     glFramebufferRenderbuffer;
typedef void            GLDECL FramebufferTexture1Dproc(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);                                                                                                                                                                      extern FramebufferTexture1Dproc*                        glFramebufferTexture1D;
typedef void            GLDECL FramebufferTexture2Dproc(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);                                                                                                                                                                      extern FramebufferTexture2Dproc*                        glFramebufferTexture2D;
typedef void            GLDECL FramebufferTexture3Dproc(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);                                                                                                                                                       extern FramebufferTexture3Dproc*                        glFramebufferTexture3D;
typedef void            GLDECL FramebufferTextureLayerproc(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);                                                                                                                                                                        extern FramebufferTextureLayerproc*                     glFramebufferTextureLayer;
typedef void            GLDECL GenFramebuffersproc(GLsizei n, GLuint * framebuffers);                                                                                                                                                                                                                          extern GenFramebuffersproc*                             glGenFramebuffers;
typedef void            GLDECL GenRenderbuffersproc(GLsizei n, GLuint * renderbuffers);                                                                                                                                                                                                                        extern GenRenderbuffersproc*                            glGenRenderbuffers;
typedef void            GLDECL GenVertexArraysproc(GLsizei n, GLuint * arrays);                                                                                                                                                                                                                                extern GenVertexArraysproc*                             glGenVertexArrays;
typedef void            GLDECL GenerateMipmapproc(GLenum target);                                                                                                                                                                                                                                              extern GenerateMipmapproc*                              glGenerateMipmap;
typedef void            GLDECL GetBooleani_vproc(GLenum target, GLuint index, GLboolean * data);                                                                                                                                                                                                               extern GetBooleani_vproc*                               glGetBooleani_v;
typedef GLint           GLDECL GetFragDataLocationproc(GLuint program, const GLchar * name);                                                                                                                                                                                                                   extern GetFragDataLocationproc*                         glGetFragDataLocation;
typedef void            GLDECL GetFramebufferAttachmentParameterivproc(GLenum target, GLenum attachment, GLenum pname, GLint * params);                                                                                                                                                                        extern GetFramebufferAttachmentParameterivproc*         glGetFramebufferAttachmentParameteriv;
typedef void            GLDECL GetIntegeri_vproc(GLenum target, GLuint index, GLint * data);                                                                                                                                                                                                                   extern GetIntegeri_vproc*                               glGetIntegeri_v;
typedef void            GLDECL GetRenderbufferParameterivproc(GLenum target, GLenum pname, GLint * params);                                                                                                                                                                                                    extern GetRenderbufferParameterivproc*                  glGetRenderbufferParameteriv;
typedef const GLubyte * GLDECL GetStringiproc(GLenum name, GLuint index);                                                                                                                                                                                                                                      extern GetStringiproc*                                  glGetStringi;
typedef void            GLDECL GetTexParameterIivproc(GLenum target, GLenum pname, GLint * params);                                                                                                                                                                                                            extern GetTexParameterIivproc*                          glGetTexParameterIiv;
typedef void            GLDECL GetTexParameterIuivproc(GLenum target, GLenum pname, GLuint * params);                                                                                                                                                                                                          extern GetTexParameterIuivproc*                         glGetTexParameterIuiv;
typedef void            GLDECL GetTransformFeedbackVaryingproc(GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);                                                                                                                                 extern GetTransformFeedbackVaryingproc*                 glGetTransformFeedbackVarying;
typedef void            GLDECL GetUniformuivproc(GLuint program, GLint location, GLuint * params);                                                                                                                                                                                                             extern GetUniformuivproc*                               glGetUniformuiv;
typedef void            GLDECL GetVertexAttribIivproc(GLuint index, GLenum pname, GLint * params);                                                                                                                                                                                                             extern GetVertexAttribIivproc*                          glGetVertexAttribIiv;
typedef void            GLDECL GetVertexAttribIuivproc(GLuint index, GLenum pname, GLuint * params);                                                                                                                                                                                                           extern GetVertexAttribIuivproc*                         glGetVertexAttribIuiv;
typedef GLboolean       GLDECL IsEnablediproc(GLenum target, GLuint index);                                                                                                                                                                                                                                    extern IsEnablediproc*                                  glIsEnabledi;
typedef GLboolean       GLDECL IsFramebufferproc(GLuint framebuffer);                                                                                                                                                                                                                                          extern IsFramebufferproc*                               glIsFramebuffer;
typedef GLboolean       GLDECL IsRenderbufferproc(GLuint renderbuffer);                                                                                                                                                                                                                                        extern IsRenderbufferproc*                              glIsRenderbuffer;
typedef GLboolean       GLDECL IsVertexArrayproc(GLuint ren_array);                                                                                                                                                                                                                                            extern IsVertexArrayproc*                               glIsVertexArray;
typedef void *          GLDECL MapBufferRangeproc(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);                                                                                                                                                                                       extern MapBufferRangeproc*                              glMapBufferRange;
typedef void            GLDECL RenderbufferStorageproc(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);                                                                                                                                                                                   extern RenderbufferStorageproc*                         glRenderbufferStorage;
typedef void            GLDECL RenderbufferStorageMultisampleproc(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);                                                                                                                                                       extern RenderbufferStorageMultisampleproc*              glRenderbufferStorageMultisample;
typedef void            GLDECL TexParameterIivproc(GLenum target, GLenum pname, const GLint * params);                                                                                                                                                                                                         extern TexParameterIivproc*                             glTexParameterIiv;
typedef void            GLDECL TexParameterIuivproc(GLenum target, GLenum pname, const GLuint * params);                                                                                                                                                                                                       extern TexParameterIuivproc*                            glTexParameterIuiv;
typedef void            GLDECL TransformFeedbackVaryingsproc(GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode);                                                                                                                                                                 extern TransformFeedbackVaryingsproc*                   glTransformFeedbackVaryings;
typedef void            GLDECL Uniform1uiproc(GLint location, GLuint v0);                                                                                                                                                                                                                                      extern Uniform1uiproc*                                  glUniform1ui;
typedef void            GLDECL Uniform1uivproc(GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                                           extern Uniform1uivproc*                                 glUniform1uiv;
typedef void            GLDECL Uniform2uiproc(GLint location, GLuint v0, GLuint v1);                                                                                                                                                                                                                           extern Uniform2uiproc*                                  glUniform2ui;
typedef void            GLDECL Uniform2uivproc(GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                                           extern Uniform2uivproc*                                 glUniform2uiv;
typedef void            GLDECL Uniform3uiproc(GLint location, GLuint v0, GLuint v1, GLuint v2);                                                                                                                                                                                                                extern Uniform3uiproc*                                  glUniform3ui;
typedef void            GLDECL Uniform3uivproc(GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                                           extern Uniform3uivproc*                                 glUniform3uiv;
typedef void            GLDECL Uniform4uiproc(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);                                                                                                                                                                                                     extern Uniform4uiproc*                                  glUniform4ui;
typedef void            GLDECL Uniform4uivproc(GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                                           extern Uniform4uivproc*                                 glUniform4uiv;
typedef void            GLDECL VertexAttribI1iproc(GLuint index, GLint x);                                                                                                                                                                                                                                     extern VertexAttribI1iproc*                             glVertexAttribI1i;
typedef void            GLDECL VertexAttribI1ivproc(GLuint index, const GLint * v);                                                                                                                                                                                                                            extern VertexAttribI1ivproc*                            glVertexAttribI1iv;
typedef void            GLDECL VertexAttribI1uiproc(GLuint index, GLuint x);                                                                                                                                                                                                                                   extern VertexAttribI1uiproc*                            glVertexAttribI1ui;
typedef void            GLDECL VertexAttribI1uivproc(GLuint index, const GLuint * v);                                                                                                                                                                                                                          extern VertexAttribI1uivproc*                           glVertexAttribI1uiv;
typedef void            GLDECL VertexAttribI2iproc(GLuint index, GLint x, GLint y);                                                                                                                                                                                                                            extern VertexAttribI2iproc*                             glVertexAttribI2i;
typedef void            GLDECL VertexAttribI2ivproc(GLuint index, const GLint * v);                                                                                                                                                                                                                            extern VertexAttribI2ivproc*                            glVertexAttribI2iv;
typedef void            GLDECL VertexAttribI2uiproc(GLuint index, GLuint x, GLuint y);                                                                                                                                                                                                                         extern VertexAttribI2uiproc*                            glVertexAttribI2ui;
typedef void            GLDECL VertexAttribI2uivproc(GLuint index, const GLuint * v);                                                                                                                                                                                                                          extern VertexAttribI2uivproc*                           glVertexAttribI2uiv;
typedef void            GLDECL VertexAttribI3iproc(GLuint index, GLint x, GLint y, GLint z);                                                                                                                                                                                                                   extern VertexAttribI3iproc*                             glVertexAttribI3i;
typedef void            GLDECL VertexAttribI3ivproc(GLuint index, const GLint * v);                                                                                                                                                                                                                            extern VertexAttribI3ivproc*                            glVertexAttribI3iv;
typedef void            GLDECL VertexAttribI3uiproc(GLuint index, GLuint x, GLuint y, GLuint z);                                                                                                                                                                                                               extern VertexAttribI3uiproc*                            glVertexAttribI3ui;
typedef void            GLDECL VertexAttribI3uivproc(GLuint index, const GLuint * v);                                                                                                                                                                                                                          extern VertexAttribI3uivproc*                           glVertexAttribI3uiv;
typedef void            GLDECL VertexAttribI4bvproc(GLuint index, const GLbyte * v);                                                                                                                                                                                                                           extern VertexAttribI4bvproc*                            glVertexAttribI4bv;
typedef void            GLDECL VertexAttribI4iproc(GLuint index, GLint x, GLint y, GLint z, GLint w);                                                                                                                                                                                                          extern VertexAttribI4iproc*                             glVertexAttribI4i;
typedef void            GLDECL VertexAttribI4ivproc(GLuint index, const GLint * v);                                                                                                                                                                                                                            extern VertexAttribI4ivproc*                            glVertexAttribI4iv;
typedef void            GLDECL VertexAttribI4svproc(GLuint index, const GLshort * v);                                                                                                                                                                                                                          extern VertexAttribI4svproc*                            glVertexAttribI4sv;
typedef void            GLDECL VertexAttribI4ubvproc(GLuint index, const GLubyte * v);                                                                                                                                                                                                                         extern VertexAttribI4ubvproc*                           glVertexAttribI4ubv;
typedef void            GLDECL VertexAttribI4uiproc(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);                                                                                                                                                                                                     extern VertexAttribI4uiproc*                            glVertexAttribI4ui;
typedef void            GLDECL VertexAttribI4uivproc(GLuint index, const GLuint * v);                                                                                                                                                                                                                          extern VertexAttribI4uivproc*                           glVertexAttribI4uiv;
typedef void            GLDECL VertexAttribI4usvproc(GLuint index, const GLushort * v);                                                                                                                                                                                                                        extern VertexAttribI4usvproc*                           glVertexAttribI4usv;
typedef void            GLDECL VertexAttribIPointerproc(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);                                                                                                                                                                          extern VertexAttribIPointerproc*                        glVertexAttribIPointer;
typedef void            GLDECL CopyBufferSubDataproc(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);                                                                                                                                                       extern CopyBufferSubDataproc*                           glCopyBufferSubData;
typedef void            GLDECL DrawArraysInstancedproc(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);                                                                                                                                                                                        extern DrawArraysInstancedproc*                         glDrawArraysInstanced;
typedef void            GLDECL DrawElementsInstancedproc(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount);                                                                                                                                                                extern DrawElementsInstancedproc*                       glDrawElementsInstanced;
typedef void            GLDECL GetActiveUniformBlockNameproc(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName);                                                                                                                                          extern GetActiveUniformBlockNameproc*                   glGetActiveUniformBlockName;
typedef void            GLDECL GetActiveUniformBlockivproc(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params);                                                                                                                                                                            extern GetActiveUniformBlockivproc*                     glGetActiveUniformBlockiv;
typedef void            GLDECL GetActiveUniformNameproc(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName);                                                                                                                                                         extern GetActiveUniformNameproc*                        glGetActiveUniformName;
typedef void            GLDECL GetActiveUniformsivproc(GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params);                                                                                                                                                     extern GetActiveUniformsivproc*                         glGetActiveUniformsiv;
typedef GLuint          GLDECL GetUniformBlockIndexproc(GLuint program, const GLchar * uniformBlockName);                                                                                                                                                                                                      extern GetUniformBlockIndexproc*                        glGetUniformBlockIndex;
typedef void            GLDECL GetUniformIndicesproc(GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);                                                                                                                                                        extern GetUniformIndicesproc*                           glGetUniformIndices;
typedef void            GLDECL PrimitiveRestartIndexproc(GLuint index);                                                                                                                                                                                                                                        extern PrimitiveRestartIndexproc*                       glPrimitiveRestartIndex;
typedef void            GLDECL TexBufferproc(GLenum target, GLenum internalformat, GLuint buffer);                                                                                                                                                                                                             extern TexBufferproc*                                   glTexBuffer;
typedef void            GLDECL UniformBlockBindingproc(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);                                                                                                                                                                                  extern UniformBlockBindingproc*                         glUniformBlockBinding;
typedef GLenum          GLDECL ClientWaitSyncproc(GLsync sync, GLbitfield flags, GLuint64 timeout);                                                                                                                                                                                                            extern ClientWaitSyncproc*                              glClientWaitSync;
typedef void            GLDECL DeleteSyncproc(GLsync sync);                                                                                                                                                                                                                                                    extern DeleteSyncproc*                                  glDeleteSync;
typedef void            GLDECL DrawElementsBaseVertexproc(GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex);                                                                                                                                                                    extern DrawElementsBaseVertexproc*                      glDrawElementsBaseVertex;
typedef void            GLDECL DrawElementsInstancedBaseVertexproc(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex);                                                                                                                                    extern DrawElementsInstancedBaseVertexproc*             glDrawElementsInstancedBaseVertex;
typedef void            GLDECL DrawRangeElementsBaseVertexproc(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex);                                                                                                                                     extern DrawRangeElementsBaseVertexproc*                 glDrawRangeElementsBaseVertex;
typedef GLsync          GLDECL FenceSyncproc(GLenum condition, GLbitfield flags);                                                                                                                                                                                                                              extern FenceSyncproc*                                   glFenceSync;
typedef void            GLDECL FramebufferTextureproc(GLenum target, GLenum attachment, GLuint texture, GLint level);                                                                                                                                                                                          extern FramebufferTextureproc*                          glFramebufferTexture;
typedef void            GLDECL GetBufferParameteri64vproc(GLenum target, GLenum pname, GLint64 * params);                                                                                                                                                                                                      extern GetBufferParameteri64vproc*                      glGetBufferParameteri64v;
typedef void            GLDECL GetInteger64i_vproc(GLenum target, GLuint index, GLint64 * data);                                                                                                                                                                                                               extern GetInteger64i_vproc*                             glGetInteger64i_v;
typedef void            GLDECL GetInteger64vproc(GLenum pname, GLint64 * data);                                                                                                                                                                                                                                extern GetInteger64vproc*                               glGetInteger64v;
typedef void            GLDECL GetMultisamplefvproc(GLenum pname, GLuint index, GLfloat * val);                                                                                                                                                                                                                extern GetMultisamplefvproc*                            glGetMultisamplefv;
typedef void            GLDECL GetSyncivproc(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values);                                                                                                                                                                                    extern GetSyncivproc*                                   glGetSynciv;
typedef GLboolean       GLDECL IsSyncproc(GLsync sync);                                                                                                                                                                                                                                                        extern IsSyncproc*                                      glIsSync;
typedef void            GLDECL MultiDrawElementsBaseVertexproc(GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex);                                                                                                                      extern MultiDrawElementsBaseVertexproc*                 glMultiDrawElementsBaseVertex;
typedef void            GLDECL ProvokingVertexproc(GLenum mode);                                                                                                                                                                                                                                               extern ProvokingVertexproc*                             glProvokingVertex;
typedef void            GLDECL SampleMaskiproc(GLuint maskNumber, GLbitfield mask);                                                                                                                                                                                                                            extern SampleMaskiproc*                                 glSampleMaski;
typedef void            GLDECL TexImage2DMultisampleproc(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);                                                                                                                                extern TexImage2DMultisampleproc*                       glTexImage2DMultisample;
typedef void            GLDECL TexImage3DMultisampleproc(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);                                                                                                                 extern TexImage3DMultisampleproc*                       glTexImage3DMultisample;
typedef void            GLDECL WaitSyncproc(GLsync sync, GLbitfield flags, GLuint64 timeout);                                                                                                                                                                                                                  extern WaitSyncproc*                                    glWaitSync;
typedef void            GLDECL BindFragDataLocationIndexedproc(GLuint program, GLuint colorNumber, GLuint index, const GLchar * name);                                                                                                                                                                         extern BindFragDataLocationIndexedproc*                 glBindFragDataLocationIndexed;
typedef void            GLDECL BindSamplerproc(GLuint unit, GLuint sampler);                                                                                                                                                                                                                                   extern BindSamplerproc*                                 glBindSampler;
typedef void            GLDECL DeleteSamplersproc(GLsizei count, const GLuint * samplers);                                                                                                                                                                                                                     extern DeleteSamplersproc*                              glDeleteSamplers;
typedef void            GLDECL GenSamplersproc(GLsizei count, GLuint * samplers);                                                                                                                                                                                                                              extern GenSamplersproc*                                 glGenSamplers;
typedef GLint           GLDECL GetFragDataIndexproc(GLuint program, const GLchar * name);                                                                                                                                                                                                                      extern GetFragDataIndexproc*                            glGetFragDataIndex;
typedef void            GLDECL GetQueryObjecti64vproc(GLuint id, GLenum pname, GLint64 * params);                                                                                                                                                                                                              extern GetQueryObjecti64vproc*                          glGetQueryObjecti64v;
typedef void            GLDECL GetQueryObjectui64vproc(GLuint id, GLenum pname, GLuint64 * params);                                                                                                                                                                                                            extern GetQueryObjectui64vproc*                         glGetQueryObjectui64v;
typedef void            GLDECL GetSamplerParameterIivproc(GLuint sampler, GLenum pname, GLint * params);                                                                                                                                                                                                       extern GetSamplerParameterIivproc*                      glGetSamplerParameterIiv;
typedef void            GLDECL GetSamplerParameterIuivproc(GLuint sampler, GLenum pname, GLuint * params);                                                                                                                                                                                                     extern GetSamplerParameterIuivproc*                     glGetSamplerParameterIuiv;
typedef void            GLDECL GetSamplerParameterfvproc(GLuint sampler, GLenum pname, GLfloat * params);                                                                                                                                                                                                      extern GetSamplerParameterfvproc*                       glGetSamplerParameterfv;
typedef void            GLDECL GetSamplerParameterivproc(GLuint sampler, GLenum pname, GLint * params);                                                                                                                                                                                                        extern GetSamplerParameterivproc*                       glGetSamplerParameteriv;
typedef GLboolean       GLDECL IsSamplerproc(GLuint sampler);                                                                                                                                                                                                                                                  extern IsSamplerproc*                                   glIsSampler;
typedef void            GLDECL QueryCounterproc(GLuint id, GLenum target);                                                                                                                                                                                                                                     extern QueryCounterproc*                                glQueryCounter;
typedef void            GLDECL SamplerParameterIivproc(GLuint sampler, GLenum pname, const GLint * param);                                                                                                                                                                                                     extern SamplerParameterIivproc*                         glSamplerParameterIiv;
typedef void            GLDECL SamplerParameterIuivproc(GLuint sampler, GLenum pname, const GLuint * param);                                                                                                                                                                                                   extern SamplerParameterIuivproc*                        glSamplerParameterIuiv;
typedef void            GLDECL SamplerParameterfproc(GLuint sampler, GLenum pname, GLfloat param);                                                                                                                                                                                                             extern SamplerParameterfproc*                           glSamplerParameterf;
typedef void            GLDECL SamplerParameterfvproc(GLuint sampler, GLenum pname, const GLfloat * param);                                                                                                                                                                                                    extern SamplerParameterfvproc*                          glSamplerParameterfv;
typedef void            GLDECL SamplerParameteriproc(GLuint sampler, GLenum pname, GLint param);                                                                                                                                                                                                               extern SamplerParameteriproc*                           glSamplerParameteri;
typedef void            GLDECL SamplerParameterivproc(GLuint sampler, GLenum pname, const GLint * param);                                                                                                                                                                                                      extern SamplerParameterivproc*                          glSamplerParameteriv;
typedef void            GLDECL VertexAttribDivisorproc(GLuint index, GLuint divisor);                                                                                                                                                                                                                          extern VertexAttribDivisorproc*                         glVertexAttribDivisor;
typedef void            GLDECL VertexAttribP1uiproc(GLuint index, GLenum type, GLboolean normalized, GLuint value);                                                                                                                                                                                            extern VertexAttribP1uiproc*                            glVertexAttribP1ui;
typedef void            GLDECL VertexAttribP1uivproc(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);                                                                                                                                                                                   extern VertexAttribP1uivproc*                           glVertexAttribP1uiv;
typedef void            GLDECL VertexAttribP2uiproc(GLuint index, GLenum type, GLboolean normalized, GLuint value);                                                                                                                                                                                            extern VertexAttribP2uiproc*                            glVertexAttribP2ui;
typedef void            GLDECL VertexAttribP2uivproc(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);                                                                                                                                                                                   extern VertexAttribP2uivproc*                           glVertexAttribP2uiv;
typedef void            GLDECL VertexAttribP3uiproc(GLuint index, GLenum type, GLboolean normalized, GLuint value);                                                                                                                                                                                            extern VertexAttribP3uiproc*                            glVertexAttribP3ui;
typedef void            GLDECL VertexAttribP3uivproc(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);                                                                                                                                                                                   extern VertexAttribP3uivproc*                           glVertexAttribP3uiv;
typedef void            GLDECL VertexAttribP4uiproc(GLuint index, GLenum type, GLboolean normalized, GLuint value);                                                                                                                                                                                            extern VertexAttribP4uiproc*                            glVertexAttribP4ui;
typedef void            GLDECL VertexAttribP4uivproc(GLuint index, GLenum type, GLboolean normalized, const GLuint * value);                                                                                                                                                                                   extern VertexAttribP4uivproc*                           glVertexAttribP4uiv;
typedef void            GLDECL BeginQueryIndexedproc(GLenum target, GLuint index, GLuint id);                                                                                                                                                                                                                  extern BeginQueryIndexedproc*                           glBeginQueryIndexed;
typedef void            GLDECL BindTransformFeedbackproc(GLenum target, GLuint id);                                                                                                                                                                                                                            extern BindTransformFeedbackproc*                       glBindTransformFeedback;
typedef void            GLDECL BlendEquationSeparateiproc(GLuint buf, GLenum modeRGB, GLenum modeAlpha);                                                                                                                                                                                                       extern BlendEquationSeparateiproc*                      glBlendEquationSeparatei;
typedef void            GLDECL BlendEquationiproc(GLuint buf, GLenum mode);                                                                                                                                                                                                                                    extern BlendEquationiproc*                              glBlendEquationi;
typedef void            GLDECL BlendFuncSeparateiproc(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);                                                                                                                                                                             extern BlendFuncSeparateiproc*                          glBlendFuncSeparatei;
typedef void            GLDECL BlendFunciproc(GLuint buf, GLenum src, GLenum dst);                                                                                                                                                                                                                             extern BlendFunciproc*                                  glBlendFunci;
typedef void            GLDECL DeleteTransformFeedbacksproc(GLsizei n, const GLuint * ids);                                                                                                                                                                                                                    extern DeleteTransformFeedbacksproc*                    glDeleteTransformFeedbacks;
typedef void            GLDECL DrawArraysIndirectproc(GLenum mode, const void * indirect);                                                                                                                                                                                                                     extern DrawArraysIndirectproc*                          glDrawArraysIndirect;
typedef void            GLDECL DrawElementsIndirectproc(GLenum mode, GLenum type, const void * indirect);                                                                                                                                                                                                      extern DrawElementsIndirectproc*                        glDrawElementsIndirect;
typedef void            GLDECL DrawTransformFeedbackproc(GLenum mode, GLuint id);                                                                                                                                                                                                                              extern DrawTransformFeedbackproc*                       glDrawTransformFeedback;
typedef void            GLDECL DrawTransformFeedbackStreamproc(GLenum mode, GLuint id, GLuint stream);                                                                                                                                                                                                         extern DrawTransformFeedbackStreamproc*                 glDrawTransformFeedbackStream;
typedef void            GLDECL EndQueryIndexedproc(GLenum target, GLuint index);                                                                                                                                                                                                                               extern EndQueryIndexedproc*                             glEndQueryIndexed;
typedef void            GLDECL GenTransformFeedbacksproc(GLsizei n, GLuint * ids);                                                                                                                                                                                                                             extern GenTransformFeedbacksproc*                       glGenTransformFeedbacks;
typedef void            GLDECL GetActiveSubroutineNameproc(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);                                                                                                                                                 extern GetActiveSubroutineNameproc*                     glGetActiveSubroutineName;
typedef void            GLDECL GetActiveSubroutineUniformNameproc(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);                                                                                                                                          extern GetActiveSubroutineUniformNameproc*              glGetActiveSubroutineUniformName;
typedef void            GLDECL GetActiveSubroutineUniformivproc(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);                                                                                                                                                                extern GetActiveSubroutineUniformivproc*                glGetActiveSubroutineUniformiv;
typedef void            GLDECL GetProgramStageivproc(GLuint program, GLenum shadertype, GLenum pname, GLint * values);                                                                                                                                                                                         extern GetProgramStageivproc*                           glGetProgramStageiv;
typedef void            GLDECL GetQueryIndexedivproc(GLenum target, GLuint index, GLenum pname, GLint * params);                                                                                                                                                                                               extern GetQueryIndexedivproc*                           glGetQueryIndexediv;
typedef GLuint          GLDECL GetSubroutineIndexproc(GLuint program, GLenum shadertype, const GLchar * name);                                                                                                                                                                                                 extern GetSubroutineIndexproc*                          glGetSubroutineIndex;
typedef GLint           GLDECL GetSubroutineUniformLocationproc(GLuint program, GLenum shadertype, const GLchar * name);                                                                                                                                                                                       extern GetSubroutineUniformLocationproc*                glGetSubroutineUniformLocation;
typedef void            GLDECL GetUniformSubroutineuivproc(GLenum shadertype, GLint location, GLuint * params);                                                                                                                                                                                                extern GetUniformSubroutineuivproc*                     glGetUniformSubroutineuiv;
typedef void            GLDECL GetUniformdvproc(GLuint program, GLint location, GLdouble * params);                                                                                                                                                                                                            extern GetUniformdvproc*                                glGetUniformdv;
typedef GLboolean       GLDECL IsTransformFeedbackproc(GLuint id);                                                                                                                                                                                                                                             extern IsTransformFeedbackproc*                         glIsTransformFeedback;
typedef void            GLDECL MinSampleShadingproc(GLfloat value);                                                                                                                                                                                                                                            extern MinSampleShadingproc*                            glMinSampleShading;
typedef void            GLDECL PatchParameterfvproc(GLenum pname, const GLfloat * values);                                                                                                                                                                                                                     extern PatchParameterfvproc*                            glPatchParameterfv;
typedef void            GLDECL PatchParameteriproc(GLenum pname, GLint value);                                                                                                                                                                                                                                 extern PatchParameteriproc*                             glPatchParameteri;
typedef void            GLDECL PauseTransformFeedbackproc(void);                                                                                                                                                                                                                                               extern PauseTransformFeedbackproc*                      glPauseTransformFeedback;
typedef void            GLDECL ResumeTransformFeedbackproc(void);                                                                                                                                                                                                                                              extern ResumeTransformFeedbackproc*                     glResumeTransformFeedback;
typedef void            GLDECL Uniform1dproc(GLint location, GLdouble x);                                                                                                                                                                                                                                      extern Uniform1dproc*                                   glUniform1d;
typedef void            GLDECL Uniform1dvproc(GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                                          extern Uniform1dvproc*                                  glUniform1dv;
typedef void            GLDECL Uniform2dproc(GLint location, GLdouble x, GLdouble y);                                                                                                                                                                                                                          extern Uniform2dproc*                                   glUniform2d;
typedef void            GLDECL Uniform2dvproc(GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                                          extern Uniform2dvproc*                                  glUniform2dv;
typedef void            GLDECL Uniform3dproc(GLint location, GLdouble x, GLdouble y, GLdouble z);                                                                                                                                                                                                              extern Uniform3dproc*                                   glUniform3d;
typedef void            GLDECL Uniform3dvproc(GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                                          extern Uniform3dvproc*                                  glUniform3dv;
typedef void            GLDECL Uniform4dproc(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);                                                                                                                                                                                                  extern Uniform4dproc*                                   glUniform4d;
typedef void            GLDECL Uniform4dvproc(GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                                          extern Uniform4dvproc*                                  glUniform4dv;
typedef void            GLDECL UniformMatrix2dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                               extern UniformMatrix2dvproc*                            glUniformMatrix2dv;
typedef void            GLDECL UniformMatrix2x3dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                             extern UniformMatrix2x3dvproc*                          glUniformMatrix2x3dv;
typedef void            GLDECL UniformMatrix2x4dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                             extern UniformMatrix2x4dvproc*                          glUniformMatrix2x4dv;
typedef void            GLDECL UniformMatrix3dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                               extern UniformMatrix3dvproc*                            glUniformMatrix3dv;
typedef void            GLDECL UniformMatrix3x2dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                             extern UniformMatrix3x2dvproc*                          glUniformMatrix3x2dv;
typedef void            GLDECL UniformMatrix3x4dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                             extern UniformMatrix3x4dvproc*                          glUniformMatrix3x4dv;
typedef void            GLDECL UniformMatrix4dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                               extern UniformMatrix4dvproc*                            glUniformMatrix4dv;
typedef void            GLDECL UniformMatrix4x2dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                             extern UniformMatrix4x2dvproc*                          glUniformMatrix4x2dv;
typedef void            GLDECL UniformMatrix4x3dvproc(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                                             extern UniformMatrix4x3dvproc*                          glUniformMatrix4x3dv;
typedef void            GLDECL UniformSubroutinesuivproc(GLenum shadertype, GLsizei count, const GLuint * indices);                                                                                                                                                                                            extern UniformSubroutinesuivproc*                       glUniformSubroutinesuiv;
typedef void            GLDECL ActiveShaderProgramproc(GLuint pipeline, GLuint program);                                                                                                                                                                                                                       extern ActiveShaderProgramproc*                         glActiveShaderProgram;
typedef void            GLDECL BindProgramPipelineproc(GLuint pipeline);                                                                                                                                                                                                                                       extern BindProgramPipelineproc*                         glBindProgramPipeline;
typedef void            GLDECL ClearDepthfproc(GLfloat d);                                                                                                                                                                                                                                                     extern ClearDepthfproc*                                 glClearDepthf;
typedef GLuint          GLDECL CreateShaderProgramvproc(GLenum type, GLsizei count, const GLchar *const* strings);                                                                                                                                                                                             extern CreateShaderProgramvproc*                        glCreateShaderProgramv;
typedef void            GLDECL DeleteProgramPipelinesproc(GLsizei n, const GLuint * pipelines);                                                                                                                                                                                                                extern DeleteProgramPipelinesproc*                      glDeleteProgramPipelines;
typedef void            GLDECL DepthRangeArrayvproc(GLuint first, GLsizei count, const GLdouble * v);                                                                                                                                                                                                          extern DepthRangeArrayvproc*                            glDepthRangeArrayv;
typedef void            GLDECL DepthRangeIndexedproc(GLuint index, GLdouble n, GLdouble f);                                                                                                                                                                                                                    extern DepthRangeIndexedproc*                           glDepthRangeIndexed;
typedef void            GLDECL DepthRangefproc(GLfloat n, GLfloat f);                                                                                                                                                                                                                                          extern DepthRangefproc*                                 glDepthRangef;
typedef void            GLDECL GenProgramPipelinesproc(GLsizei n, GLuint * pipelines);                                                                                                                                                                                                                         extern GenProgramPipelinesproc*                         glGenProgramPipelines;
typedef void            GLDECL GetDoublei_vproc(GLenum target, GLuint index, GLdouble * data);                                                                                                                                                                                                                 extern GetDoublei_vproc*                                glGetDoublei_v;
typedef void            GLDECL GetFloati_vproc(GLenum target, GLuint index, GLfloat * data);                                                                                                                                                                                                                   extern GetFloati_vproc*                                 glGetFloati_v;
typedef void            GLDECL GetProgramBinaryproc(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);                                                                                                                                                                  extern GetProgramBinaryproc*                            glGetProgramBinary;
typedef void            GLDECL GetProgramPipelineInfoLogproc(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);                                                                                                                                                                            extern GetProgramPipelineInfoLogproc*                   glGetProgramPipelineInfoLog;
typedef void            GLDECL GetProgramPipelineivproc(GLuint pipeline, GLenum pname, GLint * params);                                                                                                                                                                                                        extern GetProgramPipelineivproc*                        glGetProgramPipelineiv;
typedef void            GLDECL GetShaderPrecisionFormatproc(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);                                                                                                                                                                        extern GetShaderPrecisionFormatproc*                    glGetShaderPrecisionFormat;
typedef void            GLDECL GetVertexAttribLdvproc(GLuint index, GLenum pname, GLdouble * params);                                                                                                                                                                                                          extern GetVertexAttribLdvproc*                          glGetVertexAttribLdv;
typedef GLboolean       GLDECL IsProgramPipelineproc(GLuint pipeline);                                                                                                                                                                                                                                         extern IsProgramPipelineproc*                           glIsProgramPipeline;
typedef void            GLDECL ProgramBinaryproc(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);                                                                                                                                                                                    extern ProgramBinaryproc*                               glProgramBinary;
typedef void            GLDECL ProgramParameteriproc(GLuint program, GLenum pname, GLint value);                                                                                                                                                                                                               extern ProgramParameteriproc*                           glProgramParameteri;
typedef void            GLDECL ProgramUniform1dproc(GLuint program, GLint location, GLdouble v0);                                                                                                                                                                                                              extern ProgramUniform1dproc*                            glProgramUniform1d;
typedef void            GLDECL ProgramUniform1dvproc(GLuint program, GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                   extern ProgramUniform1dvproc*                           glProgramUniform1dv;
typedef void            GLDECL ProgramUniform1fproc(GLuint program, GLint location, GLfloat v0);                                                                                                                                                                                                               extern ProgramUniform1fproc*                            glProgramUniform1f;
typedef void            GLDECL ProgramUniform1fvproc(GLuint program, GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                    extern ProgramUniform1fvproc*                           glProgramUniform1fv;
typedef void            GLDECL ProgramUniform1iproc(GLuint program, GLint location, GLint v0);                                                                                                                                                                                                                 extern ProgramUniform1iproc*                            glProgramUniform1i;
typedef void            GLDECL ProgramUniform1ivproc(GLuint program, GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                      extern ProgramUniform1ivproc*                           glProgramUniform1iv;
typedef void            GLDECL ProgramUniform1uiproc(GLuint program, GLint location, GLuint v0);                                                                                                                                                                                                               extern ProgramUniform1uiproc*                           glProgramUniform1ui;
typedef void            GLDECL ProgramUniform1uivproc(GLuint program, GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                    extern ProgramUniform1uivproc*                          glProgramUniform1uiv;
typedef void            GLDECL ProgramUniform2dproc(GLuint program, GLint location, GLdouble v0, GLdouble v1);                                                                                                                                                                                                 extern ProgramUniform2dproc*                            glProgramUniform2d;
typedef void            GLDECL ProgramUniform2dvproc(GLuint program, GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                   extern ProgramUniform2dvproc*                           glProgramUniform2dv;
typedef void            GLDECL ProgramUniform2fproc(GLuint program, GLint location, GLfloat v0, GLfloat v1);                                                                                                                                                                                                   extern ProgramUniform2fproc*                            glProgramUniform2f;
typedef void            GLDECL ProgramUniform2fvproc(GLuint program, GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                    extern ProgramUniform2fvproc*                           glProgramUniform2fv;
typedef void            GLDECL ProgramUniform2iproc(GLuint program, GLint location, GLint v0, GLint v1);                                                                                                                                                                                                       extern ProgramUniform2iproc*                            glProgramUniform2i;
typedef void            GLDECL ProgramUniform2ivproc(GLuint program, GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                      extern ProgramUniform2ivproc*                           glProgramUniform2iv;
typedef void            GLDECL ProgramUniform2uiproc(GLuint program, GLint location, GLuint v0, GLuint v1);                                                                                                                                                                                                    extern ProgramUniform2uiproc*                           glProgramUniform2ui;
typedef void            GLDECL ProgramUniform2uivproc(GLuint program, GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                    extern ProgramUniform2uivproc*                          glProgramUniform2uiv;
typedef void            GLDECL ProgramUniform3dproc(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);                                                                                                                                                                                    extern ProgramUniform3dproc*                            glProgramUniform3d;
typedef void            GLDECL ProgramUniform3dvproc(GLuint program, GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                   extern ProgramUniform3dvproc*                           glProgramUniform3dv;
typedef void            GLDECL ProgramUniform3fproc(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);                                                                                                                                                                                       extern ProgramUniform3fproc*                            glProgramUniform3f;
typedef void            GLDECL ProgramUniform3fvproc(GLuint program, GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                    extern ProgramUniform3fvproc*                           glProgramUniform3fv;
typedef void            GLDECL ProgramUniform3iproc(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);                                                                                                                                                                                             extern ProgramUniform3iproc*                            glProgramUniform3i;
typedef void            GLDECL ProgramUniform3ivproc(GLuint program, GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                      extern ProgramUniform3ivproc*                           glProgramUniform3iv;
typedef void            GLDECL ProgramUniform3uiproc(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);                                                                                                                                                                                         extern ProgramUniform3uiproc*                           glProgramUniform3ui;
typedef void            GLDECL ProgramUniform3uivproc(GLuint program, GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                    extern ProgramUniform3uivproc*                          glProgramUniform3uiv;
typedef void            GLDECL ProgramUniform4dproc(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);                                                                                                                                                                       extern ProgramUniform4dproc*                            glProgramUniform4d;
typedef void            GLDECL ProgramUniform4dvproc(GLuint program, GLint location, GLsizei count, const GLdouble * value);                                                                                                                                                                                   extern ProgramUniform4dvproc*                           glProgramUniform4dv;
typedef void            GLDECL ProgramUniform4fproc(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);                                                                                                                                                                           extern ProgramUniform4fproc*                            glProgramUniform4f;
typedef void            GLDECL ProgramUniform4fvproc(GLuint program, GLint location, GLsizei count, const GLfloat * value);                                                                                                                                                                                    extern ProgramUniform4fvproc*                           glProgramUniform4fv;
typedef void            GLDECL ProgramUniform4iproc(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);                                                                                                                                                                                   extern ProgramUniform4iproc*                            glProgramUniform4i;
typedef void            GLDECL ProgramUniform4ivproc(GLuint program, GLint location, GLsizei count, const GLint * value);                                                                                                                                                                                      extern ProgramUniform4ivproc*                           glProgramUniform4iv;
typedef void            GLDECL ProgramUniform4uiproc(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);                                                                                                                                                                              extern ProgramUniform4uiproc*                           glProgramUniform4ui;
typedef void            GLDECL ProgramUniform4uivproc(GLuint program, GLint location, GLsizei count, const GLuint * value);                                                                                                                                                                                    extern ProgramUniform4uivproc*                          glProgramUniform4uiv;
typedef void            GLDECL ProgramUniformMatrix2dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                        extern ProgramUniformMatrix2dvproc*                     glProgramUniformMatrix2dv;
typedef void            GLDECL ProgramUniformMatrix2fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                         extern ProgramUniformMatrix2fvproc*                     glProgramUniformMatrix2fv;
typedef void            GLDECL ProgramUniformMatrix2x3dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                      extern ProgramUniformMatrix2x3dvproc*                   glProgramUniformMatrix2x3dv;
typedef void            GLDECL ProgramUniformMatrix2x3fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                       extern ProgramUniformMatrix2x3fvproc*                   glProgramUniformMatrix2x3fv;
typedef void            GLDECL ProgramUniformMatrix2x4dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                      extern ProgramUniformMatrix2x4dvproc*                   glProgramUniformMatrix2x4dv;
typedef void            GLDECL ProgramUniformMatrix2x4fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                       extern ProgramUniformMatrix2x4fvproc*                   glProgramUniformMatrix2x4fv;
typedef void            GLDECL ProgramUniformMatrix3dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                        extern ProgramUniformMatrix3dvproc*                     glProgramUniformMatrix3dv;
typedef void            GLDECL ProgramUniformMatrix3fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                         extern ProgramUniformMatrix3fvproc*                     glProgramUniformMatrix3fv;
typedef void            GLDECL ProgramUniformMatrix3x2dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                      extern ProgramUniformMatrix3x2dvproc*                   glProgramUniformMatrix3x2dv;
typedef void            GLDECL ProgramUniformMatrix3x2fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                       extern ProgramUniformMatrix3x2fvproc*                   glProgramUniformMatrix3x2fv;
typedef void            GLDECL ProgramUniformMatrix3x4dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                      extern ProgramUniformMatrix3x4dvproc*                   glProgramUniformMatrix3x4dv;
typedef void            GLDECL ProgramUniformMatrix3x4fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                       extern ProgramUniformMatrix3x4fvproc*                   glProgramUniformMatrix3x4fv;
typedef void            GLDECL ProgramUniformMatrix4dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                        extern ProgramUniformMatrix4dvproc*                     glProgramUniformMatrix4dv;
typedef void            GLDECL ProgramUniformMatrix4fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                         extern ProgramUniformMatrix4fvproc*                     glProgramUniformMatrix4fv;
typedef void            GLDECL ProgramUniformMatrix4x2dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                      extern ProgramUniformMatrix4x2dvproc*                   glProgramUniformMatrix4x2dv;
typedef void            GLDECL ProgramUniformMatrix4x2fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                       extern ProgramUniformMatrix4x2fvproc*                   glProgramUniformMatrix4x2fv;
typedef void            GLDECL ProgramUniformMatrix4x3dvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);                                                                                                                                                      extern ProgramUniformMatrix4x3dvproc*                   glProgramUniformMatrix4x3dv;
typedef void            GLDECL ProgramUniformMatrix4x3fvproc(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);                                                                                                                                                       extern ProgramUniformMatrix4x3fvproc*                   glProgramUniformMatrix4x3fv;
typedef void            GLDECL ReleaseShaderCompilerproc(void);                                                                                                                                                                                                                                                extern ReleaseShaderCompilerproc*                       glReleaseShaderCompiler;
typedef void            GLDECL ScissorArrayvproc(GLuint first, GLsizei count, const GLint * v);                                                                                                                                                                                                                extern ScissorArrayvproc*                               glScissorArrayv;
typedef void            GLDECL ScissorIndexedproc(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);                                                                                                                                                                                      extern ScissorIndexedproc*                              glScissorIndexed;
typedef void            GLDECL ScissorIndexedvproc(GLuint index, const GLint * v);                                                                                                                                                                                                                             extern ScissorIndexedvproc*                             glScissorIndexedv;
typedef void            GLDECL ShaderBinaryproc(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);                                                                                                                                                              extern ShaderBinaryproc*                                glShaderBinary;
typedef void            GLDECL UseProgramStagesproc(GLuint pipeline, GLbitfield stages, GLuint program);                                                                                                                                                                                                       extern UseProgramStagesproc*                            glUseProgramStages;
typedef void            GLDECL ValidateProgramPipelineproc(GLuint pipeline);                                                                                                                                                                                                                                   extern ValidateProgramPipelineproc*                     glValidateProgramPipeline;
typedef void            GLDECL VertexAttribL1dproc(GLuint index, GLdouble x);                                                                                                                                                                                                                                  extern VertexAttribL1dproc*                             glVertexAttribL1d;
typedef void            GLDECL VertexAttribL1dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                         extern VertexAttribL1dvproc*                            glVertexAttribL1dv;
typedef void            GLDECL VertexAttribL2dproc(GLuint index, GLdouble x, GLdouble y);                                                                                                                                                                                                                      extern VertexAttribL2dproc*                             glVertexAttribL2d;
typedef void            GLDECL VertexAttribL2dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                         extern VertexAttribL2dvproc*                            glVertexAttribL2dv;
typedef void            GLDECL VertexAttribL3dproc(GLuint index, GLdouble x, GLdouble y, GLdouble z);                                                                                                                                                                                                          extern VertexAttribL3dproc*                             glVertexAttribL3d;
typedef void            GLDECL VertexAttribL3dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                         extern VertexAttribL3dvproc*                            glVertexAttribL3dv;
typedef void            GLDECL VertexAttribL4dproc(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);                                                                                                                                                                                              extern VertexAttribL4dproc*                             glVertexAttribL4d;
typedef void            GLDECL VertexAttribL4dvproc(GLuint index, const GLdouble * v);                                                                                                                                                                                                                         extern VertexAttribL4dvproc*                            glVertexAttribL4dv;
typedef void            GLDECL VertexAttribLPointerproc(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);                                                                                                                                                                          extern VertexAttribLPointerproc*                        glVertexAttribLPointer;
typedef void            GLDECL ViewportArrayvproc(GLuint first, GLsizei count, const GLfloat * v);                                                                                                                                                                                                             extern ViewportArrayvproc*                              glViewportArrayv;
typedef void            GLDECL ViewportIndexedfproc(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);                                                                                                                                                                                                 extern ViewportIndexedfproc*                            glViewportIndexedf;
typedef void            GLDECL ViewportIndexedfvproc(GLuint index, const GLfloat * v);                                                                                                                                                                                                                         extern ViewportIndexedfvproc*                           glViewportIndexedfv;
typedef void            GLDECL BindImageTextureproc(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);                                                                                                                                                   extern BindImageTextureproc*                            glBindImageTexture;
typedef void            GLDECL DrawArraysInstancedBaseInstanceproc(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);                                                                                                                                                       extern DrawArraysInstancedBaseInstanceproc*             glDrawArraysInstancedBaseInstance;
typedef void            GLDECL DrawElementsInstancedBaseInstanceproc(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);                                                                                                                               extern DrawElementsInstancedBaseInstanceproc*           glDrawElementsInstancedBaseInstance;
typedef void            GLDECL DrawElementsInstancedBaseVertexBaseInstanceproc(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);                                                                                                   extern DrawElementsInstancedBaseVertexBaseInstanceproc* glDrawElementsInstancedBaseVertexBaseInstance;
typedef void            GLDECL DrawTransformFeedbackInstancedproc(GLenum mode, GLuint id, GLsizei instancecount);                                                                                                                                                                                              extern DrawTransformFeedbackInstancedproc*              glDrawTransformFeedbackInstanced;
typedef void            GLDECL DrawTransformFeedbackStreamInstancedproc(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);                                                                                                                                                                         extern DrawTransformFeedbackStreamInstancedproc*        glDrawTransformFeedbackStreamInstanced;
typedef void            GLDECL GetActiveAtomicCounterBufferivproc(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);                                                                                                                                                                           extern GetActiveAtomicCounterBufferivproc*              glGetActiveAtomicCounterBufferiv;
typedef void            GLDECL GetInternalformativproc(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params);                                                                                                                                                                   extern GetInternalformativproc*                         glGetInternalformativ;
typedef void            GLDECL MemoryBarrierproc(GLbitfield barriers);                                                                                                                                                                                                                                         extern MemoryBarrierproc*                               glMemoryBarrier;
typedef void            GLDECL TexStorage1Dproc(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);                                                                                                                                                                                          extern TexStorage1Dproc*                                glTexStorage1D;
typedef void            GLDECL TexStorage2Dproc(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);                                                                                                                                                                          extern TexStorage2Dproc*                                glTexStorage2D;
typedef void            GLDECL TexStorage3Dproc(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);                                                                                                                                                           extern TexStorage3Dproc*                                glTexStorage3D;
typedef void            GLDECL BindVertexBufferproc(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);                                                                                                                                                                                      extern BindVertexBufferproc*                            glBindVertexBuffer;
typedef void            GLDECL ClearBufferDataproc(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);                                                                                                                                                                       extern ClearBufferDataproc*                             glClearBufferData;
typedef void            GLDECL ClearBufferSubDataproc(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);                                                                                                                                  extern ClearBufferSubDataproc*                          glClearBufferSubData;
typedef void            GLDECL CopyImageSubDataproc(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);                        extern CopyImageSubDataproc*                            glCopyImageSubData;
typedef void            GLDECL DebugMessageCallbackproc(GLDEBUGPROC callback, const void * userParam);                                                                                                                                                                                                         extern DebugMessageCallbackproc*                        glDebugMessageCallback;
typedef void            GLDECL DebugMessageControlproc(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);                                                                                                                                                     extern DebugMessageControlproc*                         glDebugMessageControl;
typedef void            GLDECL DebugMessageInsertproc(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);                                                                                                                                                             extern DebugMessageInsertproc*                          glDebugMessageInsert;
typedef void            GLDECL DispatchComputeproc(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);                                                                                                                                                                                             extern DispatchComputeproc*                             glDispatchCompute;
typedef void            GLDECL DispatchComputeIndirectproc(GLintptr indirect);                                                                                                                                                                                                                                 extern DispatchComputeIndirectproc*                     glDispatchComputeIndirect;
typedef void            GLDECL FramebufferParameteriproc(GLenum target, GLenum pname, GLint param);                                                                                                                                                                                                            extern FramebufferParameteriproc*                       glFramebufferParameteri;
typedef GLuint          GLDECL GetDebugMessageLogproc(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);                                                                                                             extern GetDebugMessageLogproc*                          glGetDebugMessageLog;
typedef void            GLDECL GetFramebufferParameterivproc(GLenum target, GLenum pname, GLint * params);                                                                                                                                                                                                     extern GetFramebufferParameterivproc*                   glGetFramebufferParameteriv;
typedef void            GLDECL GetInternalformati64vproc(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params);                                                                                                                                                               extern GetInternalformati64vproc*                       glGetInternalformati64v;
typedef void            GLDECL GetObjectLabelproc(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);                                                                                                                                                                          extern GetObjectLabelproc*                              glGetObjectLabel;
typedef void            GLDECL GetObjectPtrLabelproc(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);                                                                                                                                                                                     extern GetObjectPtrLabelproc*                           glGetObjectPtrLabel;
typedef void            GLDECL GetProgramInterfaceivproc(GLuint program, GLenum programInterface, GLenum pname, GLint * params);                                                                                                                                                                               extern GetProgramInterfaceivproc*                       glGetProgramInterfaceiv;
typedef GLuint          GLDECL GetProgramResourceIndexproc(GLuint program, GLenum programInterface, const GLchar * name);                                                                                                                                                                                      extern GetProgramResourceIndexproc*                     glGetProgramResourceIndex;
typedef GLint           GLDECL GetProgramResourceLocationproc(GLuint program, GLenum programInterface, const GLchar * name);                                                                                                                                                                                   extern GetProgramResourceLocationproc*                  glGetProgramResourceLocation;
typedef GLint           GLDECL GetProgramResourceLocationIndexproc(GLuint program, GLenum programInterface, const GLchar * name);                                                                                                                                                                              extern GetProgramResourceLocationIndexproc*             glGetProgramResourceLocationIndex;
typedef void            GLDECL GetProgramResourceNameproc(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);                                                                                                                                            extern GetProgramResourceNameproc*                      glGetProgramResourceName;
typedef void            GLDECL GetProgramResourceivproc(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params);                                                                                                    extern GetProgramResourceivproc*                        glGetProgramResourceiv;
typedef void            GLDECL InvalidateBufferDataproc(GLuint buffer);                                                                                                                                                                                                                                        extern InvalidateBufferDataproc*                        glInvalidateBufferData;
typedef void            GLDECL InvalidateBufferSubDataproc(GLuint buffer, GLintptr offset, GLsizeiptr length);                                                                                                                                                                                                 extern InvalidateBufferSubDataproc*                     glInvalidateBufferSubData;
typedef void            GLDECL InvalidateFramebufferproc(GLenum target, GLsizei numAttachments, const GLenum * attachments);                                                                                                                                                                                   extern InvalidateFramebufferproc*                       glInvalidateFramebuffer;
typedef void            GLDECL InvalidateSubFramebufferproc(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);                                                                                                                               extern InvalidateSubFramebufferproc*                    glInvalidateSubFramebuffer;
typedef void            GLDECL InvalidateTexImageproc(GLuint texture, GLint level);                                                                                                                                                                                                                            extern InvalidateTexImageproc*                          glInvalidateTexImage;
typedef void            GLDECL InvalidateTexSubImageproc(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);                                                                                                                              extern InvalidateTexSubImageproc*                       glInvalidateTexSubImage;
typedef void            GLDECL MultiDrawArraysIndirectproc(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);                                                                                                                                                                             extern MultiDrawArraysIndirectproc*                     glMultiDrawArraysIndirect;
typedef void            GLDECL MultiDrawElementsIndirectproc(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);                                                                                                                                                              extern MultiDrawElementsIndirectproc*                   glMultiDrawElementsIndirect;
typedef void            GLDECL ObjectLabelproc(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);                                                                                                                                                                                          extern ObjectLabelproc*                                 glObjectLabel;
typedef void            GLDECL ObjectPtrLabelproc(const void * ptr, GLsizei length, const GLchar * label);                                                                                                                                                                                                     extern ObjectPtrLabelproc*                              glObjectPtrLabel;
typedef void            GLDECL PopDebugGroupproc(void);                                                                                                                                                                                                                                                        extern PopDebugGroupproc*                               glPopDebugGroup;
typedef void            GLDECL PushDebugGroupproc(GLenum source, GLuint id, GLsizei length, const GLchar * message);                                                                                                                                                                                           extern PushDebugGroupproc*                              glPushDebugGroup;
typedef void            GLDECL ShaderStorageBlockBindingproc(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);                                                                                                                                                                            extern ShaderStorageBlockBindingproc*                   glShaderStorageBlockBinding;
typedef void            GLDECL TexBufferRangeproc(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);                                                                                                                                                                      extern TexBufferRangeproc*                              glTexBufferRange;
typedef void            GLDECL TexStorage2DMultisampleproc(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);                                                                                                                              extern TexStorage2DMultisampleproc*                     glTexStorage2DMultisample;
typedef void            GLDECL TexStorage3DMultisampleproc(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);                                                                                                               extern TexStorage3DMultisampleproc*                     glTexStorage3DMultisample;
typedef void            GLDECL TextureViewproc(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);                                                                                                                extern TextureViewproc*                                 glTextureView;
typedef void            GLDECL VertexAttribBindingproc(GLuint attribindex, GLuint bindingindex);                                                                                                                                                                                                               extern VertexAttribBindingproc*                         glVertexAttribBinding;
typedef void            GLDECL VertexAttribFormatproc(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);                                                                                                                                                               extern VertexAttribFormatproc*                          glVertexAttribFormat;
typedef void            GLDECL VertexAttribIFormatproc(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);                                                                                                                                                                                    extern VertexAttribIFormatproc*                         glVertexAttribIFormat;
typedef void            GLDECL VertexAttribLFormatproc(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);                                                                                                                                                                                    extern VertexAttribLFormatproc*                         glVertexAttribLFormat;
typedef void            GLDECL VertexBindingDivisorproc(GLuint bindingindex, GLuint divisor);                                                                                                                                                                                                                  extern VertexBindingDivisorproc*                        glVertexBindingDivisor;
typedef void            GLDECL BindBuffersBaseproc(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);                                                                                                                                                                                        extern BindBuffersBaseproc*                             glBindBuffersBase;
typedef void            GLDECL BindBuffersRangeproc(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);                                                                                                                                   extern BindBuffersRangeproc*                            glBindBuffersRange;
typedef void            GLDECL BindImageTexturesproc(GLuint first, GLsizei count, const GLuint * textures);                                                                                                                                                                                                    extern BindImageTexturesproc*                           glBindImageTextures;
typedef void            GLDECL BindSamplersproc(GLuint first, GLsizei count, const GLuint * samplers);                                                                                                                                                                                                         extern BindSamplersproc*                                glBindSamplers;
typedef void            GLDECL BindTexturesproc(GLuint first, GLsizei count, const GLuint * textures);                                                                                                                                                                                                         extern BindTexturesproc*                                glBindTextures;
typedef void            GLDECL BindVertexBuffersproc(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);                                                                                                                                                  extern BindVertexBuffersproc*                           glBindVertexBuffers;
typedef void            GLDECL BufferStorageproc(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);                                                                                                                                                                                         extern BufferStorageproc*                               glBufferStorage;
typedef void            GLDECL ClearTexImageproc(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);                                                                                                                                                                                  extern ClearTexImageproc*                               glClearTexImage;
typedef void            GLDECL ClearTexSubImageproc(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);                                                                                    extern ClearTexSubImageproc*                            glClearTexSubImage;

bool InitGl();

#endif//GLUA_GLEX_H

/**********************************************************************************************************************/
/*                                                                                                                    */
/* glex.c                                                                                                             */
/*                                                                                                                    */
/**********************************************************************************************************************/

#include <stdio.h>

CopyTexSubImage3Dproc                           *glCopyTexSubImage3D;
DrawRangeElementsproc                           *glDrawRangeElements;
TexImage3Dproc                                  *glTexImage3D;
TexSubImage3Dproc                               *glTexSubImage3D;
ActiveTextureproc                               *glActiveTexture;
ClientActiveTextureproc                         *glClientActiveTexture;
CompressedTexImage1Dproc                        *glCompressedTexImage1D;
CompressedTexImage2Dproc                        *glCompressedTexImage2D;
CompressedTexImage3Dproc                        *glCompressedTexImage3D;
CompressedTexSubImage1Dproc                     *glCompressedTexSubImage1D;
CompressedTexSubImage2Dproc                     *glCompressedTexSubImage2D;
CompressedTexSubImage3Dproc                     *glCompressedTexSubImage3D;
GetCompressedTexImageproc                       *glGetCompressedTexImage;
LoadTransposeMatrixdproc                        *glLoadTransposeMatrixd;
LoadTransposeMatrixfproc                        *glLoadTransposeMatrixf;
MultTransposeMatrixdproc                        *glMultTransposeMatrixd;
MultTransposeMatrixfproc                        *glMultTransposeMatrixf;
MultiTexCoord1dproc                             *glMultiTexCoord1d;
MultiTexCoord1dvproc                            *glMultiTexCoord1dv;
MultiTexCoord1fproc                             *glMultiTexCoord1f;
MultiTexCoord1fvproc                            *glMultiTexCoord1fv;
MultiTexCoord1iproc                             *glMultiTexCoord1i;
MultiTexCoord1ivproc                            *glMultiTexCoord1iv;
MultiTexCoord1sproc                             *glMultiTexCoord1s;
MultiTexCoord1svproc                            *glMultiTexCoord1sv;
MultiTexCoord2dproc                             *glMultiTexCoord2d;
MultiTexCoord2dvproc                            *glMultiTexCoord2dv;
MultiTexCoord2fproc                             *glMultiTexCoord2f;
MultiTexCoord2fvproc                            *glMultiTexCoord2fv;
MultiTexCoord2iproc                             *glMultiTexCoord2i;
MultiTexCoord2ivproc                            *glMultiTexCoord2iv;
MultiTexCoord2sproc                             *glMultiTexCoord2s;
MultiTexCoord2svproc                            *glMultiTexCoord2sv;
MultiTexCoord3dproc                             *glMultiTexCoord3d;
MultiTexCoord3dvproc                            *glMultiTexCoord3dv;
MultiTexCoord3fproc                             *glMultiTexCoord3f;
MultiTexCoord3fvproc                            *glMultiTexCoord3fv;
MultiTexCoord3iproc                             *glMultiTexCoord3i;
MultiTexCoord3ivproc                            *glMultiTexCoord3iv;
MultiTexCoord3sproc                             *glMultiTexCoord3s;
MultiTexCoord3svproc                            *glMultiTexCoord3sv;
MultiTexCoord4dproc                             *glMultiTexCoord4d;
MultiTexCoord4dvproc                            *glMultiTexCoord4dv;
MultiTexCoord4fproc                             *glMultiTexCoord4f;
MultiTexCoord4fvproc                            *glMultiTexCoord4fv;
MultiTexCoord4iproc                             *glMultiTexCoord4i;
MultiTexCoord4ivproc                            *glMultiTexCoord4iv;
MultiTexCoord4sproc                             *glMultiTexCoord4s;
MultiTexCoord4svproc                            *glMultiTexCoord4sv;
SampleCoverageproc                              *glSampleCoverage;
BlendColorproc                                  *glBlendColor;
BlendEquationproc                               *glBlendEquation;
BlendFuncSeparateproc                           *glBlendFuncSeparate;
FogCoordPointerproc                             *glFogCoordPointer;
FogCoorddproc                                   *glFogCoordd;
FogCoorddvproc                                  *glFogCoorddv;
FogCoordfproc                                   *glFogCoordf;
FogCoordfvproc                                  *glFogCoordfv;
MultiDrawArraysproc                             *glMultiDrawArrays;
MultiDrawElementsproc                           *glMultiDrawElements;
PointParameterfproc                             *glPointParameterf;
PointParameterfvproc                            *glPointParameterfv;
PointParameteriproc                             *glPointParameteri;
PointParameterivproc                            *glPointParameteriv;
SecondaryColor3bproc                            *glSecondaryColor3b;
SecondaryColor3bvproc                           *glSecondaryColor3bv;
SecondaryColor3dproc                            *glSecondaryColor3d;
SecondaryColor3dvproc                           *glSecondaryColor3dv;
SecondaryColor3fproc                            *glSecondaryColor3f;
SecondaryColor3fvproc                           *glSecondaryColor3fv;
SecondaryColor3iproc                            *glSecondaryColor3i;
SecondaryColor3ivproc                           *glSecondaryColor3iv;
SecondaryColor3sproc                            *glSecondaryColor3s;
SecondaryColor3svproc                           *glSecondaryColor3sv;
SecondaryColor3ubproc                           *glSecondaryColor3ub;
SecondaryColor3ubvproc                          *glSecondaryColor3ubv;
SecondaryColor3uiproc                           *glSecondaryColor3ui;
SecondaryColor3uivproc                          *glSecondaryColor3uiv;
SecondaryColor3usproc                           *glSecondaryColor3us;
SecondaryColor3usvproc                          *glSecondaryColor3usv;
SecondaryColorPointerproc                       *glSecondaryColorPointer;
WindowPos2dproc                                 *glWindowPos2d;
WindowPos2dvproc                                *glWindowPos2dv;
WindowPos2fproc                                 *glWindowPos2f;
WindowPos2fvproc                                *glWindowPos2fv;
WindowPos2iproc                                 *glWindowPos2i;
WindowPos2ivproc                                *glWindowPos2iv;
WindowPos2sproc                                 *glWindowPos2s;
WindowPos2svproc                                *glWindowPos2sv;
WindowPos3dproc                                 *glWindowPos3d;
WindowPos3dvproc                                *glWindowPos3dv;
WindowPos3fproc                                 *glWindowPos3f;
WindowPos3fvproc                                *glWindowPos3fv;
WindowPos3iproc                                 *glWindowPos3i;
WindowPos3ivproc                                *glWindowPos3iv;
WindowPos3sproc                                 *glWindowPos3s;
WindowPos3svproc                                *glWindowPos3sv;
BeginQueryproc                                  *glBeginQuery;
BindBufferproc                                  *glBindBuffer;
BufferDataproc                                  *glBufferData;
BufferSubDataproc                               *glBufferSubData;
DeleteBuffersproc                               *glDeleteBuffers;
DeleteQueriesproc                               *glDeleteQueries;
EndQueryproc                                    *glEndQuery;
GenBuffersproc                                  *glGenBuffers;
GenQueriesproc                                  *glGenQueries;
GetBufferParameterivproc                        *glGetBufferParameteriv;
GetBufferPointervproc                           *glGetBufferPointerv;
GetBufferSubDataproc                            *glGetBufferSubData;
GetQueryObjectivproc                            *glGetQueryObjectiv;
GetQueryObjectuivproc                           *glGetQueryObjectuiv;
GetQueryivproc                                  *glGetQueryiv;
IsBufferproc                                    *glIsBuffer;
IsQueryproc                                     *glIsQuery;
MapBufferproc                                   *glMapBuffer;
UnmapBufferproc                                 *glUnmapBuffer;
AttachShaderproc                                *glAttachShader;
BindAttribLocationproc                          *glBindAttribLocation;
BlendEquationSeparateproc                       *glBlendEquationSeparate;
CompileShaderproc                               *glCompileShader;
CreateProgramproc                               *glCreateProgram;
CreateShaderproc                                *glCreateShader;
DeleteProgramproc                               *glDeleteProgram;
DeleteShaderproc                                *glDeleteShader;
DetachShaderproc                                *glDetachShader;
DisableVertexAttribArrayproc                    *glDisableVertexAttribArray;
DrawBuffersproc                                 *glDrawBuffers;
EnableVertexAttribArrayproc                     *glEnableVertexAttribArray;
GetActiveAttribproc                             *glGetActiveAttrib;
GetActiveUniformproc                            *glGetActiveUniform;
GetAttachedShadersproc                          *glGetAttachedShaders;
GetAttribLocationproc                           *glGetAttribLocation;
GetProgramInfoLogproc                           *glGetProgramInfoLog;
GetProgramivproc                                *glGetProgramiv;
GetShaderInfoLogproc                            *glGetShaderInfoLog;
GetShaderSourceproc                             *glGetShaderSource;
GetShaderivproc                                 *glGetShaderiv;
GetUniformLocationproc                          *glGetUniformLocation;
GetUniformfvproc                                *glGetUniformfv;
GetUniformivproc                                *glGetUniformiv;
GetVertexAttribPointervproc                     *glGetVertexAttribPointerv;
GetVertexAttribdvproc                           *glGetVertexAttribdv;
GetVertexAttribfvproc                           *glGetVertexAttribfv;
GetVertexAttribivproc                           *glGetVertexAttribiv;
IsProgramproc                                   *glIsProgram;
IsShaderproc                                    *glIsShader;
LinkProgramproc                                 *glLinkProgram;
ShaderSourceproc                                *glShaderSource;
StencilFuncSeparateproc                         *glStencilFuncSeparate;
StencilMaskSeparateproc                         *glStencilMaskSeparate;
StencilOpSeparateproc                           *glStencilOpSeparate;
Uniform1fproc                                   *glUniform1f;
Uniform1fvproc                                  *glUniform1fv;
Uniform1iproc                                   *glUniform1i;
Uniform1ivproc                                  *glUniform1iv;
Uniform2fproc                                   *glUniform2f;
Uniform2fvproc                                  *glUniform2fv;
Uniform2iproc                                   *glUniform2i;
Uniform2ivproc                                  *glUniform2iv;
Uniform3fproc                                   *glUniform3f;
Uniform3fvproc                                  *glUniform3fv;
Uniform3iproc                                   *glUniform3i;
Uniform3ivproc                                  *glUniform3iv;
Uniform4fproc                                   *glUniform4f;
Uniform4fvproc                                  *glUniform4fv;
Uniform4iproc                                   *glUniform4i;
Uniform4ivproc                                  *glUniform4iv;
UniformMatrix2fvproc                            *glUniformMatrix2fv;
UniformMatrix3fvproc                            *glUniformMatrix3fv;
UniformMatrix4fvproc                            *glUniformMatrix4fv;
UseProgramproc                                  *glUseProgram;
ValidateProgramproc                             *glValidateProgram;
VertexAttrib1dproc                              *glVertexAttrib1d;
VertexAttrib1dvproc                             *glVertexAttrib1dv;
VertexAttrib1fproc                              *glVertexAttrib1f;
VertexAttrib1fvproc                             *glVertexAttrib1fv;
VertexAttrib1sproc                              *glVertexAttrib1s;
VertexAttrib1svproc                             *glVertexAttrib1sv;
VertexAttrib2dproc                              *glVertexAttrib2d;
VertexAttrib2dvproc                             *glVertexAttrib2dv;
VertexAttrib2fproc                              *glVertexAttrib2f;
VertexAttrib2fvproc                             *glVertexAttrib2fv;
VertexAttrib2sproc                              *glVertexAttrib2s;
VertexAttrib2svproc                             *glVertexAttrib2sv;
VertexAttrib3dproc                              *glVertexAttrib3d;
VertexAttrib3dvproc                             *glVertexAttrib3dv;
VertexAttrib3fproc                              *glVertexAttrib3f;
VertexAttrib3fvproc                             *glVertexAttrib3fv;
VertexAttrib3sproc                              *glVertexAttrib3s;
VertexAttrib3svproc                             *glVertexAttrib3sv;
VertexAttrib4Nbvproc                            *glVertexAttrib4Nbv;
VertexAttrib4Nivproc                            *glVertexAttrib4Niv;
VertexAttrib4Nsvproc                            *glVertexAttrib4Nsv;
VertexAttrib4Nubproc                            *glVertexAttrib4Nub;
VertexAttrib4Nubvproc                           *glVertexAttrib4Nubv;
VertexAttrib4Nuivproc                           *glVertexAttrib4Nuiv;
VertexAttrib4Nusvproc                           *glVertexAttrib4Nusv;
VertexAttrib4bvproc                             *glVertexAttrib4bv;
VertexAttrib4dproc                              *glVertexAttrib4d;
VertexAttrib4dvproc                             *glVertexAttrib4dv;
VertexAttrib4fproc                              *glVertexAttrib4f;
VertexAttrib4fvproc                             *glVertexAttrib4fv;
VertexAttrib4ivproc                             *glVertexAttrib4iv;
VertexAttrib4sproc                              *glVertexAttrib4s;
VertexAttrib4svproc                             *glVertexAttrib4sv;
VertexAttrib4ubvproc                            *glVertexAttrib4ubv;
VertexAttrib4uivproc                            *glVertexAttrib4uiv;
VertexAttrib4usvproc                            *glVertexAttrib4usv;
VertexAttribPointerproc                         *glVertexAttribPointer;
UniformMatrix2x3fvproc                          *glUniformMatrix2x3fv;
UniformMatrix2x4fvproc                          *glUniformMatrix2x4fv;
UniformMatrix3x2fvproc                          *glUniformMatrix3x2fv;
UniformMatrix3x4fvproc                          *glUniformMatrix3x4fv;
UniformMatrix4x2fvproc                          *glUniformMatrix4x2fv;
UniformMatrix4x3fvproc                          *glUniformMatrix4x3fv;
BeginConditionalRenderproc                      *glBeginConditionalRender;
BeginTransformFeedbackproc                      *glBeginTransformFeedback;
BindBufferBaseproc                              *glBindBufferBase;
BindBufferRangeproc                             *glBindBufferRange;
BindFragDataLocationproc                        *glBindFragDataLocation;
BindFramebufferproc                             *glBindFramebuffer;
BindRenderbufferproc                            *glBindRenderbuffer;
BindVertexArrayproc                             *glBindVertexArray;
BlitFramebufferproc                             *glBlitFramebuffer;
CheckFramebufferStatusproc                      *glCheckFramebufferStatus;
ClampColorproc                                  *glClampColor;
ClearBufferfiproc                               *glClearBufferfi;
ClearBufferfvproc                               *glClearBufferfv;
ClearBufferivproc                               *glClearBufferiv;
ClearBufferuivproc                              *glClearBufferuiv;
ColorMaskiproc                                  *glColorMaski;
DeleteFramebuffersproc                          *glDeleteFramebuffers;
DeleteRenderbuffersproc                         *glDeleteRenderbuffers;
DeleteVertexArraysproc                          *glDeleteVertexArrays;
Disableiproc                                    *glDisablei;
Enableiproc                                     *glEnablei;
EndConditionalRenderproc                        *glEndConditionalRender;
EndTransformFeedbackproc                        *glEndTransformFeedback;
FlushMappedBufferRangeproc                      *glFlushMappedBufferRange;
FramebufferRenderbufferproc                     *glFramebufferRenderbuffer;
FramebufferTexture1Dproc                        *glFramebufferTexture1D;
FramebufferTexture2Dproc                        *glFramebufferTexture2D;
FramebufferTexture3Dproc                        *glFramebufferTexture3D;
FramebufferTextureLayerproc                     *glFramebufferTextureLayer;
GenFramebuffersproc                             *glGenFramebuffers;
GenRenderbuffersproc                            *glGenRenderbuffers;
GenVertexArraysproc                             *glGenVertexArrays;
GenerateMipmapproc                              *glGenerateMipmap;
GetBooleani_vproc                               *glGetBooleani_v;
GetFragDataLocationproc                         *glGetFragDataLocation;
GetFramebufferAttachmentParameterivproc         *glGetFramebufferAttachmentParameteriv;
GetIntegeri_vproc                               *glGetIntegeri_v;
GetRenderbufferParameterivproc                  *glGetRenderbufferParameteriv;
GetStringiproc                                  *glGetStringi;
GetTexParameterIivproc                          *glGetTexParameterIiv;
GetTexParameterIuivproc                         *glGetTexParameterIuiv;
GetTransformFeedbackVaryingproc                 *glGetTransformFeedbackVarying;
GetUniformuivproc                               *glGetUniformuiv;
GetVertexAttribIivproc                          *glGetVertexAttribIiv;
GetVertexAttribIuivproc                         *glGetVertexAttribIuiv;
IsEnablediproc                                  *glIsEnabledi;
IsFramebufferproc                               *glIsFramebuffer;
IsRenderbufferproc                              *glIsRenderbuffer;
IsVertexArrayproc                               *glIsVertexArray;
MapBufferRangeproc                              *glMapBufferRange;
RenderbufferStorageproc                         *glRenderbufferStorage;
RenderbufferStorageMultisampleproc              *glRenderbufferStorageMultisample;
TexParameterIivproc                             *glTexParameterIiv;
TexParameterIuivproc                            *glTexParameterIuiv;
TransformFeedbackVaryingsproc                   *glTransformFeedbackVaryings;
Uniform1uiproc                                  *glUniform1ui;
Uniform1uivproc                                 *glUniform1uiv;
Uniform2uiproc                                  *glUniform2ui;
Uniform2uivproc                                 *glUniform2uiv;
Uniform3uiproc                                  *glUniform3ui;
Uniform3uivproc                                 *glUniform3uiv;
Uniform4uiproc                                  *glUniform4ui;
Uniform4uivproc                                 *glUniform4uiv;
VertexAttribI1iproc                             *glVertexAttribI1i;
VertexAttribI1ivproc                            *glVertexAttribI1iv;
VertexAttribI1uiproc                            *glVertexAttribI1ui;
VertexAttribI1uivproc                           *glVertexAttribI1uiv;
VertexAttribI2iproc                             *glVertexAttribI2i;
VertexAttribI2ivproc                            *glVertexAttribI2iv;
VertexAttribI2uiproc                            *glVertexAttribI2ui;
VertexAttribI2uivproc                           *glVertexAttribI2uiv;
VertexAttribI3iproc                             *glVertexAttribI3i;
VertexAttribI3ivproc                            *glVertexAttribI3iv;
VertexAttribI3uiproc                            *glVertexAttribI3ui;
VertexAttribI3uivproc                           *glVertexAttribI3uiv;
VertexAttribI4bvproc                            *glVertexAttribI4bv;
VertexAttribI4iproc                             *glVertexAttribI4i;
VertexAttribI4ivproc                            *glVertexAttribI4iv;
VertexAttribI4svproc                            *glVertexAttribI4sv;
VertexAttribI4ubvproc                           *glVertexAttribI4ubv;
VertexAttribI4uiproc                            *glVertexAttribI4ui;
VertexAttribI4uivproc                           *glVertexAttribI4uiv;
VertexAttribI4usvproc                           *glVertexAttribI4usv;
VertexAttribIPointerproc                        *glVertexAttribIPointer;
CopyBufferSubDataproc                           *glCopyBufferSubData;
DrawArraysInstancedproc                         *glDrawArraysInstanced;
DrawElementsInstancedproc                       *glDrawElementsInstanced;
GetActiveUniformBlockNameproc                   *glGetActiveUniformBlockName;
GetActiveUniformBlockivproc                     *glGetActiveUniformBlockiv;
GetActiveUniformNameproc                        *glGetActiveUniformName;
GetActiveUniformsivproc                         *glGetActiveUniformsiv;
GetUniformBlockIndexproc                        *glGetUniformBlockIndex;
GetUniformIndicesproc                           *glGetUniformIndices;
PrimitiveRestartIndexproc                       *glPrimitiveRestartIndex;
TexBufferproc                                   *glTexBuffer;
UniformBlockBindingproc                         *glUniformBlockBinding;
ClientWaitSyncproc                              *glClientWaitSync;
DeleteSyncproc                                  *glDeleteSync;
DrawElementsBaseVertexproc                      *glDrawElementsBaseVertex;
DrawElementsInstancedBaseVertexproc             *glDrawElementsInstancedBaseVertex;
DrawRangeElementsBaseVertexproc                 *glDrawRangeElementsBaseVertex;
FenceSyncproc                                   *glFenceSync;
FramebufferTextureproc                          *glFramebufferTexture;
GetBufferParameteri64vproc                      *glGetBufferParameteri64v;
GetInteger64i_vproc                             *glGetInteger64i_v;
GetInteger64vproc                               *glGetInteger64v;
GetMultisamplefvproc                            *glGetMultisamplefv;
GetSyncivproc                                   *glGetSynciv;
IsSyncproc                                      *glIsSync;
MultiDrawElementsBaseVertexproc                 *glMultiDrawElementsBaseVertex;
ProvokingVertexproc                             *glProvokingVertex;
SampleMaskiproc                                 *glSampleMaski;
TexImage2DMultisampleproc                       *glTexImage2DMultisample;
TexImage3DMultisampleproc                       *glTexImage3DMultisample;
WaitSyncproc                                    *glWaitSync;
BindFragDataLocationIndexedproc                 *glBindFragDataLocationIndexed;
BindSamplerproc                                 *glBindSampler;
DeleteSamplersproc                              *glDeleteSamplers;
GenSamplersproc                                 *glGenSamplers;
GetFragDataIndexproc                            *glGetFragDataIndex;
GetQueryObjecti64vproc                          *glGetQueryObjecti64v;
GetQueryObjectui64vproc                         *glGetQueryObjectui64v;
GetSamplerParameterIivproc                      *glGetSamplerParameterIiv;
GetSamplerParameterIuivproc                     *glGetSamplerParameterIuiv;
GetSamplerParameterfvproc                       *glGetSamplerParameterfv;
GetSamplerParameterivproc                       *glGetSamplerParameteriv;
IsSamplerproc                                   *glIsSampler;
QueryCounterproc                                *glQueryCounter;
SamplerParameterIivproc                         *glSamplerParameterIiv;
SamplerParameterIuivproc                        *glSamplerParameterIuiv;
SamplerParameterfproc                           *glSamplerParameterf;
SamplerParameterfvproc                          *glSamplerParameterfv;
SamplerParameteriproc                           *glSamplerParameteri;
SamplerParameterivproc                          *glSamplerParameteriv;
VertexAttribDivisorproc                         *glVertexAttribDivisor;
VertexAttribP1uiproc                            *glVertexAttribP1ui;
VertexAttribP1uivproc                           *glVertexAttribP1uiv;
VertexAttribP2uiproc                            *glVertexAttribP2ui;
VertexAttribP2uivproc                           *glVertexAttribP2uiv;
VertexAttribP3uiproc                            *glVertexAttribP3ui;
VertexAttribP3uivproc                           *glVertexAttribP3uiv;
VertexAttribP4uiproc                            *glVertexAttribP4ui;
VertexAttribP4uivproc                           *glVertexAttribP4uiv;
BeginQueryIndexedproc                           *glBeginQueryIndexed;
BindTransformFeedbackproc                       *glBindTransformFeedback;
BlendEquationSeparateiproc                      *glBlendEquationSeparatei;
BlendEquationiproc                              *glBlendEquationi;
BlendFuncSeparateiproc                          *glBlendFuncSeparatei;
BlendFunciproc                                  *glBlendFunci;
DeleteTransformFeedbacksproc                    *glDeleteTransformFeedbacks;
DrawArraysIndirectproc                          *glDrawArraysIndirect;
DrawElementsIndirectproc                        *glDrawElementsIndirect;
DrawTransformFeedbackproc                       *glDrawTransformFeedback;
DrawTransformFeedbackStreamproc                 *glDrawTransformFeedbackStream;
EndQueryIndexedproc                             *glEndQueryIndexed;
GenTransformFeedbacksproc                       *glGenTransformFeedbacks;
GetActiveSubroutineNameproc                     *glGetActiveSubroutineName;
GetActiveSubroutineUniformNameproc              *glGetActiveSubroutineUniformName;
GetActiveSubroutineUniformivproc                *glGetActiveSubroutineUniformiv;
GetProgramStageivproc                           *glGetProgramStageiv;
GetQueryIndexedivproc                           *glGetQueryIndexediv;
GetSubroutineIndexproc                          *glGetSubroutineIndex;
GetSubroutineUniformLocationproc                *glGetSubroutineUniformLocation;
GetUniformSubroutineuivproc                     *glGetUniformSubroutineuiv;
GetUniformdvproc                                *glGetUniformdv;
IsTransformFeedbackproc                         *glIsTransformFeedback;
MinSampleShadingproc                            *glMinSampleShading;
PatchParameterfvproc                            *glPatchParameterfv;
PatchParameteriproc                             *glPatchParameteri;
PauseTransformFeedbackproc                      *glPauseTransformFeedback;
ResumeTransformFeedbackproc                     *glResumeTransformFeedback;
Uniform1dproc                                   *glUniform1d;
Uniform1dvproc                                  *glUniform1dv;
Uniform2dproc                                   *glUniform2d;
Uniform2dvproc                                  *glUniform2dv;
Uniform3dproc                                   *glUniform3d;
Uniform3dvproc                                  *glUniform3dv;
Uniform4dproc                                   *glUniform4d;
Uniform4dvproc                                  *glUniform4dv;
UniformMatrix2dvproc                            *glUniformMatrix2dv;
UniformMatrix2x3dvproc                          *glUniformMatrix2x3dv;
UniformMatrix2x4dvproc                          *glUniformMatrix2x4dv;
UniformMatrix3dvproc                            *glUniformMatrix3dv;
UniformMatrix3x2dvproc                          *glUniformMatrix3x2dv;
UniformMatrix3x4dvproc                          *glUniformMatrix3x4dv;
UniformMatrix4dvproc                            *glUniformMatrix4dv;
UniformMatrix4x2dvproc                          *glUniformMatrix4x2dv;
UniformMatrix4x3dvproc                          *glUniformMatrix4x3dv;
UniformSubroutinesuivproc                       *glUniformSubroutinesuiv;
ActiveShaderProgramproc                         *glActiveShaderProgram;
BindProgramPipelineproc                         *glBindProgramPipeline;
ClearDepthfproc                                 *glClearDepthf;
CreateShaderProgramvproc                        *glCreateShaderProgramv;
DeleteProgramPipelinesproc                      *glDeleteProgramPipelines;
DepthRangeArrayvproc                            *glDepthRangeArrayv;
DepthRangeIndexedproc                           *glDepthRangeIndexed;
DepthRangefproc                                 *glDepthRangef;
GenProgramPipelinesproc                         *glGenProgramPipelines;
GetDoublei_vproc                                *glGetDoublei_v;
GetFloati_vproc                                 *glGetFloati_v;
GetProgramBinaryproc                            *glGetProgramBinary;
GetProgramPipelineInfoLogproc                   *glGetProgramPipelineInfoLog;
GetProgramPipelineivproc                        *glGetProgramPipelineiv;
GetShaderPrecisionFormatproc                    *glGetShaderPrecisionFormat;
GetVertexAttribLdvproc                          *glGetVertexAttribLdv;
IsProgramPipelineproc                           *glIsProgramPipeline;
ProgramBinaryproc                               *glProgramBinary;
ProgramParameteriproc                           *glProgramParameteri;
ProgramUniform1dproc                            *glProgramUniform1d;
ProgramUniform1dvproc                           *glProgramUniform1dv;
ProgramUniform1fproc                            *glProgramUniform1f;
ProgramUniform1fvproc                           *glProgramUniform1fv;
ProgramUniform1iproc                            *glProgramUniform1i;
ProgramUniform1ivproc                           *glProgramUniform1iv;
ProgramUniform1uiproc                           *glProgramUniform1ui;
ProgramUniform1uivproc                          *glProgramUniform1uiv;
ProgramUniform2dproc                            *glProgramUniform2d;
ProgramUniform2dvproc                           *glProgramUniform2dv;
ProgramUniform2fproc                            *glProgramUniform2f;
ProgramUniform2fvproc                           *glProgramUniform2fv;
ProgramUniform2iproc                            *glProgramUniform2i;
ProgramUniform2ivproc                           *glProgramUniform2iv;
ProgramUniform2uiproc                           *glProgramUniform2ui;
ProgramUniform2uivproc                          *glProgramUniform2uiv;
ProgramUniform3dproc                            *glProgramUniform3d;
ProgramUniform3dvproc                           *glProgramUniform3dv;
ProgramUniform3fproc                            *glProgramUniform3f;
ProgramUniform3fvproc                           *glProgramUniform3fv;
ProgramUniform3iproc                            *glProgramUniform3i;
ProgramUniform3ivproc                           *glProgramUniform3iv;
ProgramUniform3uiproc                           *glProgramUniform3ui;
ProgramUniform3uivproc                          *glProgramUniform3uiv;
ProgramUniform4dproc                            *glProgramUniform4d;
ProgramUniform4dvproc                           *glProgramUniform4dv;
ProgramUniform4fproc                            *glProgramUniform4f;
ProgramUniform4fvproc                           *glProgramUniform4fv;
ProgramUniform4iproc                            *glProgramUniform4i;
ProgramUniform4ivproc                           *glProgramUniform4iv;
ProgramUniform4uiproc                           *glProgramUniform4ui;
ProgramUniform4uivproc                          *glProgramUniform4uiv;
ProgramUniformMatrix2dvproc                     *glProgramUniformMatrix2dv;
ProgramUniformMatrix2fvproc                     *glProgramUniformMatrix2fv;
ProgramUniformMatrix2x3dvproc                   *glProgramUniformMatrix2x3dv;
ProgramUniformMatrix2x3fvproc                   *glProgramUniformMatrix2x3fv;
ProgramUniformMatrix2x4dvproc                   *glProgramUniformMatrix2x4dv;
ProgramUniformMatrix2x4fvproc                   *glProgramUniformMatrix2x4fv;
ProgramUniformMatrix3dvproc                     *glProgramUniformMatrix3dv;
ProgramUniformMatrix3fvproc                     *glProgramUniformMatrix3fv;
ProgramUniformMatrix3x2dvproc                   *glProgramUniformMatrix3x2dv;
ProgramUniformMatrix3x2fvproc                   *glProgramUniformMatrix3x2fv;
ProgramUniformMatrix3x4dvproc                   *glProgramUniformMatrix3x4dv;
ProgramUniformMatrix3x4fvproc                   *glProgramUniformMatrix3x4fv;
ProgramUniformMatrix4dvproc                     *glProgramUniformMatrix4dv;
ProgramUniformMatrix4fvproc                     *glProgramUniformMatrix4fv;
ProgramUniformMatrix4x2dvproc                   *glProgramUniformMatrix4x2dv;
ProgramUniformMatrix4x2fvproc                   *glProgramUniformMatrix4x2fv;
ProgramUniformMatrix4x3dvproc                   *glProgramUniformMatrix4x3dv;
ProgramUniformMatrix4x3fvproc                   *glProgramUniformMatrix4x3fv;
ReleaseShaderCompilerproc                       *glReleaseShaderCompiler;
ScissorArrayvproc                               *glScissorArrayv;
ScissorIndexedproc                              *glScissorIndexed;
ScissorIndexedvproc                             *glScissorIndexedv;
ShaderBinaryproc                                *glShaderBinary;
UseProgramStagesproc                            *glUseProgramStages;
ValidateProgramPipelineproc                     *glValidateProgramPipeline;
VertexAttribL1dproc                             *glVertexAttribL1d;
VertexAttribL1dvproc                            *glVertexAttribL1dv;
VertexAttribL2dproc                             *glVertexAttribL2d;
VertexAttribL2dvproc                            *glVertexAttribL2dv;
VertexAttribL3dproc                             *glVertexAttribL3d;
VertexAttribL3dvproc                            *glVertexAttribL3dv;
VertexAttribL4dproc                             *glVertexAttribL4d;
VertexAttribL4dvproc                            *glVertexAttribL4dv;
VertexAttribLPointerproc                        *glVertexAttribLPointer;
ViewportArrayvproc                              *glViewportArrayv;
ViewportIndexedfproc                            *glViewportIndexedf;
ViewportIndexedfvproc                           *glViewportIndexedfv;
BindImageTextureproc                            *glBindImageTexture;
DrawArraysInstancedBaseInstanceproc             *glDrawArraysInstancedBaseInstance;
DrawElementsInstancedBaseInstanceproc           *glDrawElementsInstancedBaseInstance;
DrawElementsInstancedBaseVertexBaseInstanceproc *glDrawElementsInstancedBaseVertexBaseInstance;
DrawTransformFeedbackInstancedproc              *glDrawTransformFeedbackInstanced;
DrawTransformFeedbackStreamInstancedproc        *glDrawTransformFeedbackStreamInstanced;
GetActiveAtomicCounterBufferivproc              *glGetActiveAtomicCounterBufferiv;
GetInternalformativproc                         *glGetInternalformativ;
MemoryBarrierproc                               *glMemoryBarrier;
TexStorage1Dproc                                *glTexStorage1D;
TexStorage2Dproc                                *glTexStorage2D;
TexStorage3Dproc                                *glTexStorage3D;
BindVertexBufferproc                            *glBindVertexBuffer;
ClearBufferDataproc                             *glClearBufferData;
ClearBufferSubDataproc                          *glClearBufferSubData;
CopyImageSubDataproc                            *glCopyImageSubData;
DebugMessageCallbackproc                        *glDebugMessageCallback;
DebugMessageControlproc                         *glDebugMessageControl;
DebugMessageInsertproc                          *glDebugMessageInsert;
DispatchComputeproc                             *glDispatchCompute;
DispatchComputeIndirectproc                     *glDispatchComputeIndirect;
FramebufferParameteriproc                       *glFramebufferParameteri;
GetDebugMessageLogproc                          *glGetDebugMessageLog;
GetFramebufferParameterivproc                   *glGetFramebufferParameteriv;
GetInternalformati64vproc                       *glGetInternalformati64v;
GetObjectLabelproc                              *glGetObjectLabel;
GetObjectPtrLabelproc                           *glGetObjectPtrLabel;
GetProgramInterfaceivproc                       *glGetProgramInterfaceiv;
GetProgramResourceIndexproc                     *glGetProgramResourceIndex;
GetProgramResourceLocationproc                  *glGetProgramResourceLocation;
GetProgramResourceLocationIndexproc             *glGetProgramResourceLocationIndex;
GetProgramResourceNameproc                      *glGetProgramResourceName;
GetProgramResourceivproc                        *glGetProgramResourceiv;
InvalidateBufferDataproc                        *glInvalidateBufferData;
InvalidateBufferSubDataproc                     *glInvalidateBufferSubData;
InvalidateFramebufferproc                       *glInvalidateFramebuffer;
InvalidateSubFramebufferproc                    *glInvalidateSubFramebuffer;
InvalidateTexImageproc                          *glInvalidateTexImage;
InvalidateTexSubImageproc                       *glInvalidateTexSubImage;
MultiDrawArraysIndirectproc                     *glMultiDrawArraysIndirect;
MultiDrawElementsIndirectproc                   *glMultiDrawElementsIndirect;
ObjectLabelproc                                 *glObjectLabel;
ObjectPtrLabelproc                              *glObjectPtrLabel;
PopDebugGroupproc                               *glPopDebugGroup;
PushDebugGroupproc                              *glPushDebugGroup;
ShaderStorageBlockBindingproc                   *glShaderStorageBlockBinding;
TexBufferRangeproc                              *glTexBufferRange;
TexStorage2DMultisampleproc                     *glTexStorage2DMultisample;
TexStorage3DMultisampleproc                     *glTexStorage3DMultisample;
TextureViewproc                                 *glTextureView;
VertexAttribBindingproc                         *glVertexAttribBinding;
VertexAttribFormatproc                          *glVertexAttribFormat;
VertexAttribIFormatproc                         *glVertexAttribIFormat;
VertexAttribLFormatproc                         *glVertexAttribLFormat;
VertexBindingDivisorproc                        *glVertexBindingDivisor;
BindBuffersBaseproc                             *glBindBuffersBase;
BindBuffersRangeproc                            *glBindBuffersRange;
BindImageTexturesproc                           *glBindImageTextures;
BindSamplersproc                                *glBindSamplers;
BindTexturesproc                                *glBindTextures;
BindVertexBuffersproc                           *glBindVertexBuffers;
BufferStorageproc                               *glBufferStorage;
ClearTexImageproc                               *glClearTexImage;
ClearTexSubImageproc                            *glClearTexSubImage;

bool InitGl() {
    // get the function pointer of wglGetProcAddress
    HINSTANCE dll = LoadLibraryA("opengl32.dll");
    typedef PROC WINAPI wglGetProcAddressproc(LPCSTR lpszProc);
    if (!dll) {
        printf("opengl32.dll not found.\n");
        return false;
    }
    wglGetProcAddressproc* wglGetProcAddress =
    (wglGetProcAddressproc*)GetProcAddress(dll, "wglGetProcAddress");

    glCopyTexSubImage3D = (CopyTexSubImage3Dproc *)wglGetProcAddress("glCopyTexSubImage3D");
    if (!glCopyTexSubImage3D) {
        printf("Function glCopyTexSubImage3D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawRangeElements = (DrawRangeElementsproc *)wglGetProcAddress("glDrawRangeElements");
    if (!glDrawRangeElements) {
        printf("Function glDrawRangeElements couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexImage3D = (TexImage3Dproc *)wglGetProcAddress("glTexImage3D");
    if (!glTexImage3D) {
        printf("Function glTexImage3D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexSubImage3D = (TexSubImage3Dproc *)wglGetProcAddress("glTexSubImage3D");
    if (!glTexSubImage3D) {
        printf("Function glTexSubImage3D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glActiveTexture = (ActiveTextureproc *)wglGetProcAddress("glActiveTexture");
    if (!glActiveTexture) {
        printf("Function glActiveTexture couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClientActiveTexture = (ClientActiveTextureproc *)wglGetProcAddress("glClientActiveTexture");
    if (!glClientActiveTexture) {
        printf("Function glClientActiveTexture couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCompressedTexImage1D = (CompressedTexImage1Dproc *)wglGetProcAddress("glCompressedTexImage1D");
    if (!glCompressedTexImage1D) {
        printf("Function glCompressedTexImage1D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCompressedTexImage2D = (CompressedTexImage2Dproc *)wglGetProcAddress("glCompressedTexImage2D");
    if (!glCompressedTexImage2D) {
        printf("Function glCompressedTexImage2D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCompressedTexImage3D = (CompressedTexImage3Dproc *)wglGetProcAddress("glCompressedTexImage3D");
    if (!glCompressedTexImage3D) {
        printf("Function glCompressedTexImage3D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCompressedTexSubImage1D = (CompressedTexSubImage1Dproc *)wglGetProcAddress("glCompressedTexSubImage1D");
    if (!glCompressedTexSubImage1D) {
        printf("Function glCompressedTexSubImage1D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCompressedTexSubImage2D = (CompressedTexSubImage2Dproc *)wglGetProcAddress("glCompressedTexSubImage2D");
    if (!glCompressedTexSubImage2D) {
        printf("Function glCompressedTexSubImage2D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCompressedTexSubImage3D = (CompressedTexSubImage3Dproc *)wglGetProcAddress("glCompressedTexSubImage3D");
    if (!glCompressedTexSubImage3D) {
        printf("Function glCompressedTexSubImage3D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetCompressedTexImage = (GetCompressedTexImageproc *)wglGetProcAddress("glGetCompressedTexImage");
    if (!glGetCompressedTexImage) {
        printf("Function glGetCompressedTexImage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glLoadTransposeMatrixd = (LoadTransposeMatrixdproc *)wglGetProcAddress("glLoadTransposeMatrixd");
    if (!glLoadTransposeMatrixd) {
        printf("Function glLoadTransposeMatrixd couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glLoadTransposeMatrixf = (LoadTransposeMatrixfproc *)wglGetProcAddress("glLoadTransposeMatrixf");
    if (!glLoadTransposeMatrixf) {
        printf("Function glLoadTransposeMatrixf couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultTransposeMatrixd = (MultTransposeMatrixdproc *)wglGetProcAddress("glMultTransposeMatrixd");
    if (!glMultTransposeMatrixd) {
        printf("Function glMultTransposeMatrixd couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultTransposeMatrixf = (MultTransposeMatrixfproc *)wglGetProcAddress("glMultTransposeMatrixf");
    if (!glMultTransposeMatrixf) {
        printf("Function glMultTransposeMatrixf couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1d = (MultiTexCoord1dproc *)wglGetProcAddress("glMultiTexCoord1d");
    if (!glMultiTexCoord1d) {
        printf("Function glMultiTexCoord1d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1dv = (MultiTexCoord1dvproc *)wglGetProcAddress("glMultiTexCoord1dv");
    if (!glMultiTexCoord1dv) {
        printf("Function glMultiTexCoord1dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1f = (MultiTexCoord1fproc *)wglGetProcAddress("glMultiTexCoord1f");
    if (!glMultiTexCoord1f) {
        printf("Function glMultiTexCoord1f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1fv = (MultiTexCoord1fvproc *)wglGetProcAddress("glMultiTexCoord1fv");
    if (!glMultiTexCoord1fv) {
        printf("Function glMultiTexCoord1fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1i = (MultiTexCoord1iproc *)wglGetProcAddress("glMultiTexCoord1i");
    if (!glMultiTexCoord1i) {
        printf("Function glMultiTexCoord1i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1iv = (MultiTexCoord1ivproc *)wglGetProcAddress("glMultiTexCoord1iv");
    if (!glMultiTexCoord1iv) {
        printf("Function glMultiTexCoord1iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1s = (MultiTexCoord1sproc *)wglGetProcAddress("glMultiTexCoord1s");
    if (!glMultiTexCoord1s) {
        printf("Function glMultiTexCoord1s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord1sv = (MultiTexCoord1svproc *)wglGetProcAddress("glMultiTexCoord1sv");
    if (!glMultiTexCoord1sv) {
        printf("Function glMultiTexCoord1sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2d = (MultiTexCoord2dproc *)wglGetProcAddress("glMultiTexCoord2d");
    if (!glMultiTexCoord2d) {
        printf("Function glMultiTexCoord2d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2dv = (MultiTexCoord2dvproc *)wglGetProcAddress("glMultiTexCoord2dv");
    if (!glMultiTexCoord2dv) {
        printf("Function glMultiTexCoord2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2f = (MultiTexCoord2fproc *)wglGetProcAddress("glMultiTexCoord2f");
    if (!glMultiTexCoord2f) {
        printf("Function glMultiTexCoord2f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2fv = (MultiTexCoord2fvproc *)wglGetProcAddress("glMultiTexCoord2fv");
    if (!glMultiTexCoord2fv) {
        printf("Function glMultiTexCoord2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2i = (MultiTexCoord2iproc *)wglGetProcAddress("glMultiTexCoord2i");
    if (!glMultiTexCoord2i) {
        printf("Function glMultiTexCoord2i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2iv = (MultiTexCoord2ivproc *)wglGetProcAddress("glMultiTexCoord2iv");
    if (!glMultiTexCoord2iv) {
        printf("Function glMultiTexCoord2iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2s = (MultiTexCoord2sproc *)wglGetProcAddress("glMultiTexCoord2s");
    if (!glMultiTexCoord2s) {
        printf("Function glMultiTexCoord2s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord2sv = (MultiTexCoord2svproc *)wglGetProcAddress("glMultiTexCoord2sv");
    if (!glMultiTexCoord2sv) {
        printf("Function glMultiTexCoord2sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3d = (MultiTexCoord3dproc *)wglGetProcAddress("glMultiTexCoord3d");
    if (!glMultiTexCoord3d) {
        printf("Function glMultiTexCoord3d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3dv = (MultiTexCoord3dvproc *)wglGetProcAddress("glMultiTexCoord3dv");
    if (!glMultiTexCoord3dv) {
        printf("Function glMultiTexCoord3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3f = (MultiTexCoord3fproc *)wglGetProcAddress("glMultiTexCoord3f");
    if (!glMultiTexCoord3f) {
        printf("Function glMultiTexCoord3f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3fv = (MultiTexCoord3fvproc *)wglGetProcAddress("glMultiTexCoord3fv");
    if (!glMultiTexCoord3fv) {
        printf("Function glMultiTexCoord3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3i = (MultiTexCoord3iproc *)wglGetProcAddress("glMultiTexCoord3i");
    if (!glMultiTexCoord3i) {
        printf("Function glMultiTexCoord3i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3iv = (MultiTexCoord3ivproc *)wglGetProcAddress("glMultiTexCoord3iv");
    if (!glMultiTexCoord3iv) {
        printf("Function glMultiTexCoord3iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3s = (MultiTexCoord3sproc *)wglGetProcAddress("glMultiTexCoord3s");
    if (!glMultiTexCoord3s) {
        printf("Function glMultiTexCoord3s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord3sv = (MultiTexCoord3svproc *)wglGetProcAddress("glMultiTexCoord3sv");
    if (!glMultiTexCoord3sv) {
        printf("Function glMultiTexCoord3sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4d = (MultiTexCoord4dproc *)wglGetProcAddress("glMultiTexCoord4d");
    if (!glMultiTexCoord4d) {
        printf("Function glMultiTexCoord4d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4dv = (MultiTexCoord4dvproc *)wglGetProcAddress("glMultiTexCoord4dv");
    if (!glMultiTexCoord4dv) {
        printf("Function glMultiTexCoord4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4f = (MultiTexCoord4fproc *)wglGetProcAddress("glMultiTexCoord4f");
    if (!glMultiTexCoord4f) {
        printf("Function glMultiTexCoord4f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4fv = (MultiTexCoord4fvproc *)wglGetProcAddress("glMultiTexCoord4fv");
    if (!glMultiTexCoord4fv) {
        printf("Function glMultiTexCoord4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4i = (MultiTexCoord4iproc *)wglGetProcAddress("glMultiTexCoord4i");
    if (!glMultiTexCoord4i) {
        printf("Function glMultiTexCoord4i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4iv = (MultiTexCoord4ivproc *)wglGetProcAddress("glMultiTexCoord4iv");
    if (!glMultiTexCoord4iv) {
        printf("Function glMultiTexCoord4iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4s = (MultiTexCoord4sproc *)wglGetProcAddress("glMultiTexCoord4s");
    if (!glMultiTexCoord4s) {
        printf("Function glMultiTexCoord4s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiTexCoord4sv = (MultiTexCoord4svproc *)wglGetProcAddress("glMultiTexCoord4sv");
    if (!glMultiTexCoord4sv) {
        printf("Function glMultiTexCoord4sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSampleCoverage = (SampleCoverageproc *)wglGetProcAddress("glSampleCoverage");
    if (!glSampleCoverage) {
        printf("Function glSampleCoverage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendColor = (BlendColorproc *)wglGetProcAddress("glBlendColor");
    if (!glBlendColor) {
        printf("Function glBlendColor couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendEquation = (BlendEquationproc *)wglGetProcAddress("glBlendEquation");
    if (!glBlendEquation) {
        printf("Function glBlendEquation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendFuncSeparate = (BlendFuncSeparateproc *)wglGetProcAddress("glBlendFuncSeparate");
    if (!glBlendFuncSeparate) {
        printf("Function glBlendFuncSeparate couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFogCoordPointer = (FogCoordPointerproc *)wglGetProcAddress("glFogCoordPointer");
    if (!glFogCoordPointer) {
        printf("Function glFogCoordPointer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFogCoordd = (FogCoorddproc *)wglGetProcAddress("glFogCoordd");
    if (!glFogCoordd) {
        printf("Function glFogCoordd couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFogCoorddv = (FogCoorddvproc *)wglGetProcAddress("glFogCoorddv");
    if (!glFogCoorddv) {
        printf("Function glFogCoorddv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFogCoordf = (FogCoordfproc *)wglGetProcAddress("glFogCoordf");
    if (!glFogCoordf) {
        printf("Function glFogCoordf couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFogCoordfv = (FogCoordfvproc *)wglGetProcAddress("glFogCoordfv");
    if (!glFogCoordfv) {
        printf("Function glFogCoordfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiDrawArrays = (MultiDrawArraysproc *)wglGetProcAddress("glMultiDrawArrays");
    if (!glMultiDrawArrays) {
        printf("Function glMultiDrawArrays couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiDrawElements = (MultiDrawElementsproc *)wglGetProcAddress("glMultiDrawElements");
    if (!glMultiDrawElements) {
        printf("Function glMultiDrawElements couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPointParameterf = (PointParameterfproc *)wglGetProcAddress("glPointParameterf");
    if (!glPointParameterf) {
        printf("Function glPointParameterf couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPointParameterfv = (PointParameterfvproc *)wglGetProcAddress("glPointParameterfv");
    if (!glPointParameterfv) {
        printf("Function glPointParameterfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPointParameteri = (PointParameteriproc *)wglGetProcAddress("glPointParameteri");
    if (!glPointParameteri) {
        printf("Function glPointParameteri couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPointParameteriv = (PointParameterivproc *)wglGetProcAddress("glPointParameteriv");
    if (!glPointParameteriv) {
        printf("Function glPointParameteriv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3b = (SecondaryColor3bproc *)wglGetProcAddress("glSecondaryColor3b");
    if (!glSecondaryColor3b) {
        printf("Function glSecondaryColor3b couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3bv = (SecondaryColor3bvproc *)wglGetProcAddress("glSecondaryColor3bv");
    if (!glSecondaryColor3bv) {
        printf("Function glSecondaryColor3bv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3d = (SecondaryColor3dproc *)wglGetProcAddress("glSecondaryColor3d");
    if (!glSecondaryColor3d) {
        printf("Function glSecondaryColor3d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3dv = (SecondaryColor3dvproc *)wglGetProcAddress("glSecondaryColor3dv");
    if (!glSecondaryColor3dv) {
        printf("Function glSecondaryColor3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3f = (SecondaryColor3fproc *)wglGetProcAddress("glSecondaryColor3f");
    if (!glSecondaryColor3f) {
        printf("Function glSecondaryColor3f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3fv = (SecondaryColor3fvproc *)wglGetProcAddress("glSecondaryColor3fv");
    if (!glSecondaryColor3fv) {
        printf("Function glSecondaryColor3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3i = (SecondaryColor3iproc *)wglGetProcAddress("glSecondaryColor3i");
    if (!glSecondaryColor3i) {
        printf("Function glSecondaryColor3i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3iv = (SecondaryColor3ivproc *)wglGetProcAddress("glSecondaryColor3iv");
    if (!glSecondaryColor3iv) {
        printf("Function glSecondaryColor3iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3s = (SecondaryColor3sproc *)wglGetProcAddress("glSecondaryColor3s");
    if (!glSecondaryColor3s) {
        printf("Function glSecondaryColor3s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3sv = (SecondaryColor3svproc *)wglGetProcAddress("glSecondaryColor3sv");
    if (!glSecondaryColor3sv) {
        printf("Function glSecondaryColor3sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3ub = (SecondaryColor3ubproc *)wglGetProcAddress("glSecondaryColor3ub");
    if (!glSecondaryColor3ub) {
        printf("Function glSecondaryColor3ub couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3ubv = (SecondaryColor3ubvproc *)wglGetProcAddress("glSecondaryColor3ubv");
    if (!glSecondaryColor3ubv) {
        printf("Function glSecondaryColor3ubv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3ui = (SecondaryColor3uiproc *)wglGetProcAddress("glSecondaryColor3ui");
    if (!glSecondaryColor3ui) {
        printf("Function glSecondaryColor3ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3uiv = (SecondaryColor3uivproc *)wglGetProcAddress("glSecondaryColor3uiv");
    if (!glSecondaryColor3uiv) {
        printf("Function glSecondaryColor3uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3us = (SecondaryColor3usproc *)wglGetProcAddress("glSecondaryColor3us");
    if (!glSecondaryColor3us) {
        printf("Function glSecondaryColor3us couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColor3usv = (SecondaryColor3usvproc *)wglGetProcAddress("glSecondaryColor3usv");
    if (!glSecondaryColor3usv) {
        printf("Function glSecondaryColor3usv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSecondaryColorPointer = (SecondaryColorPointerproc *)wglGetProcAddress("glSecondaryColorPointer");
    if (!glSecondaryColorPointer) {
        printf("Function glSecondaryColorPointer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2d = (WindowPos2dproc *)wglGetProcAddress("glWindowPos2d");
    if (!glWindowPos2d) {
        printf("Function glWindowPos2d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2dv = (WindowPos2dvproc *)wglGetProcAddress("glWindowPos2dv");
    if (!glWindowPos2dv) {
        printf("Function glWindowPos2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2f = (WindowPos2fproc *)wglGetProcAddress("glWindowPos2f");
    if (!glWindowPos2f) {
        printf("Function glWindowPos2f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2fv = (WindowPos2fvproc *)wglGetProcAddress("glWindowPos2fv");
    if (!glWindowPos2fv) {
        printf("Function glWindowPos2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2i = (WindowPos2iproc *)wglGetProcAddress("glWindowPos2i");
    if (!glWindowPos2i) {
        printf("Function glWindowPos2i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2iv = (WindowPos2ivproc *)wglGetProcAddress("glWindowPos2iv");
    if (!glWindowPos2iv) {
        printf("Function glWindowPos2iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2s = (WindowPos2sproc *)wglGetProcAddress("glWindowPos2s");
    if (!glWindowPos2s) {
        printf("Function glWindowPos2s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos2sv = (WindowPos2svproc *)wglGetProcAddress("glWindowPos2sv");
    if (!glWindowPos2sv) {
        printf("Function glWindowPos2sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3d = (WindowPos3dproc *)wglGetProcAddress("glWindowPos3d");
    if (!glWindowPos3d) {
        printf("Function glWindowPos3d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3dv = (WindowPos3dvproc *)wglGetProcAddress("glWindowPos3dv");
    if (!glWindowPos3dv) {
        printf("Function glWindowPos3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3f = (WindowPos3fproc *)wglGetProcAddress("glWindowPos3f");
    if (!glWindowPos3f) {
        printf("Function glWindowPos3f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3fv = (WindowPos3fvproc *)wglGetProcAddress("glWindowPos3fv");
    if (!glWindowPos3fv) {
        printf("Function glWindowPos3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3i = (WindowPos3iproc *)wglGetProcAddress("glWindowPos3i");
    if (!glWindowPos3i) {
        printf("Function glWindowPos3i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3iv = (WindowPos3ivproc *)wglGetProcAddress("glWindowPos3iv");
    if (!glWindowPos3iv) {
        printf("Function glWindowPos3iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3s = (WindowPos3sproc *)wglGetProcAddress("glWindowPos3s");
    if (!glWindowPos3s) {
        printf("Function glWindowPos3s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWindowPos3sv = (WindowPos3svproc *)wglGetProcAddress("glWindowPos3sv");
    if (!glWindowPos3sv) {
        printf("Function glWindowPos3sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBeginQuery = (BeginQueryproc *)wglGetProcAddress("glBeginQuery");
    if (!glBeginQuery) {
        printf("Function glBeginQuery couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindBuffer = (BindBufferproc *)wglGetProcAddress("glBindBuffer");
    if (!glBindBuffer) {
        printf("Function glBindBuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBufferData = (BufferDataproc *)wglGetProcAddress("glBufferData");
    if (!glBufferData) {
        printf("Function glBufferData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBufferSubData = (BufferSubDataproc *)wglGetProcAddress("glBufferSubData");
    if (!glBufferSubData) {
        printf("Function glBufferSubData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteBuffers = (DeleteBuffersproc *)wglGetProcAddress("glDeleteBuffers");
    if (!glDeleteBuffers) {
        printf("Function glDeleteBuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteQueries = (DeleteQueriesproc *)wglGetProcAddress("glDeleteQueries");
    if (!glDeleteQueries) {
        printf("Function glDeleteQueries couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glEndQuery = (EndQueryproc *)wglGetProcAddress("glEndQuery");
    if (!glEndQuery) {
        printf("Function glEndQuery couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenBuffers = (GenBuffersproc *)wglGetProcAddress("glGenBuffers");
    if (!glGenBuffers) {
        printf("Function glGenBuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenQueries = (GenQueriesproc *)wglGetProcAddress("glGenQueries");
    if (!glGenQueries) {
        printf("Function glGenQueries couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetBufferParameteriv = (GetBufferParameterivproc *)wglGetProcAddress("glGetBufferParameteriv");
    if (!glGetBufferParameteriv) {
        printf("Function glGetBufferParameteriv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetBufferPointerv = (GetBufferPointervproc *)wglGetProcAddress("glGetBufferPointerv");
    if (!glGetBufferPointerv) {
        printf("Function glGetBufferPointerv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetBufferSubData = (GetBufferSubDataproc *)wglGetProcAddress("glGetBufferSubData");
    if (!glGetBufferSubData) {
        printf("Function glGetBufferSubData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetQueryObjectiv = (GetQueryObjectivproc *)wglGetProcAddress("glGetQueryObjectiv");
    if (!glGetQueryObjectiv) {
        printf("Function glGetQueryObjectiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetQueryObjectuiv = (GetQueryObjectuivproc *)wglGetProcAddress("glGetQueryObjectuiv");
    if (!glGetQueryObjectuiv) {
        printf("Function glGetQueryObjectuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetQueryiv = (GetQueryivproc *)wglGetProcAddress("glGetQueryiv");
    if (!glGetQueryiv) {
        printf("Function glGetQueryiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsBuffer = (IsBufferproc *)wglGetProcAddress("glIsBuffer");
    if (!glIsBuffer) {
        printf("Function glIsBuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsQuery = (IsQueryproc *)wglGetProcAddress("glIsQuery");
    if (!glIsQuery) {
        printf("Function glIsQuery couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMapBuffer = (MapBufferproc *)wglGetProcAddress("glMapBuffer");
    if (!glMapBuffer) {
        printf("Function glMapBuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUnmapBuffer = (UnmapBufferproc *)wglGetProcAddress("glUnmapBuffer");
    if (!glUnmapBuffer) {
        printf("Function glUnmapBuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glAttachShader = (AttachShaderproc *)wglGetProcAddress("glAttachShader");
    if (!glAttachShader) {
        printf("Function glAttachShader couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindAttribLocation = (BindAttribLocationproc *)wglGetProcAddress("glBindAttribLocation");
    if (!glBindAttribLocation) {
        printf("Function glBindAttribLocation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendEquationSeparate = (BlendEquationSeparateproc *)wglGetProcAddress("glBlendEquationSeparate");
    if (!glBlendEquationSeparate) {
        printf("Function glBlendEquationSeparate couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCompileShader = (CompileShaderproc *)wglGetProcAddress("glCompileShader");
    if (!glCompileShader) {
        printf("Function glCompileShader couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCreateProgram = (CreateProgramproc *)wglGetProcAddress("glCreateProgram");
    if (!glCreateProgram) {
        printf("Function glCreateProgram couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCreateShader = (CreateShaderproc *)wglGetProcAddress("glCreateShader");
    if (!glCreateShader) {
        printf("Function glCreateShader couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteProgram = (DeleteProgramproc *)wglGetProcAddress("glDeleteProgram");
    if (!glDeleteProgram) {
        printf("Function glDeleteProgram couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteShader = (DeleteShaderproc *)wglGetProcAddress("glDeleteShader");
    if (!glDeleteShader) {
        printf("Function glDeleteShader couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDetachShader = (DetachShaderproc *)wglGetProcAddress("glDetachShader");
    if (!glDetachShader) {
        printf("Function glDetachShader couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDisableVertexAttribArray = (DisableVertexAttribArrayproc *)wglGetProcAddress("glDisableVertexAttribArray");
    if (!glDisableVertexAttribArray) {
        printf("Function glDisableVertexAttribArray couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawBuffers = (DrawBuffersproc *)wglGetProcAddress("glDrawBuffers");
    if (!glDrawBuffers) {
        printf("Function glDrawBuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glEnableVertexAttribArray = (EnableVertexAttribArrayproc *)wglGetProcAddress("glEnableVertexAttribArray");
    if (!glEnableVertexAttribArray) {
        printf("Function glEnableVertexAttribArray couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveAttrib = (GetActiveAttribproc *)wglGetProcAddress("glGetActiveAttrib");
    if (!glGetActiveAttrib) {
        printf("Function glGetActiveAttrib couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveUniform = (GetActiveUniformproc *)wglGetProcAddress("glGetActiveUniform");
    if (!glGetActiveUniform) {
        printf("Function glGetActiveUniform couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetAttachedShaders = (GetAttachedShadersproc *)wglGetProcAddress("glGetAttachedShaders");
    if (!glGetAttachedShaders) {
        printf("Function glGetAttachedShaders couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetAttribLocation = (GetAttribLocationproc *)wglGetProcAddress("glGetAttribLocation");
    if (!glGetAttribLocation) {
        printf("Function glGetAttribLocation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramInfoLog = (GetProgramInfoLogproc *)wglGetProcAddress("glGetProgramInfoLog");
    if (!glGetProgramInfoLog) {
        printf("Function glGetProgramInfoLog couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramiv = (GetProgramivproc *)wglGetProcAddress("glGetProgramiv");
    if (!glGetProgramiv) {
        printf("Function glGetProgramiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetShaderInfoLog = (GetShaderInfoLogproc *)wglGetProcAddress("glGetShaderInfoLog");
    if (!glGetShaderInfoLog) {
        printf("Function glGetShaderInfoLog couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetShaderSource = (GetShaderSourceproc *)wglGetProcAddress("glGetShaderSource");
    if (!glGetShaderSource) {
        printf("Function glGetShaderSource couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetShaderiv = (GetShaderivproc *)wglGetProcAddress("glGetShaderiv");
    if (!glGetShaderiv) {
        printf("Function glGetShaderiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformLocation = (GetUniformLocationproc *)wglGetProcAddress("glGetUniformLocation");
    if (!glGetUniformLocation) {
        printf("Function glGetUniformLocation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformfv = (GetUniformfvproc *)wglGetProcAddress("glGetUniformfv");
    if (!glGetUniformfv) {
        printf("Function glGetUniformfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformiv = (GetUniformivproc *)wglGetProcAddress("glGetUniformiv");
    if (!glGetUniformiv) {
        printf("Function glGetUniformiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetVertexAttribPointerv = (GetVertexAttribPointervproc *)wglGetProcAddress("glGetVertexAttribPointerv");
    if (!glGetVertexAttribPointerv) {
        printf("Function glGetVertexAttribPointerv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetVertexAttribdv = (GetVertexAttribdvproc *)wglGetProcAddress("glGetVertexAttribdv");
    if (!glGetVertexAttribdv) {
        printf("Function glGetVertexAttribdv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetVertexAttribfv = (GetVertexAttribfvproc *)wglGetProcAddress("glGetVertexAttribfv");
    if (!glGetVertexAttribfv) {
        printf("Function glGetVertexAttribfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetVertexAttribiv = (GetVertexAttribivproc *)wglGetProcAddress("glGetVertexAttribiv");
    if (!glGetVertexAttribiv) {
        printf("Function glGetVertexAttribiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsProgram = (IsProgramproc *)wglGetProcAddress("glIsProgram");
    if (!glIsProgram) {
        printf("Function glIsProgram couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsShader = (IsShaderproc *)wglGetProcAddress("glIsShader");
    if (!glIsShader) {
        printf("Function glIsShader couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glLinkProgram = (LinkProgramproc *)wglGetProcAddress("glLinkProgram");
    if (!glLinkProgram) {
        printf("Function glLinkProgram couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glShaderSource = (ShaderSourceproc *)wglGetProcAddress("glShaderSource");
    if (!glShaderSource) {
        printf("Function glShaderSource couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glStencilFuncSeparate = (StencilFuncSeparateproc *)wglGetProcAddress("glStencilFuncSeparate");
    if (!glStencilFuncSeparate) {
        printf("Function glStencilFuncSeparate couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glStencilMaskSeparate = (StencilMaskSeparateproc *)wglGetProcAddress("glStencilMaskSeparate");
    if (!glStencilMaskSeparate) {
        printf("Function glStencilMaskSeparate couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glStencilOpSeparate = (StencilOpSeparateproc *)wglGetProcAddress("glStencilOpSeparate");
    if (!glStencilOpSeparate) {
        printf("Function glStencilOpSeparate couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1f = (Uniform1fproc *)wglGetProcAddress("glUniform1f");
    if (!glUniform1f) {
        printf("Function glUniform1f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1fv = (Uniform1fvproc *)wglGetProcAddress("glUniform1fv");
    if (!glUniform1fv) {
        printf("Function glUniform1fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1i = (Uniform1iproc *)wglGetProcAddress("glUniform1i");
    if (!glUniform1i) {
        printf("Function glUniform1i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1iv = (Uniform1ivproc *)wglGetProcAddress("glUniform1iv");
    if (!glUniform1iv) {
        printf("Function glUniform1iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2f = (Uniform2fproc *)wglGetProcAddress("glUniform2f");
    if (!glUniform2f) {
        printf("Function glUniform2f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2fv = (Uniform2fvproc *)wglGetProcAddress("glUniform2fv");
    if (!glUniform2fv) {
        printf("Function glUniform2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2i = (Uniform2iproc *)wglGetProcAddress("glUniform2i");
    if (!glUniform2i) {
        printf("Function glUniform2i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2iv = (Uniform2ivproc *)wglGetProcAddress("glUniform2iv");
    if (!glUniform2iv) {
        printf("Function glUniform2iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3f = (Uniform3fproc *)wglGetProcAddress("glUniform3f");
    if (!glUniform3f) {
        printf("Function glUniform3f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3fv = (Uniform3fvproc *)wglGetProcAddress("glUniform3fv");
    if (!glUniform3fv) {
        printf("Function glUniform3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3i = (Uniform3iproc *)wglGetProcAddress("glUniform3i");
    if (!glUniform3i) {
        printf("Function glUniform3i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3iv = (Uniform3ivproc *)wglGetProcAddress("glUniform3iv");
    if (!glUniform3iv) {
        printf("Function glUniform3iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4f = (Uniform4fproc *)wglGetProcAddress("glUniform4f");
    if (!glUniform4f) {
        printf("Function glUniform4f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4fv = (Uniform4fvproc *)wglGetProcAddress("glUniform4fv");
    if (!glUniform4fv) {
        printf("Function glUniform4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4i = (Uniform4iproc *)wglGetProcAddress("glUniform4i");
    if (!glUniform4i) {
        printf("Function glUniform4i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4iv = (Uniform4ivproc *)wglGetProcAddress("glUniform4iv");
    if (!glUniform4iv) {
        printf("Function glUniform4iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix2fv = (UniformMatrix2fvproc *)wglGetProcAddress("glUniformMatrix2fv");
    if (!glUniformMatrix2fv) {
        printf("Function glUniformMatrix2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix3fv = (UniformMatrix3fvproc *)wglGetProcAddress("glUniformMatrix3fv");
    if (!glUniformMatrix3fv) {
        printf("Function glUniformMatrix3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix4fv = (UniformMatrix4fvproc *)wglGetProcAddress("glUniformMatrix4fv");
    if (!glUniformMatrix4fv) {
        printf("Function glUniformMatrix4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUseProgram = (UseProgramproc *)wglGetProcAddress("glUseProgram");
    if (!glUseProgram) {
        printf("Function glUseProgram couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glValidateProgram = (ValidateProgramproc *)wglGetProcAddress("glValidateProgram");
    if (!glValidateProgram) {
        printf("Function glValidateProgram couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib1d = (VertexAttrib1dproc *)wglGetProcAddress("glVertexAttrib1d");
    if (!glVertexAttrib1d) {
        printf("Function glVertexAttrib1d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib1dv = (VertexAttrib1dvproc *)wglGetProcAddress("glVertexAttrib1dv");
    if (!glVertexAttrib1dv) {
        printf("Function glVertexAttrib1dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib1f = (VertexAttrib1fproc *)wglGetProcAddress("glVertexAttrib1f");
    if (!glVertexAttrib1f) {
        printf("Function glVertexAttrib1f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib1fv = (VertexAttrib1fvproc *)wglGetProcAddress("glVertexAttrib1fv");
    if (!glVertexAttrib1fv) {
        printf("Function glVertexAttrib1fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib1s = (VertexAttrib1sproc *)wglGetProcAddress("glVertexAttrib1s");
    if (!glVertexAttrib1s) {
        printf("Function glVertexAttrib1s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib1sv = (VertexAttrib1svproc *)wglGetProcAddress("glVertexAttrib1sv");
    if (!glVertexAttrib1sv) {
        printf("Function glVertexAttrib1sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib2d = (VertexAttrib2dproc *)wglGetProcAddress("glVertexAttrib2d");
    if (!glVertexAttrib2d) {
        printf("Function glVertexAttrib2d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib2dv = (VertexAttrib2dvproc *)wglGetProcAddress("glVertexAttrib2dv");
    if (!glVertexAttrib2dv) {
        printf("Function glVertexAttrib2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib2f = (VertexAttrib2fproc *)wglGetProcAddress("glVertexAttrib2f");
    if (!glVertexAttrib2f) {
        printf("Function glVertexAttrib2f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib2fv = (VertexAttrib2fvproc *)wglGetProcAddress("glVertexAttrib2fv");
    if (!glVertexAttrib2fv) {
        printf("Function glVertexAttrib2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib2s = (VertexAttrib2sproc *)wglGetProcAddress("glVertexAttrib2s");
    if (!glVertexAttrib2s) {
        printf("Function glVertexAttrib2s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib2sv = (VertexAttrib2svproc *)wglGetProcAddress("glVertexAttrib2sv");
    if (!glVertexAttrib2sv) {
        printf("Function glVertexAttrib2sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib3d = (VertexAttrib3dproc *)wglGetProcAddress("glVertexAttrib3d");
    if (!glVertexAttrib3d) {
        printf("Function glVertexAttrib3d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib3dv = (VertexAttrib3dvproc *)wglGetProcAddress("glVertexAttrib3dv");
    if (!glVertexAttrib3dv) {
        printf("Function glVertexAttrib3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib3f = (VertexAttrib3fproc *)wglGetProcAddress("glVertexAttrib3f");
    if (!glVertexAttrib3f) {
        printf("Function glVertexAttrib3f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib3fv = (VertexAttrib3fvproc *)wglGetProcAddress("glVertexAttrib3fv");
    if (!glVertexAttrib3fv) {
        printf("Function glVertexAttrib3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib3s = (VertexAttrib3sproc *)wglGetProcAddress("glVertexAttrib3s");
    if (!glVertexAttrib3s) {
        printf("Function glVertexAttrib3s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib3sv = (VertexAttrib3svproc *)wglGetProcAddress("glVertexAttrib3sv");
    if (!glVertexAttrib3sv) {
        printf("Function glVertexAttrib3sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4Nbv = (VertexAttrib4Nbvproc *)wglGetProcAddress("glVertexAttrib4Nbv");
    if (!glVertexAttrib4Nbv) {
        printf("Function glVertexAttrib4Nbv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4Niv = (VertexAttrib4Nivproc *)wglGetProcAddress("glVertexAttrib4Niv");
    if (!glVertexAttrib4Niv) {
        printf("Function glVertexAttrib4Niv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4Nsv = (VertexAttrib4Nsvproc *)wglGetProcAddress("glVertexAttrib4Nsv");
    if (!glVertexAttrib4Nsv) {
        printf("Function glVertexAttrib4Nsv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4Nub = (VertexAttrib4Nubproc *)wglGetProcAddress("glVertexAttrib4Nub");
    if (!glVertexAttrib4Nub) {
        printf("Function glVertexAttrib4Nub couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4Nubv = (VertexAttrib4Nubvproc *)wglGetProcAddress("glVertexAttrib4Nubv");
    if (!glVertexAttrib4Nubv) {
        printf("Function glVertexAttrib4Nubv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4Nuiv = (VertexAttrib4Nuivproc *)wglGetProcAddress("glVertexAttrib4Nuiv");
    if (!glVertexAttrib4Nuiv) {
        printf("Function glVertexAttrib4Nuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4Nusv = (VertexAttrib4Nusvproc *)wglGetProcAddress("glVertexAttrib4Nusv");
    if (!glVertexAttrib4Nusv) {
        printf("Function glVertexAttrib4Nusv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4bv = (VertexAttrib4bvproc *)wglGetProcAddress("glVertexAttrib4bv");
    if (!glVertexAttrib4bv) {
        printf("Function glVertexAttrib4bv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4d = (VertexAttrib4dproc *)wglGetProcAddress("glVertexAttrib4d");
    if (!glVertexAttrib4d) {
        printf("Function glVertexAttrib4d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4dv = (VertexAttrib4dvproc *)wglGetProcAddress("glVertexAttrib4dv");
    if (!glVertexAttrib4dv) {
        printf("Function glVertexAttrib4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4f = (VertexAttrib4fproc *)wglGetProcAddress("glVertexAttrib4f");
    if (!glVertexAttrib4f) {
        printf("Function glVertexAttrib4f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4fv = (VertexAttrib4fvproc *)wglGetProcAddress("glVertexAttrib4fv");
    if (!glVertexAttrib4fv) {
        printf("Function glVertexAttrib4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4iv = (VertexAttrib4ivproc *)wglGetProcAddress("glVertexAttrib4iv");
    if (!glVertexAttrib4iv) {
        printf("Function glVertexAttrib4iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4s = (VertexAttrib4sproc *)wglGetProcAddress("glVertexAttrib4s");
    if (!glVertexAttrib4s) {
        printf("Function glVertexAttrib4s couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4sv = (VertexAttrib4svproc *)wglGetProcAddress("glVertexAttrib4sv");
    if (!glVertexAttrib4sv) {
        printf("Function glVertexAttrib4sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4ubv = (VertexAttrib4ubvproc *)wglGetProcAddress("glVertexAttrib4ubv");
    if (!glVertexAttrib4ubv) {
        printf("Function glVertexAttrib4ubv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4uiv = (VertexAttrib4uivproc *)wglGetProcAddress("glVertexAttrib4uiv");
    if (!glVertexAttrib4uiv) {
        printf("Function glVertexAttrib4uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttrib4usv = (VertexAttrib4usvproc *)wglGetProcAddress("glVertexAttrib4usv");
    if (!glVertexAttrib4usv) {
        printf("Function glVertexAttrib4usv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribPointer = (VertexAttribPointerproc *)wglGetProcAddress("glVertexAttribPointer");
    if (!glVertexAttribPointer) {
        printf("Function glVertexAttribPointer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix2x3fv = (UniformMatrix2x3fvproc *)wglGetProcAddress("glUniformMatrix2x3fv");
    if (!glUniformMatrix2x3fv) {
        printf("Function glUniformMatrix2x3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix2x4fv = (UniformMatrix2x4fvproc *)wglGetProcAddress("glUniformMatrix2x4fv");
    if (!glUniformMatrix2x4fv) {
        printf("Function glUniformMatrix2x4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix3x2fv = (UniformMatrix3x2fvproc *)wglGetProcAddress("glUniformMatrix3x2fv");
    if (!glUniformMatrix3x2fv) {
        printf("Function glUniformMatrix3x2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix3x4fv = (UniformMatrix3x4fvproc *)wglGetProcAddress("glUniformMatrix3x4fv");
    if (!glUniformMatrix3x4fv) {
        printf("Function glUniformMatrix3x4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix4x2fv = (UniformMatrix4x2fvproc *)wglGetProcAddress("glUniformMatrix4x2fv");
    if (!glUniformMatrix4x2fv) {
        printf("Function glUniformMatrix4x2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix4x3fv = (UniformMatrix4x3fvproc *)wglGetProcAddress("glUniformMatrix4x3fv");
    if (!glUniformMatrix4x3fv) {
        printf("Function glUniformMatrix4x3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBeginConditionalRender = (BeginConditionalRenderproc *)wglGetProcAddress("glBeginConditionalRender");
    if (!glBeginConditionalRender) {
        printf("Function glBeginConditionalRender couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBeginTransformFeedback = (BeginTransformFeedbackproc *)wglGetProcAddress("glBeginTransformFeedback");
    if (!glBeginTransformFeedback) {
        printf("Function glBeginTransformFeedback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindBufferBase = (BindBufferBaseproc *)wglGetProcAddress("glBindBufferBase");
    if (!glBindBufferBase) {
        printf("Function glBindBufferBase couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindBufferRange = (BindBufferRangeproc *)wglGetProcAddress("glBindBufferRange");
    if (!glBindBufferRange) {
        printf("Function glBindBufferRange couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindFragDataLocation = (BindFragDataLocationproc *)wglGetProcAddress("glBindFragDataLocation");
    if (!glBindFragDataLocation) {
        printf("Function glBindFragDataLocation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindFramebuffer = (BindFramebufferproc *)wglGetProcAddress("glBindFramebuffer");
    if (!glBindFramebuffer) {
        printf("Function glBindFramebuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindRenderbuffer = (BindRenderbufferproc *)wglGetProcAddress("glBindRenderbuffer");
    if (!glBindRenderbuffer) {
        printf("Function glBindRenderbuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindVertexArray = (BindVertexArrayproc *)wglGetProcAddress("glBindVertexArray");
    if (!glBindVertexArray) {
        printf("Function glBindVertexArray couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlitFramebuffer = (BlitFramebufferproc *)wglGetProcAddress("glBlitFramebuffer");
    if (!glBlitFramebuffer) {
        printf("Function glBlitFramebuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCheckFramebufferStatus = (CheckFramebufferStatusproc *)wglGetProcAddress("glCheckFramebufferStatus");
    if (!glCheckFramebufferStatus) {
        printf("Function glCheckFramebufferStatus couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClampColor = (ClampColorproc *)wglGetProcAddress("glClampColor");
    if (!glClampColor) {
        printf("Function glClampColor couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearBufferfi = (ClearBufferfiproc *)wglGetProcAddress("glClearBufferfi");
    if (!glClearBufferfi) {
        printf("Function glClearBufferfi couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearBufferfv = (ClearBufferfvproc *)wglGetProcAddress("glClearBufferfv");
    if (!glClearBufferfv) {
        printf("Function glClearBufferfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearBufferiv = (ClearBufferivproc *)wglGetProcAddress("glClearBufferiv");
    if (!glClearBufferiv) {
        printf("Function glClearBufferiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearBufferuiv = (ClearBufferuivproc *)wglGetProcAddress("glClearBufferuiv");
    if (!glClearBufferuiv) {
        printf("Function glClearBufferuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glColorMaski = (ColorMaskiproc *)wglGetProcAddress("glColorMaski");
    if (!glColorMaski) {
        printf("Function glColorMaski couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteFramebuffers = (DeleteFramebuffersproc *)wglGetProcAddress("glDeleteFramebuffers");
    if (!glDeleteFramebuffers) {
        printf("Function glDeleteFramebuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteRenderbuffers = (DeleteRenderbuffersproc *)wglGetProcAddress("glDeleteRenderbuffers");
    if (!glDeleteRenderbuffers) {
        printf("Function glDeleteRenderbuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteVertexArrays = (DeleteVertexArraysproc *)wglGetProcAddress("glDeleteVertexArrays");
    if (!glDeleteVertexArrays) {
        printf("Function glDeleteVertexArrays couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDisablei = (Disableiproc *)wglGetProcAddress("glDisablei");
    if (!glDisablei) {
        printf("Function glDisablei couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glEnablei = (Enableiproc *)wglGetProcAddress("glEnablei");
    if (!glEnablei) {
        printf("Function glEnablei couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glEndConditionalRender = (EndConditionalRenderproc *)wglGetProcAddress("glEndConditionalRender");
    if (!glEndConditionalRender) {
        printf("Function glEndConditionalRender couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glEndTransformFeedback = (EndTransformFeedbackproc *)wglGetProcAddress("glEndTransformFeedback");
    if (!glEndTransformFeedback) {
        printf("Function glEndTransformFeedback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFlushMappedBufferRange = (FlushMappedBufferRangeproc *)wglGetProcAddress("glFlushMappedBufferRange");
    if (!glFlushMappedBufferRange) {
        printf("Function glFlushMappedBufferRange couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFramebufferRenderbuffer = (FramebufferRenderbufferproc *)wglGetProcAddress("glFramebufferRenderbuffer");
    if (!glFramebufferRenderbuffer) {
        printf("Function glFramebufferRenderbuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFramebufferTexture1D = (FramebufferTexture1Dproc *)wglGetProcAddress("glFramebufferTexture1D");
    if (!glFramebufferTexture1D) {
        printf("Function glFramebufferTexture1D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFramebufferTexture2D = (FramebufferTexture2Dproc *)wglGetProcAddress("glFramebufferTexture2D");
    if (!glFramebufferTexture2D) {
        printf("Function glFramebufferTexture2D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFramebufferTexture3D = (FramebufferTexture3Dproc *)wglGetProcAddress("glFramebufferTexture3D");
    if (!glFramebufferTexture3D) {
        printf("Function glFramebufferTexture3D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFramebufferTextureLayer = (FramebufferTextureLayerproc *)wglGetProcAddress("glFramebufferTextureLayer");
    if (!glFramebufferTextureLayer) {
        printf("Function glFramebufferTextureLayer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenFramebuffers = (GenFramebuffersproc *)wglGetProcAddress("glGenFramebuffers");
    if (!glGenFramebuffers) {
        printf("Function glGenFramebuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenRenderbuffers = (GenRenderbuffersproc *)wglGetProcAddress("glGenRenderbuffers");
    if (!glGenRenderbuffers) {
        printf("Function glGenRenderbuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenVertexArrays = (GenVertexArraysproc *)wglGetProcAddress("glGenVertexArrays");
    if (!glGenVertexArrays) {
        printf("Function glGenVertexArrays couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenerateMipmap = (GenerateMipmapproc *)wglGetProcAddress("glGenerateMipmap");
    if (!glGenerateMipmap) {
        printf("Function glGenerateMipmap couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetBooleani_v = (GetBooleani_vproc *)wglGetProcAddress("glGetBooleani_v");
    if (!glGetBooleani_v) {
        printf("Function glGetBooleani_v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetFragDataLocation = (GetFragDataLocationproc *)wglGetProcAddress("glGetFragDataLocation");
    if (!glGetFragDataLocation) {
        printf("Function glGetFragDataLocation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetFramebufferAttachmentParameteriv = (GetFramebufferAttachmentParameterivproc *)wglGetProcAddress("glGetFramebufferAttachmentParameteriv");
    if (!glGetFramebufferAttachmentParameteriv) {
        printf("Function glGetFramebufferAttachmentParameteriv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetIntegeri_v = (GetIntegeri_vproc *)wglGetProcAddress("glGetIntegeri_v");
    if (!glGetIntegeri_v) {
        printf("Function glGetIntegeri_v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetRenderbufferParameteriv = (GetRenderbufferParameterivproc *)wglGetProcAddress("glGetRenderbufferParameteriv");
    if (!glGetRenderbufferParameteriv) {
        printf("Function glGetRenderbufferParameteriv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetStringi = (GetStringiproc *)wglGetProcAddress("glGetStringi");
    if (!glGetStringi) {
        printf("Function glGetStringi couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetTexParameterIiv = (GetTexParameterIivproc *)wglGetProcAddress("glGetTexParameterIiv");
    if (!glGetTexParameterIiv) {
        printf("Function glGetTexParameterIiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetTexParameterIuiv = (GetTexParameterIuivproc *)wglGetProcAddress("glGetTexParameterIuiv");
    if (!glGetTexParameterIuiv) {
        printf("Function glGetTexParameterIuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetTransformFeedbackVarying = (GetTransformFeedbackVaryingproc *)wglGetProcAddress("glGetTransformFeedbackVarying");
    if (!glGetTransformFeedbackVarying) {
        printf("Function glGetTransformFeedbackVarying couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformuiv = (GetUniformuivproc *)wglGetProcAddress("glGetUniformuiv");
    if (!glGetUniformuiv) {
        printf("Function glGetUniformuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetVertexAttribIiv = (GetVertexAttribIivproc *)wglGetProcAddress("glGetVertexAttribIiv");
    if (!glGetVertexAttribIiv) {
        printf("Function glGetVertexAttribIiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetVertexAttribIuiv = (GetVertexAttribIuivproc *)wglGetProcAddress("glGetVertexAttribIuiv");
    if (!glGetVertexAttribIuiv) {
        printf("Function glGetVertexAttribIuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsEnabledi = (IsEnablediproc *)wglGetProcAddress("glIsEnabledi");
    if (!glIsEnabledi) {
        printf("Function glIsEnabledi couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsFramebuffer = (IsFramebufferproc *)wglGetProcAddress("glIsFramebuffer");
    if (!glIsFramebuffer) {
        printf("Function glIsFramebuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsRenderbuffer = (IsRenderbufferproc *)wglGetProcAddress("glIsRenderbuffer");
    if (!glIsRenderbuffer) {
        printf("Function glIsRenderbuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsVertexArray = (IsVertexArrayproc *)wglGetProcAddress("glIsVertexArray");
    if (!glIsVertexArray) {
        printf("Function glIsVertexArray couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMapBufferRange = (MapBufferRangeproc *)wglGetProcAddress("glMapBufferRange");
    if (!glMapBufferRange) {
        printf("Function glMapBufferRange couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glRenderbufferStorage = (RenderbufferStorageproc *)wglGetProcAddress("glRenderbufferStorage");
    if (!glRenderbufferStorage) {
        printf("Function glRenderbufferStorage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glRenderbufferStorageMultisample = (RenderbufferStorageMultisampleproc *)wglGetProcAddress("glRenderbufferStorageMultisample");
    if (!glRenderbufferStorageMultisample) {
        printf("Function glRenderbufferStorageMultisample couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexParameterIiv = (TexParameterIivproc *)wglGetProcAddress("glTexParameterIiv");
    if (!glTexParameterIiv) {
        printf("Function glTexParameterIiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexParameterIuiv = (TexParameterIuivproc *)wglGetProcAddress("glTexParameterIuiv");
    if (!glTexParameterIuiv) {
        printf("Function glTexParameterIuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTransformFeedbackVaryings = (TransformFeedbackVaryingsproc *)wglGetProcAddress("glTransformFeedbackVaryings");
    if (!glTransformFeedbackVaryings) {
        printf("Function glTransformFeedbackVaryings couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1ui = (Uniform1uiproc *)wglGetProcAddress("glUniform1ui");
    if (!glUniform1ui) {
        printf("Function glUniform1ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1uiv = (Uniform1uivproc *)wglGetProcAddress("glUniform1uiv");
    if (!glUniform1uiv) {
        printf("Function glUniform1uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2ui = (Uniform2uiproc *)wglGetProcAddress("glUniform2ui");
    if (!glUniform2ui) {
        printf("Function glUniform2ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2uiv = (Uniform2uivproc *)wglGetProcAddress("glUniform2uiv");
    if (!glUniform2uiv) {
        printf("Function glUniform2uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3ui = (Uniform3uiproc *)wglGetProcAddress("glUniform3ui");
    if (!glUniform3ui) {
        printf("Function glUniform3ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3uiv = (Uniform3uivproc *)wglGetProcAddress("glUniform3uiv");
    if (!glUniform3uiv) {
        printf("Function glUniform3uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4ui = (Uniform4uiproc *)wglGetProcAddress("glUniform4ui");
    if (!glUniform4ui) {
        printf("Function glUniform4ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4uiv = (Uniform4uivproc *)wglGetProcAddress("glUniform4uiv");
    if (!glUniform4uiv) {
        printf("Function glUniform4uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI1i = (VertexAttribI1iproc *)wglGetProcAddress("glVertexAttribI1i");
    if (!glVertexAttribI1i) {
        printf("Function glVertexAttribI1i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI1iv = (VertexAttribI1ivproc *)wglGetProcAddress("glVertexAttribI1iv");
    if (!glVertexAttribI1iv) {
        printf("Function glVertexAttribI1iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI1ui = (VertexAttribI1uiproc *)wglGetProcAddress("glVertexAttribI1ui");
    if (!glVertexAttribI1ui) {
        printf("Function glVertexAttribI1ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI1uiv = (VertexAttribI1uivproc *)wglGetProcAddress("glVertexAttribI1uiv");
    if (!glVertexAttribI1uiv) {
        printf("Function glVertexAttribI1uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI2i = (VertexAttribI2iproc *)wglGetProcAddress("glVertexAttribI2i");
    if (!glVertexAttribI2i) {
        printf("Function glVertexAttribI2i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI2iv = (VertexAttribI2ivproc *)wglGetProcAddress("glVertexAttribI2iv");
    if (!glVertexAttribI2iv) {
        printf("Function glVertexAttribI2iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI2ui = (VertexAttribI2uiproc *)wglGetProcAddress("glVertexAttribI2ui");
    if (!glVertexAttribI2ui) {
        printf("Function glVertexAttribI2ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI2uiv = (VertexAttribI2uivproc *)wglGetProcAddress("glVertexAttribI2uiv");
    if (!glVertexAttribI2uiv) {
        printf("Function glVertexAttribI2uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI3i = (VertexAttribI3iproc *)wglGetProcAddress("glVertexAttribI3i");
    if (!glVertexAttribI3i) {
        printf("Function glVertexAttribI3i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI3iv = (VertexAttribI3ivproc *)wglGetProcAddress("glVertexAttribI3iv");
    if (!glVertexAttribI3iv) {
        printf("Function glVertexAttribI3iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI3ui = (VertexAttribI3uiproc *)wglGetProcAddress("glVertexAttribI3ui");
    if (!glVertexAttribI3ui) {
        printf("Function glVertexAttribI3ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI3uiv = (VertexAttribI3uivproc *)wglGetProcAddress("glVertexAttribI3uiv");
    if (!glVertexAttribI3uiv) {
        printf("Function glVertexAttribI3uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4bv = (VertexAttribI4bvproc *)wglGetProcAddress("glVertexAttribI4bv");
    if (!glVertexAttribI4bv) {
        printf("Function glVertexAttribI4bv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4i = (VertexAttribI4iproc *)wglGetProcAddress("glVertexAttribI4i");
    if (!glVertexAttribI4i) {
        printf("Function glVertexAttribI4i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4iv = (VertexAttribI4ivproc *)wglGetProcAddress("glVertexAttribI4iv");
    if (!glVertexAttribI4iv) {
        printf("Function glVertexAttribI4iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4sv = (VertexAttribI4svproc *)wglGetProcAddress("glVertexAttribI4sv");
    if (!glVertexAttribI4sv) {
        printf("Function glVertexAttribI4sv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4ubv = (VertexAttribI4ubvproc *)wglGetProcAddress("glVertexAttribI4ubv");
    if (!glVertexAttribI4ubv) {
        printf("Function glVertexAttribI4ubv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4ui = (VertexAttribI4uiproc *)wglGetProcAddress("glVertexAttribI4ui");
    if (!glVertexAttribI4ui) {
        printf("Function glVertexAttribI4ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4uiv = (VertexAttribI4uivproc *)wglGetProcAddress("glVertexAttribI4uiv");
    if (!glVertexAttribI4uiv) {
        printf("Function glVertexAttribI4uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribI4usv = (VertexAttribI4usvproc *)wglGetProcAddress("glVertexAttribI4usv");
    if (!glVertexAttribI4usv) {
        printf("Function glVertexAttribI4usv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribIPointer = (VertexAttribIPointerproc *)wglGetProcAddress("glVertexAttribIPointer");
    if (!glVertexAttribIPointer) {
        printf("Function glVertexAttribIPointer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCopyBufferSubData = (CopyBufferSubDataproc *)wglGetProcAddress("glCopyBufferSubData");
    if (!glCopyBufferSubData) {
        printf("Function glCopyBufferSubData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawArraysInstanced = (DrawArraysInstancedproc *)wglGetProcAddress("glDrawArraysInstanced");
    if (!glDrawArraysInstanced) {
        printf("Function glDrawArraysInstanced couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawElementsInstanced = (DrawElementsInstancedproc *)wglGetProcAddress("glDrawElementsInstanced");
    if (!glDrawElementsInstanced) {
        printf("Function glDrawElementsInstanced couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveUniformBlockName = (GetActiveUniformBlockNameproc *)wglGetProcAddress("glGetActiveUniformBlockName");
    if (!glGetActiveUniformBlockName) {
        printf("Function glGetActiveUniformBlockName couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveUniformBlockiv = (GetActiveUniformBlockivproc *)wglGetProcAddress("glGetActiveUniformBlockiv");
    if (!glGetActiveUniformBlockiv) {
        printf("Function glGetActiveUniformBlockiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveUniformName = (GetActiveUniformNameproc *)wglGetProcAddress("glGetActiveUniformName");
    if (!glGetActiveUniformName) {
        printf("Function glGetActiveUniformName couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveUniformsiv = (GetActiveUniformsivproc *)wglGetProcAddress("glGetActiveUniformsiv");
    if (!glGetActiveUniformsiv) {
        printf("Function glGetActiveUniformsiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformBlockIndex = (GetUniformBlockIndexproc *)wglGetProcAddress("glGetUniformBlockIndex");
    if (!glGetUniformBlockIndex) {
        printf("Function glGetUniformBlockIndex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformIndices = (GetUniformIndicesproc *)wglGetProcAddress("glGetUniformIndices");
    if (!glGetUniformIndices) {
        printf("Function glGetUniformIndices couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPrimitiveRestartIndex = (PrimitiveRestartIndexproc *)wglGetProcAddress("glPrimitiveRestartIndex");
    if (!glPrimitiveRestartIndex) {
        printf("Function glPrimitiveRestartIndex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexBuffer = (TexBufferproc *)wglGetProcAddress("glTexBuffer");
    if (!glTexBuffer) {
        printf("Function glTexBuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformBlockBinding = (UniformBlockBindingproc *)wglGetProcAddress("glUniformBlockBinding");
    if (!glUniformBlockBinding) {
        printf("Function glUniformBlockBinding couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClientWaitSync = (ClientWaitSyncproc *)wglGetProcAddress("glClientWaitSync");
    if (!glClientWaitSync) {
        printf("Function glClientWaitSync couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteSync = (DeleteSyncproc *)wglGetProcAddress("glDeleteSync");
    if (!glDeleteSync) {
        printf("Function glDeleteSync couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawElementsBaseVertex = (DrawElementsBaseVertexproc *)wglGetProcAddress("glDrawElementsBaseVertex");
    if (!glDrawElementsBaseVertex) {
        printf("Function glDrawElementsBaseVertex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawElementsInstancedBaseVertex = (DrawElementsInstancedBaseVertexproc *)wglGetProcAddress("glDrawElementsInstancedBaseVertex");
    if (!glDrawElementsInstancedBaseVertex) {
        printf("Function glDrawElementsInstancedBaseVertex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawRangeElementsBaseVertex = (DrawRangeElementsBaseVertexproc *)wglGetProcAddress("glDrawRangeElementsBaseVertex");
    if (!glDrawRangeElementsBaseVertex) {
        printf("Function glDrawRangeElementsBaseVertex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFenceSync = (FenceSyncproc *)wglGetProcAddress("glFenceSync");
    if (!glFenceSync) {
        printf("Function glFenceSync couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFramebufferTexture = (FramebufferTextureproc *)wglGetProcAddress("glFramebufferTexture");
    if (!glFramebufferTexture) {
        printf("Function glFramebufferTexture couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetBufferParameteri64v = (GetBufferParameteri64vproc *)wglGetProcAddress("glGetBufferParameteri64v");
    if (!glGetBufferParameteri64v) {
        printf("Function glGetBufferParameteri64v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetInteger64i_v = (GetInteger64i_vproc *)wglGetProcAddress("glGetInteger64i_v");
    if (!glGetInteger64i_v) {
        printf("Function glGetInteger64i_v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetInteger64v = (GetInteger64vproc *)wglGetProcAddress("glGetInteger64v");
    if (!glGetInteger64v) {
        printf("Function glGetInteger64v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetMultisamplefv = (GetMultisamplefvproc *)wglGetProcAddress("glGetMultisamplefv");
    if (!glGetMultisamplefv) {
        printf("Function glGetMultisamplefv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetSynciv = (GetSyncivproc *)wglGetProcAddress("glGetSynciv");
    if (!glGetSynciv) {
        printf("Function glGetSynciv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsSync = (IsSyncproc *)wglGetProcAddress("glIsSync");
    if (!glIsSync) {
        printf("Function glIsSync couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiDrawElementsBaseVertex = (MultiDrawElementsBaseVertexproc *)wglGetProcAddress("glMultiDrawElementsBaseVertex");
    if (!glMultiDrawElementsBaseVertex) {
        printf("Function glMultiDrawElementsBaseVertex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProvokingVertex = (ProvokingVertexproc *)wglGetProcAddress("glProvokingVertex");
    if (!glProvokingVertex) {
        printf("Function glProvokingVertex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSampleMaski = (SampleMaskiproc *)wglGetProcAddress("glSampleMaski");
    if (!glSampleMaski) {
        printf("Function glSampleMaski couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexImage2DMultisample = (TexImage2DMultisampleproc *)wglGetProcAddress("glTexImage2DMultisample");
    if (!glTexImage2DMultisample) {
        printf("Function glTexImage2DMultisample couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexImage3DMultisample = (TexImage3DMultisampleproc *)wglGetProcAddress("glTexImage3DMultisample");
    if (!glTexImage3DMultisample) {
        printf("Function glTexImage3DMultisample couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glWaitSync = (WaitSyncproc *)wglGetProcAddress("glWaitSync");
    if (!glWaitSync) {
        printf("Function glWaitSync couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindFragDataLocationIndexed = (BindFragDataLocationIndexedproc *)wglGetProcAddress("glBindFragDataLocationIndexed");
    if (!glBindFragDataLocationIndexed) {
        printf("Function glBindFragDataLocationIndexed couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindSampler = (BindSamplerproc *)wglGetProcAddress("glBindSampler");
    if (!glBindSampler) {
        printf("Function glBindSampler couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteSamplers = (DeleteSamplersproc *)wglGetProcAddress("glDeleteSamplers");
    if (!glDeleteSamplers) {
        printf("Function glDeleteSamplers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenSamplers = (GenSamplersproc *)wglGetProcAddress("glGenSamplers");
    if (!glGenSamplers) {
        printf("Function glGenSamplers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetFragDataIndex = (GetFragDataIndexproc *)wglGetProcAddress("glGetFragDataIndex");
    if (!glGetFragDataIndex) {
        printf("Function glGetFragDataIndex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetQueryObjecti64v = (GetQueryObjecti64vproc *)wglGetProcAddress("glGetQueryObjecti64v");
    if (!glGetQueryObjecti64v) {
        printf("Function glGetQueryObjecti64v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetQueryObjectui64v = (GetQueryObjectui64vproc *)wglGetProcAddress("glGetQueryObjectui64v");
    if (!glGetQueryObjectui64v) {
        printf("Function glGetQueryObjectui64v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetSamplerParameterIiv = (GetSamplerParameterIivproc *)wglGetProcAddress("glGetSamplerParameterIiv");
    if (!glGetSamplerParameterIiv) {
        printf("Function glGetSamplerParameterIiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetSamplerParameterIuiv = (GetSamplerParameterIuivproc *)wglGetProcAddress("glGetSamplerParameterIuiv");
    if (!glGetSamplerParameterIuiv) {
        printf("Function glGetSamplerParameterIuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetSamplerParameterfv = (GetSamplerParameterfvproc *)wglGetProcAddress("glGetSamplerParameterfv");
    if (!glGetSamplerParameterfv) {
        printf("Function glGetSamplerParameterfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetSamplerParameteriv = (GetSamplerParameterivproc *)wglGetProcAddress("glGetSamplerParameteriv");
    if (!glGetSamplerParameteriv) {
        printf("Function glGetSamplerParameteriv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsSampler = (IsSamplerproc *)wglGetProcAddress("glIsSampler");
    if (!glIsSampler) {
        printf("Function glIsSampler couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glQueryCounter = (QueryCounterproc *)wglGetProcAddress("glQueryCounter");
    if (!glQueryCounter) {
        printf("Function glQueryCounter couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSamplerParameterIiv = (SamplerParameterIivproc *)wglGetProcAddress("glSamplerParameterIiv");
    if (!glSamplerParameterIiv) {
        printf("Function glSamplerParameterIiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSamplerParameterIuiv = (SamplerParameterIuivproc *)wglGetProcAddress("glSamplerParameterIuiv");
    if (!glSamplerParameterIuiv) {
        printf("Function glSamplerParameterIuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSamplerParameterf = (SamplerParameterfproc *)wglGetProcAddress("glSamplerParameterf");
    if (!glSamplerParameterf) {
        printf("Function glSamplerParameterf couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSamplerParameterfv = (SamplerParameterfvproc *)wglGetProcAddress("glSamplerParameterfv");
    if (!glSamplerParameterfv) {
        printf("Function glSamplerParameterfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSamplerParameteri = (SamplerParameteriproc *)wglGetProcAddress("glSamplerParameteri");
    if (!glSamplerParameteri) {
        printf("Function glSamplerParameteri couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glSamplerParameteriv = (SamplerParameterivproc *)wglGetProcAddress("glSamplerParameteriv");
    if (!glSamplerParameteriv) {
        printf("Function glSamplerParameteriv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribDivisor = (VertexAttribDivisorproc *)wglGetProcAddress("glVertexAttribDivisor");
    if (!glVertexAttribDivisor) {
        printf("Function glVertexAttribDivisor couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP1ui = (VertexAttribP1uiproc *)wglGetProcAddress("glVertexAttribP1ui");
    if (!glVertexAttribP1ui) {
        printf("Function glVertexAttribP1ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP1uiv = (VertexAttribP1uivproc *)wglGetProcAddress("glVertexAttribP1uiv");
    if (!glVertexAttribP1uiv) {
        printf("Function glVertexAttribP1uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP2ui = (VertexAttribP2uiproc *)wglGetProcAddress("glVertexAttribP2ui");
    if (!glVertexAttribP2ui) {
        printf("Function glVertexAttribP2ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP2uiv = (VertexAttribP2uivproc *)wglGetProcAddress("glVertexAttribP2uiv");
    if (!glVertexAttribP2uiv) {
        printf("Function glVertexAttribP2uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP3ui = (VertexAttribP3uiproc *)wglGetProcAddress("glVertexAttribP3ui");
    if (!glVertexAttribP3ui) {
        printf("Function glVertexAttribP3ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP3uiv = (VertexAttribP3uivproc *)wglGetProcAddress("glVertexAttribP3uiv");
    if (!glVertexAttribP3uiv) {
        printf("Function glVertexAttribP3uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP4ui = (VertexAttribP4uiproc *)wglGetProcAddress("glVertexAttribP4ui");
    if (!glVertexAttribP4ui) {
        printf("Function glVertexAttribP4ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribP4uiv = (VertexAttribP4uivproc *)wglGetProcAddress("glVertexAttribP4uiv");
    if (!glVertexAttribP4uiv) {
        printf("Function glVertexAttribP4uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBeginQueryIndexed = (BeginQueryIndexedproc *)wglGetProcAddress("glBeginQueryIndexed");
    if (!glBeginQueryIndexed) {
        printf("Function glBeginQueryIndexed couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindTransformFeedback = (BindTransformFeedbackproc *)wglGetProcAddress("glBindTransformFeedback");
    if (!glBindTransformFeedback) {
        printf("Function glBindTransformFeedback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendEquationSeparatei = (BlendEquationSeparateiproc *)wglGetProcAddress("glBlendEquationSeparatei");
    if (!glBlendEquationSeparatei) {
        printf("Function glBlendEquationSeparatei couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendEquationi = (BlendEquationiproc *)wglGetProcAddress("glBlendEquationi");
    if (!glBlendEquationi) {
        printf("Function glBlendEquationi couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendFuncSeparatei = (BlendFuncSeparateiproc *)wglGetProcAddress("glBlendFuncSeparatei");
    if (!glBlendFuncSeparatei) {
        printf("Function glBlendFuncSeparatei couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBlendFunci = (BlendFunciproc *)wglGetProcAddress("glBlendFunci");
    if (!glBlendFunci) {
        printf("Function glBlendFunci couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteTransformFeedbacks = (DeleteTransformFeedbacksproc *)wglGetProcAddress("glDeleteTransformFeedbacks");
    if (!glDeleteTransformFeedbacks) {
        printf("Function glDeleteTransformFeedbacks couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawArraysIndirect = (DrawArraysIndirectproc *)wglGetProcAddress("glDrawArraysIndirect");
    if (!glDrawArraysIndirect) {
        printf("Function glDrawArraysIndirect couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawElementsIndirect = (DrawElementsIndirectproc *)wglGetProcAddress("glDrawElementsIndirect");
    if (!glDrawElementsIndirect) {
        printf("Function glDrawElementsIndirect couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawTransformFeedback = (DrawTransformFeedbackproc *)wglGetProcAddress("glDrawTransformFeedback");
    if (!glDrawTransformFeedback) {
        printf("Function glDrawTransformFeedback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawTransformFeedbackStream = (DrawTransformFeedbackStreamproc *)wglGetProcAddress("glDrawTransformFeedbackStream");
    if (!glDrawTransformFeedbackStream) {
        printf("Function glDrawTransformFeedbackStream couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glEndQueryIndexed = (EndQueryIndexedproc *)wglGetProcAddress("glEndQueryIndexed");
    if (!glEndQueryIndexed) {
        printf("Function glEndQueryIndexed couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenTransformFeedbacks = (GenTransformFeedbacksproc *)wglGetProcAddress("glGenTransformFeedbacks");
    if (!glGenTransformFeedbacks) {
        printf("Function glGenTransformFeedbacks couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveSubroutineName = (GetActiveSubroutineNameproc *)wglGetProcAddress("glGetActiveSubroutineName");
    if (!glGetActiveSubroutineName) {
        printf("Function glGetActiveSubroutineName couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveSubroutineUniformName = (GetActiveSubroutineUniformNameproc *)wglGetProcAddress("glGetActiveSubroutineUniformName");
    if (!glGetActiveSubroutineUniformName) {
        printf("Function glGetActiveSubroutineUniformName couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveSubroutineUniformiv = (GetActiveSubroutineUniformivproc *)wglGetProcAddress("glGetActiveSubroutineUniformiv");
    if (!glGetActiveSubroutineUniformiv) {
        printf("Function glGetActiveSubroutineUniformiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramStageiv = (GetProgramStageivproc *)wglGetProcAddress("glGetProgramStageiv");
    if (!glGetProgramStageiv) {
        printf("Function glGetProgramStageiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetQueryIndexediv = (GetQueryIndexedivproc *)wglGetProcAddress("glGetQueryIndexediv");
    if (!glGetQueryIndexediv) {
        printf("Function glGetQueryIndexediv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetSubroutineIndex = (GetSubroutineIndexproc *)wglGetProcAddress("glGetSubroutineIndex");
    if (!glGetSubroutineIndex) {
        printf("Function glGetSubroutineIndex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetSubroutineUniformLocation = (GetSubroutineUniformLocationproc *)wglGetProcAddress("glGetSubroutineUniformLocation");
    if (!glGetSubroutineUniformLocation) {
        printf("Function glGetSubroutineUniformLocation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformSubroutineuiv = (GetUniformSubroutineuivproc *)wglGetProcAddress("glGetUniformSubroutineuiv");
    if (!glGetUniformSubroutineuiv) {
        printf("Function glGetUniformSubroutineuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetUniformdv = (GetUniformdvproc *)wglGetProcAddress("glGetUniformdv");
    if (!glGetUniformdv) {
        printf("Function glGetUniformdv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsTransformFeedback = (IsTransformFeedbackproc *)wglGetProcAddress("glIsTransformFeedback");
    if (!glIsTransformFeedback) {
        printf("Function glIsTransformFeedback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMinSampleShading = (MinSampleShadingproc *)wglGetProcAddress("glMinSampleShading");
    if (!glMinSampleShading) {
        printf("Function glMinSampleShading couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPatchParameterfv = (PatchParameterfvproc *)wglGetProcAddress("glPatchParameterfv");
    if (!glPatchParameterfv) {
        printf("Function glPatchParameterfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPatchParameteri = (PatchParameteriproc *)wglGetProcAddress("glPatchParameteri");
    if (!glPatchParameteri) {
        printf("Function glPatchParameteri couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPauseTransformFeedback = (PauseTransformFeedbackproc *)wglGetProcAddress("glPauseTransformFeedback");
    if (!glPauseTransformFeedback) {
        printf("Function glPauseTransformFeedback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glResumeTransformFeedback = (ResumeTransformFeedbackproc *)wglGetProcAddress("glResumeTransformFeedback");
    if (!glResumeTransformFeedback) {
        printf("Function glResumeTransformFeedback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1d = (Uniform1dproc *)wglGetProcAddress("glUniform1d");
    if (!glUniform1d) {
        printf("Function glUniform1d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform1dv = (Uniform1dvproc *)wglGetProcAddress("glUniform1dv");
    if (!glUniform1dv) {
        printf("Function glUniform1dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2d = (Uniform2dproc *)wglGetProcAddress("glUniform2d");
    if (!glUniform2d) {
        printf("Function glUniform2d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform2dv = (Uniform2dvproc *)wglGetProcAddress("glUniform2dv");
    if (!glUniform2dv) {
        printf("Function glUniform2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3d = (Uniform3dproc *)wglGetProcAddress("glUniform3d");
    if (!glUniform3d) {
        printf("Function glUniform3d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform3dv = (Uniform3dvproc *)wglGetProcAddress("glUniform3dv");
    if (!glUniform3dv) {
        printf("Function glUniform3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4d = (Uniform4dproc *)wglGetProcAddress("glUniform4d");
    if (!glUniform4d) {
        printf("Function glUniform4d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniform4dv = (Uniform4dvproc *)wglGetProcAddress("glUniform4dv");
    if (!glUniform4dv) {
        printf("Function glUniform4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix2dv = (UniformMatrix2dvproc *)wglGetProcAddress("glUniformMatrix2dv");
    if (!glUniformMatrix2dv) {
        printf("Function glUniformMatrix2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix2x3dv = (UniformMatrix2x3dvproc *)wglGetProcAddress("glUniformMatrix2x3dv");
    if (!glUniformMatrix2x3dv) {
        printf("Function glUniformMatrix2x3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix2x4dv = (UniformMatrix2x4dvproc *)wglGetProcAddress("glUniformMatrix2x4dv");
    if (!glUniformMatrix2x4dv) {
        printf("Function glUniformMatrix2x4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix3dv = (UniformMatrix3dvproc *)wglGetProcAddress("glUniformMatrix3dv");
    if (!glUniformMatrix3dv) {
        printf("Function glUniformMatrix3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix3x2dv = (UniformMatrix3x2dvproc *)wglGetProcAddress("glUniformMatrix3x2dv");
    if (!glUniformMatrix3x2dv) {
        printf("Function glUniformMatrix3x2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix3x4dv = (UniformMatrix3x4dvproc *)wglGetProcAddress("glUniformMatrix3x4dv");
    if (!glUniformMatrix3x4dv) {
        printf("Function glUniformMatrix3x4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix4dv = (UniformMatrix4dvproc *)wglGetProcAddress("glUniformMatrix4dv");
    if (!glUniformMatrix4dv) {
        printf("Function glUniformMatrix4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix4x2dv = (UniformMatrix4x2dvproc *)wglGetProcAddress("glUniformMatrix4x2dv");
    if (!glUniformMatrix4x2dv) {
        printf("Function glUniformMatrix4x2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformMatrix4x3dv = (UniformMatrix4x3dvproc *)wglGetProcAddress("glUniformMatrix4x3dv");
    if (!glUniformMatrix4x3dv) {
        printf("Function glUniformMatrix4x3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUniformSubroutinesuiv = (UniformSubroutinesuivproc *)wglGetProcAddress("glUniformSubroutinesuiv");
    if (!glUniformSubroutinesuiv) {
        printf("Function glUniformSubroutinesuiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glActiveShaderProgram = (ActiveShaderProgramproc *)wglGetProcAddress("glActiveShaderProgram");
    if (!glActiveShaderProgram) {
        printf("Function glActiveShaderProgram couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindProgramPipeline = (BindProgramPipelineproc *)wglGetProcAddress("glBindProgramPipeline");
    if (!glBindProgramPipeline) {
        printf("Function glBindProgramPipeline couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearDepthf = (ClearDepthfproc *)wglGetProcAddress("glClearDepthf");
    if (!glClearDepthf) {
        printf("Function glClearDepthf couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCreateShaderProgramv = (CreateShaderProgramvproc *)wglGetProcAddress("glCreateShaderProgramv");
    if (!glCreateShaderProgramv) {
        printf("Function glCreateShaderProgramv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDeleteProgramPipelines = (DeleteProgramPipelinesproc *)wglGetProcAddress("glDeleteProgramPipelines");
    if (!glDeleteProgramPipelines) {
        printf("Function glDeleteProgramPipelines couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDepthRangeArrayv = (DepthRangeArrayvproc *)wglGetProcAddress("glDepthRangeArrayv");
    if (!glDepthRangeArrayv) {
        printf("Function glDepthRangeArrayv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDepthRangeIndexed = (DepthRangeIndexedproc *)wglGetProcAddress("glDepthRangeIndexed");
    if (!glDepthRangeIndexed) {
        printf("Function glDepthRangeIndexed couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDepthRangef = (DepthRangefproc *)wglGetProcAddress("glDepthRangef");
    if (!glDepthRangef) {
        printf("Function glDepthRangef couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGenProgramPipelines = (GenProgramPipelinesproc *)wglGetProcAddress("glGenProgramPipelines");
    if (!glGenProgramPipelines) {
        printf("Function glGenProgramPipelines couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetDoublei_v = (GetDoublei_vproc *)wglGetProcAddress("glGetDoublei_v");
    if (!glGetDoublei_v) {
        printf("Function glGetDoublei_v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetFloati_v = (GetFloati_vproc *)wglGetProcAddress("glGetFloati_v");
    if (!glGetFloati_v) {
        printf("Function glGetFloati_v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramBinary = (GetProgramBinaryproc *)wglGetProcAddress("glGetProgramBinary");
    if (!glGetProgramBinary) {
        printf("Function glGetProgramBinary couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramPipelineInfoLog = (GetProgramPipelineInfoLogproc *)wglGetProcAddress("glGetProgramPipelineInfoLog");
    if (!glGetProgramPipelineInfoLog) {
        printf("Function glGetProgramPipelineInfoLog couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramPipelineiv = (GetProgramPipelineivproc *)wglGetProcAddress("glGetProgramPipelineiv");
    if (!glGetProgramPipelineiv) {
        printf("Function glGetProgramPipelineiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetShaderPrecisionFormat = (GetShaderPrecisionFormatproc *)wglGetProcAddress("glGetShaderPrecisionFormat");
    if (!glGetShaderPrecisionFormat) {
        printf("Function glGetShaderPrecisionFormat couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetVertexAttribLdv = (GetVertexAttribLdvproc *)wglGetProcAddress("glGetVertexAttribLdv");
    if (!glGetVertexAttribLdv) {
        printf("Function glGetVertexAttribLdv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glIsProgramPipeline = (IsProgramPipelineproc *)wglGetProcAddress("glIsProgramPipeline");
    if (!glIsProgramPipeline) {
        printf("Function glIsProgramPipeline couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramBinary = (ProgramBinaryproc *)wglGetProcAddress("glProgramBinary");
    if (!glProgramBinary) {
        printf("Function glProgramBinary couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramParameteri = (ProgramParameteriproc *)wglGetProcAddress("glProgramParameteri");
    if (!glProgramParameteri) {
        printf("Function glProgramParameteri couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1d = (ProgramUniform1dproc *)wglGetProcAddress("glProgramUniform1d");
    if (!glProgramUniform1d) {
        printf("Function glProgramUniform1d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1dv = (ProgramUniform1dvproc *)wglGetProcAddress("glProgramUniform1dv");
    if (!glProgramUniform1dv) {
        printf("Function glProgramUniform1dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1f = (ProgramUniform1fproc *)wglGetProcAddress("glProgramUniform1f");
    if (!glProgramUniform1f) {
        printf("Function glProgramUniform1f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1fv = (ProgramUniform1fvproc *)wglGetProcAddress("glProgramUniform1fv");
    if (!glProgramUniform1fv) {
        printf("Function glProgramUniform1fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1i = (ProgramUniform1iproc *)wglGetProcAddress("glProgramUniform1i");
    if (!glProgramUniform1i) {
        printf("Function glProgramUniform1i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1iv = (ProgramUniform1ivproc *)wglGetProcAddress("glProgramUniform1iv");
    if (!glProgramUniform1iv) {
        printf("Function glProgramUniform1iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1ui = (ProgramUniform1uiproc *)wglGetProcAddress("glProgramUniform1ui");
    if (!glProgramUniform1ui) {
        printf("Function glProgramUniform1ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform1uiv = (ProgramUniform1uivproc *)wglGetProcAddress("glProgramUniform1uiv");
    if (!glProgramUniform1uiv) {
        printf("Function glProgramUniform1uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2d = (ProgramUniform2dproc *)wglGetProcAddress("glProgramUniform2d");
    if (!glProgramUniform2d) {
        printf("Function glProgramUniform2d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2dv = (ProgramUniform2dvproc *)wglGetProcAddress("glProgramUniform2dv");
    if (!glProgramUniform2dv) {
        printf("Function glProgramUniform2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2f = (ProgramUniform2fproc *)wglGetProcAddress("glProgramUniform2f");
    if (!glProgramUniform2f) {
        printf("Function glProgramUniform2f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2fv = (ProgramUniform2fvproc *)wglGetProcAddress("glProgramUniform2fv");
    if (!glProgramUniform2fv) {
        printf("Function glProgramUniform2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2i = (ProgramUniform2iproc *)wglGetProcAddress("glProgramUniform2i");
    if (!glProgramUniform2i) {
        printf("Function glProgramUniform2i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2iv = (ProgramUniform2ivproc *)wglGetProcAddress("glProgramUniform2iv");
    if (!glProgramUniform2iv) {
        printf("Function glProgramUniform2iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2ui = (ProgramUniform2uiproc *)wglGetProcAddress("glProgramUniform2ui");
    if (!glProgramUniform2ui) {
        printf("Function glProgramUniform2ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform2uiv = (ProgramUniform2uivproc *)wglGetProcAddress("glProgramUniform2uiv");
    if (!glProgramUniform2uiv) {
        printf("Function glProgramUniform2uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3d = (ProgramUniform3dproc *)wglGetProcAddress("glProgramUniform3d");
    if (!glProgramUniform3d) {
        printf("Function glProgramUniform3d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3dv = (ProgramUniform3dvproc *)wglGetProcAddress("glProgramUniform3dv");
    if (!glProgramUniform3dv) {
        printf("Function glProgramUniform3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3f = (ProgramUniform3fproc *)wglGetProcAddress("glProgramUniform3f");
    if (!glProgramUniform3f) {
        printf("Function glProgramUniform3f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3fv = (ProgramUniform3fvproc *)wglGetProcAddress("glProgramUniform3fv");
    if (!glProgramUniform3fv) {
        printf("Function glProgramUniform3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3i = (ProgramUniform3iproc *)wglGetProcAddress("glProgramUniform3i");
    if (!glProgramUniform3i) {
        printf("Function glProgramUniform3i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3iv = (ProgramUniform3ivproc *)wglGetProcAddress("glProgramUniform3iv");
    if (!glProgramUniform3iv) {
        printf("Function glProgramUniform3iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3ui = (ProgramUniform3uiproc *)wglGetProcAddress("glProgramUniform3ui");
    if (!glProgramUniform3ui) {
        printf("Function glProgramUniform3ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform3uiv = (ProgramUniform3uivproc *)wglGetProcAddress("glProgramUniform3uiv");
    if (!glProgramUniform3uiv) {
        printf("Function glProgramUniform3uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4d = (ProgramUniform4dproc *)wglGetProcAddress("glProgramUniform4d");
    if (!glProgramUniform4d) {
        printf("Function glProgramUniform4d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4dv = (ProgramUniform4dvproc *)wglGetProcAddress("glProgramUniform4dv");
    if (!glProgramUniform4dv) {
        printf("Function glProgramUniform4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4f = (ProgramUniform4fproc *)wglGetProcAddress("glProgramUniform4f");
    if (!glProgramUniform4f) {
        printf("Function glProgramUniform4f couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4fv = (ProgramUniform4fvproc *)wglGetProcAddress("glProgramUniform4fv");
    if (!glProgramUniform4fv) {
        printf("Function glProgramUniform4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4i = (ProgramUniform4iproc *)wglGetProcAddress("glProgramUniform4i");
    if (!glProgramUniform4i) {
        printf("Function glProgramUniform4i couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4iv = (ProgramUniform4ivproc *)wglGetProcAddress("glProgramUniform4iv");
    if (!glProgramUniform4iv) {
        printf("Function glProgramUniform4iv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4ui = (ProgramUniform4uiproc *)wglGetProcAddress("glProgramUniform4ui");
    if (!glProgramUniform4ui) {
        printf("Function glProgramUniform4ui couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniform4uiv = (ProgramUniform4uivproc *)wglGetProcAddress("glProgramUniform4uiv");
    if (!glProgramUniform4uiv) {
        printf("Function glProgramUniform4uiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix2dv = (ProgramUniformMatrix2dvproc *)wglGetProcAddress("glProgramUniformMatrix2dv");
    if (!glProgramUniformMatrix2dv) {
        printf("Function glProgramUniformMatrix2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix2fv = (ProgramUniformMatrix2fvproc *)wglGetProcAddress("glProgramUniformMatrix2fv");
    if (!glProgramUniformMatrix2fv) {
        printf("Function glProgramUniformMatrix2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix2x3dv = (ProgramUniformMatrix2x3dvproc *)wglGetProcAddress("glProgramUniformMatrix2x3dv");
    if (!glProgramUniformMatrix2x3dv) {
        printf("Function glProgramUniformMatrix2x3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix2x3fv = (ProgramUniformMatrix2x3fvproc *)wglGetProcAddress("glProgramUniformMatrix2x3fv");
    if (!glProgramUniformMatrix2x3fv) {
        printf("Function glProgramUniformMatrix2x3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix2x4dv = (ProgramUniformMatrix2x4dvproc *)wglGetProcAddress("glProgramUniformMatrix2x4dv");
    if (!glProgramUniformMatrix2x4dv) {
        printf("Function glProgramUniformMatrix2x4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix2x4fv = (ProgramUniformMatrix2x4fvproc *)wglGetProcAddress("glProgramUniformMatrix2x4fv");
    if (!glProgramUniformMatrix2x4fv) {
        printf("Function glProgramUniformMatrix2x4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix3dv = (ProgramUniformMatrix3dvproc *)wglGetProcAddress("glProgramUniformMatrix3dv");
    if (!glProgramUniformMatrix3dv) {
        printf("Function glProgramUniformMatrix3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix3fv = (ProgramUniformMatrix3fvproc *)wglGetProcAddress("glProgramUniformMatrix3fv");
    if (!glProgramUniformMatrix3fv) {
        printf("Function glProgramUniformMatrix3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix3x2dv = (ProgramUniformMatrix3x2dvproc *)wglGetProcAddress("glProgramUniformMatrix3x2dv");
    if (!glProgramUniformMatrix3x2dv) {
        printf("Function glProgramUniformMatrix3x2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix3x2fv = (ProgramUniformMatrix3x2fvproc *)wglGetProcAddress("glProgramUniformMatrix3x2fv");
    if (!glProgramUniformMatrix3x2fv) {
        printf("Function glProgramUniformMatrix3x2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix3x4dv = (ProgramUniformMatrix3x4dvproc *)wglGetProcAddress("glProgramUniformMatrix3x4dv");
    if (!glProgramUniformMatrix3x4dv) {
        printf("Function glProgramUniformMatrix3x4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix3x4fv = (ProgramUniformMatrix3x4fvproc *)wglGetProcAddress("glProgramUniformMatrix3x4fv");
    if (!glProgramUniformMatrix3x4fv) {
        printf("Function glProgramUniformMatrix3x4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix4dv = (ProgramUniformMatrix4dvproc *)wglGetProcAddress("glProgramUniformMatrix4dv");
    if (!glProgramUniformMatrix4dv) {
        printf("Function glProgramUniformMatrix4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix4fv = (ProgramUniformMatrix4fvproc *)wglGetProcAddress("glProgramUniformMatrix4fv");
    if (!glProgramUniformMatrix4fv) {
        printf("Function glProgramUniformMatrix4fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix4x2dv = (ProgramUniformMatrix4x2dvproc *)wglGetProcAddress("glProgramUniformMatrix4x2dv");
    if (!glProgramUniformMatrix4x2dv) {
        printf("Function glProgramUniformMatrix4x2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix4x2fv = (ProgramUniformMatrix4x2fvproc *)wglGetProcAddress("glProgramUniformMatrix4x2fv");
    if (!glProgramUniformMatrix4x2fv) {
        printf("Function glProgramUniformMatrix4x2fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix4x3dv = (ProgramUniformMatrix4x3dvproc *)wglGetProcAddress("glProgramUniformMatrix4x3dv");
    if (!glProgramUniformMatrix4x3dv) {
        printf("Function glProgramUniformMatrix4x3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glProgramUniformMatrix4x3fv = (ProgramUniformMatrix4x3fvproc *)wglGetProcAddress("glProgramUniformMatrix4x3fv");
    if (!glProgramUniformMatrix4x3fv) {
        printf("Function glProgramUniformMatrix4x3fv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glReleaseShaderCompiler = (ReleaseShaderCompilerproc *)wglGetProcAddress("glReleaseShaderCompiler");
    if (!glReleaseShaderCompiler) {
        printf("Function glReleaseShaderCompiler couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glScissorArrayv = (ScissorArrayvproc *)wglGetProcAddress("glScissorArrayv");
    if (!glScissorArrayv) {
        printf("Function glScissorArrayv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glScissorIndexed = (ScissorIndexedproc *)wglGetProcAddress("glScissorIndexed");
    if (!glScissorIndexed) {
        printf("Function glScissorIndexed couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glScissorIndexedv = (ScissorIndexedvproc *)wglGetProcAddress("glScissorIndexedv");
    if (!glScissorIndexedv) {
        printf("Function glScissorIndexedv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glShaderBinary = (ShaderBinaryproc *)wglGetProcAddress("glShaderBinary");
    if (!glShaderBinary) {
        printf("Function glShaderBinary couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glUseProgramStages = (UseProgramStagesproc *)wglGetProcAddress("glUseProgramStages");
    if (!glUseProgramStages) {
        printf("Function glUseProgramStages couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glValidateProgramPipeline = (ValidateProgramPipelineproc *)wglGetProcAddress("glValidateProgramPipeline");
    if (!glValidateProgramPipeline) {
        printf("Function glValidateProgramPipeline couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL1d = (VertexAttribL1dproc *)wglGetProcAddress("glVertexAttribL1d");
    if (!glVertexAttribL1d) {
        printf("Function glVertexAttribL1d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL1dv = (VertexAttribL1dvproc *)wglGetProcAddress("glVertexAttribL1dv");
    if (!glVertexAttribL1dv) {
        printf("Function glVertexAttribL1dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL2d = (VertexAttribL2dproc *)wglGetProcAddress("glVertexAttribL2d");
    if (!glVertexAttribL2d) {
        printf("Function glVertexAttribL2d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL2dv = (VertexAttribL2dvproc *)wglGetProcAddress("glVertexAttribL2dv");
    if (!glVertexAttribL2dv) {
        printf("Function glVertexAttribL2dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL3d = (VertexAttribL3dproc *)wglGetProcAddress("glVertexAttribL3d");
    if (!glVertexAttribL3d) {
        printf("Function glVertexAttribL3d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL3dv = (VertexAttribL3dvproc *)wglGetProcAddress("glVertexAttribL3dv");
    if (!glVertexAttribL3dv) {
        printf("Function glVertexAttribL3dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL4d = (VertexAttribL4dproc *)wglGetProcAddress("glVertexAttribL4d");
    if (!glVertexAttribL4d) {
        printf("Function glVertexAttribL4d couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribL4dv = (VertexAttribL4dvproc *)wglGetProcAddress("glVertexAttribL4dv");
    if (!glVertexAttribL4dv) {
        printf("Function glVertexAttribL4dv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribLPointer = (VertexAttribLPointerproc *)wglGetProcAddress("glVertexAttribLPointer");
    if (!glVertexAttribLPointer) {
        printf("Function glVertexAttribLPointer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glViewportArrayv = (ViewportArrayvproc *)wglGetProcAddress("glViewportArrayv");
    if (!glViewportArrayv) {
        printf("Function glViewportArrayv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glViewportIndexedf = (ViewportIndexedfproc *)wglGetProcAddress("glViewportIndexedf");
    if (!glViewportIndexedf) {
        printf("Function glViewportIndexedf couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glViewportIndexedfv = (ViewportIndexedfvproc *)wglGetProcAddress("glViewportIndexedfv");
    if (!glViewportIndexedfv) {
        printf("Function glViewportIndexedfv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindImageTexture = (BindImageTextureproc *)wglGetProcAddress("glBindImageTexture");
    if (!glBindImageTexture) {
        printf("Function glBindImageTexture couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawArraysInstancedBaseInstance = (DrawArraysInstancedBaseInstanceproc *)wglGetProcAddress("glDrawArraysInstancedBaseInstance");
    if (!glDrawArraysInstancedBaseInstance) {
        printf("Function glDrawArraysInstancedBaseInstance couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawElementsInstancedBaseInstance = (DrawElementsInstancedBaseInstanceproc *)wglGetProcAddress("glDrawElementsInstancedBaseInstance");
    if (!glDrawElementsInstancedBaseInstance) {
        printf("Function glDrawElementsInstancedBaseInstance couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawElementsInstancedBaseVertexBaseInstance = (DrawElementsInstancedBaseVertexBaseInstanceproc *)wglGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
    if (!glDrawElementsInstancedBaseVertexBaseInstance) {
        printf("Function glDrawElementsInstancedBaseVertexBaseInstance couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawTransformFeedbackInstanced = (DrawTransformFeedbackInstancedproc *)wglGetProcAddress("glDrawTransformFeedbackInstanced");
    if (!glDrawTransformFeedbackInstanced) {
        printf("Function glDrawTransformFeedbackInstanced couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDrawTransformFeedbackStreamInstanced = (DrawTransformFeedbackStreamInstancedproc *)wglGetProcAddress("glDrawTransformFeedbackStreamInstanced");
    if (!glDrawTransformFeedbackStreamInstanced) {
        printf("Function glDrawTransformFeedbackStreamInstanced couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetActiveAtomicCounterBufferiv = (GetActiveAtomicCounterBufferivproc *)wglGetProcAddress("glGetActiveAtomicCounterBufferiv");
    if (!glGetActiveAtomicCounterBufferiv) {
        printf("Function glGetActiveAtomicCounterBufferiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetInternalformativ = (GetInternalformativproc *)wglGetProcAddress("glGetInternalformativ");
    if (!glGetInternalformativ) {
        printf("Function glGetInternalformativ couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMemoryBarrier = (MemoryBarrierproc *)wglGetProcAddress("glMemoryBarrier");
    if (!glMemoryBarrier) {
        printf("Function glMemoryBarrier couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexStorage1D = (TexStorage1Dproc *)wglGetProcAddress("glTexStorage1D");
    if (!glTexStorage1D) {
        printf("Function glTexStorage1D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexStorage2D = (TexStorage2Dproc *)wglGetProcAddress("glTexStorage2D");
    if (!glTexStorage2D) {
        printf("Function glTexStorage2D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexStorage3D = (TexStorage3Dproc *)wglGetProcAddress("glTexStorage3D");
    if (!glTexStorage3D) {
        printf("Function glTexStorage3D couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindVertexBuffer = (BindVertexBufferproc *)wglGetProcAddress("glBindVertexBuffer");
    if (!glBindVertexBuffer) {
        printf("Function glBindVertexBuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearBufferData = (ClearBufferDataproc *)wglGetProcAddress("glClearBufferData");
    if (!glClearBufferData) {
        printf("Function glClearBufferData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearBufferSubData = (ClearBufferSubDataproc *)wglGetProcAddress("glClearBufferSubData");
    if (!glClearBufferSubData) {
        printf("Function glClearBufferSubData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glCopyImageSubData = (CopyImageSubDataproc *)wglGetProcAddress("glCopyImageSubData");
    if (!glCopyImageSubData) {
        printf("Function glCopyImageSubData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDebugMessageCallback = (DebugMessageCallbackproc *)wglGetProcAddress("glDebugMessageCallback");
    if (!glDebugMessageCallback) {
        printf("Function glDebugMessageCallback couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDebugMessageControl = (DebugMessageControlproc *)wglGetProcAddress("glDebugMessageControl");
    if (!glDebugMessageControl) {
        printf("Function glDebugMessageControl couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDebugMessageInsert = (DebugMessageInsertproc *)wglGetProcAddress("glDebugMessageInsert");
    if (!glDebugMessageInsert) {
        printf("Function glDebugMessageInsert couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDispatchCompute = (DispatchComputeproc *)wglGetProcAddress("glDispatchCompute");
    if (!glDispatchCompute) {
        printf("Function glDispatchCompute couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glDispatchComputeIndirect = (DispatchComputeIndirectproc *)wglGetProcAddress("glDispatchComputeIndirect");
    if (!glDispatchComputeIndirect) {
        printf("Function glDispatchComputeIndirect couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glFramebufferParameteri = (FramebufferParameteriproc *)wglGetProcAddress("glFramebufferParameteri");
    if (!glFramebufferParameteri) {
        printf("Function glFramebufferParameteri couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetDebugMessageLog = (GetDebugMessageLogproc *)wglGetProcAddress("glGetDebugMessageLog");
    if (!glGetDebugMessageLog) {
        printf("Function glGetDebugMessageLog couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetFramebufferParameteriv = (GetFramebufferParameterivproc *)wglGetProcAddress("glGetFramebufferParameteriv");
    if (!glGetFramebufferParameteriv) {
        printf("Function glGetFramebufferParameteriv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetInternalformati64v = (GetInternalformati64vproc *)wglGetProcAddress("glGetInternalformati64v");
    if (!glGetInternalformati64v) {
        printf("Function glGetInternalformati64v couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetObjectLabel = (GetObjectLabelproc *)wglGetProcAddress("glGetObjectLabel");
    if (!glGetObjectLabel) {
        printf("Function glGetObjectLabel couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetObjectPtrLabel = (GetObjectPtrLabelproc *)wglGetProcAddress("glGetObjectPtrLabel");
    if (!glGetObjectPtrLabel) {
        printf("Function glGetObjectPtrLabel couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramInterfaceiv = (GetProgramInterfaceivproc *)wglGetProcAddress("glGetProgramInterfaceiv");
    if (!glGetProgramInterfaceiv) {
        printf("Function glGetProgramInterfaceiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramResourceIndex = (GetProgramResourceIndexproc *)wglGetProcAddress("glGetProgramResourceIndex");
    if (!glGetProgramResourceIndex) {
        printf("Function glGetProgramResourceIndex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramResourceLocation = (GetProgramResourceLocationproc *)wglGetProcAddress("glGetProgramResourceLocation");
    if (!glGetProgramResourceLocation) {
        printf("Function glGetProgramResourceLocation couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramResourceLocationIndex = (GetProgramResourceLocationIndexproc *)wglGetProcAddress("glGetProgramResourceLocationIndex");
    if (!glGetProgramResourceLocationIndex) {
        printf("Function glGetProgramResourceLocationIndex couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramResourceName = (GetProgramResourceNameproc *)wglGetProcAddress("glGetProgramResourceName");
    if (!glGetProgramResourceName) {
        printf("Function glGetProgramResourceName couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glGetProgramResourceiv = (GetProgramResourceivproc *)wglGetProcAddress("glGetProgramResourceiv");
    if (!glGetProgramResourceiv) {
        printf("Function glGetProgramResourceiv couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glInvalidateBufferData = (InvalidateBufferDataproc *)wglGetProcAddress("glInvalidateBufferData");
    if (!glInvalidateBufferData) {
        printf("Function glInvalidateBufferData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glInvalidateBufferSubData = (InvalidateBufferSubDataproc *)wglGetProcAddress("glInvalidateBufferSubData");
    if (!glInvalidateBufferSubData) {
        printf("Function glInvalidateBufferSubData couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glInvalidateFramebuffer = (InvalidateFramebufferproc *)wglGetProcAddress("glInvalidateFramebuffer");
    if (!glInvalidateFramebuffer) {
        printf("Function glInvalidateFramebuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glInvalidateSubFramebuffer = (InvalidateSubFramebufferproc *)wglGetProcAddress("glInvalidateSubFramebuffer");
    if (!glInvalidateSubFramebuffer) {
        printf("Function glInvalidateSubFramebuffer couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glInvalidateTexImage = (InvalidateTexImageproc *)wglGetProcAddress("glInvalidateTexImage");
    if (!glInvalidateTexImage) {
        printf("Function glInvalidateTexImage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glInvalidateTexSubImage = (InvalidateTexSubImageproc *)wglGetProcAddress("glInvalidateTexSubImage");
    if (!glInvalidateTexSubImage) {
        printf("Function glInvalidateTexSubImage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiDrawArraysIndirect = (MultiDrawArraysIndirectproc *)wglGetProcAddress("glMultiDrawArraysIndirect");
    if (!glMultiDrawArraysIndirect) {
        printf("Function glMultiDrawArraysIndirect couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glMultiDrawElementsIndirect = (MultiDrawElementsIndirectproc *)wglGetProcAddress("glMultiDrawElementsIndirect");
    if (!glMultiDrawElementsIndirect) {
        printf("Function glMultiDrawElementsIndirect couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glObjectLabel = (ObjectLabelproc *)wglGetProcAddress("glObjectLabel");
    if (!glObjectLabel) {
        printf("Function glObjectLabel couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glObjectPtrLabel = (ObjectPtrLabelproc *)wglGetProcAddress("glObjectPtrLabel");
    if (!glObjectPtrLabel) {
        printf("Function glObjectPtrLabel couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPopDebugGroup = (PopDebugGroupproc *)wglGetProcAddress("glPopDebugGroup");
    if (!glPopDebugGroup) {
        printf("Function glPopDebugGroup couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glPushDebugGroup = (PushDebugGroupproc *)wglGetProcAddress("glPushDebugGroup");
    if (!glPushDebugGroup) {
        printf("Function glPushDebugGroup couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glShaderStorageBlockBinding = (ShaderStorageBlockBindingproc *)wglGetProcAddress("glShaderStorageBlockBinding");
    if (!glShaderStorageBlockBinding) {
        printf("Function glShaderStorageBlockBinding couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexBufferRange = (TexBufferRangeproc *)wglGetProcAddress("glTexBufferRange");
    if (!glTexBufferRange) {
        printf("Function glTexBufferRange couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexStorage2DMultisample = (TexStorage2DMultisampleproc *)wglGetProcAddress("glTexStorage2DMultisample");
    if (!glTexStorage2DMultisample) {
        printf("Function glTexStorage2DMultisample couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTexStorage3DMultisample = (TexStorage3DMultisampleproc *)wglGetProcAddress("glTexStorage3DMultisample");
    if (!glTexStorage3DMultisample) {
        printf("Function glTexStorage3DMultisample couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glTextureView = (TextureViewproc *)wglGetProcAddress("glTextureView");
    if (!glTextureView) {
        printf("Function glTextureView couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribBinding = (VertexAttribBindingproc *)wglGetProcAddress("glVertexAttribBinding");
    if (!glVertexAttribBinding) {
        printf("Function glVertexAttribBinding couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribFormat = (VertexAttribFormatproc *)wglGetProcAddress("glVertexAttribFormat");
    if (!glVertexAttribFormat) {
        printf("Function glVertexAttribFormat couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribIFormat = (VertexAttribIFormatproc *)wglGetProcAddress("glVertexAttribIFormat");
    if (!glVertexAttribIFormat) {
        printf("Function glVertexAttribIFormat couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexAttribLFormat = (VertexAttribLFormatproc *)wglGetProcAddress("glVertexAttribLFormat");
    if (!glVertexAttribLFormat) {
        printf("Function glVertexAttribLFormat couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glVertexBindingDivisor = (VertexBindingDivisorproc *)wglGetProcAddress("glVertexBindingDivisor");
    if (!glVertexBindingDivisor) {
        printf("Function glVertexBindingDivisor couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindBuffersBase = (BindBuffersBaseproc *)wglGetProcAddress("glBindBuffersBase");
    if (!glBindBuffersBase) {
        printf("Function glBindBuffersBase couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindBuffersRange = (BindBuffersRangeproc *)wglGetProcAddress("glBindBuffersRange");
    if (!glBindBuffersRange) {
        printf("Function glBindBuffersRange couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindImageTextures = (BindImageTexturesproc *)wglGetProcAddress("glBindImageTextures");
    if (!glBindImageTextures) {
        printf("Function glBindImageTextures couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindSamplers = (BindSamplersproc *)wglGetProcAddress("glBindSamplers");
    if (!glBindSamplers) {
        printf("Function glBindSamplers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindTextures = (BindTexturesproc *)wglGetProcAddress("glBindTextures");
    if (!glBindTextures) {
        printf("Function glBindTextures couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBindVertexBuffers = (BindVertexBuffersproc *)wglGetProcAddress("glBindVertexBuffers");
    if (!glBindVertexBuffers) {
        printf("Function glBindVertexBuffers couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glBufferStorage = (BufferStorageproc *)wglGetProcAddress("glBufferStorage");
    if (!glBufferStorage) {
        printf("Function glBufferStorage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearTexImage = (ClearTexImageproc *)wglGetProcAddress("glClearTexImage");
    if (!glClearTexImage) {
        printf("Function glClearTexImage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    glClearTexSubImage = (ClearTexSubImageproc *)wglGetProcAddress("glClearTexSubImage");
    if (!glClearTexSubImage) {
        printf("Function glClearTexSubImage couldn't be loaded from opengl32.dll\n");
        return false;
    }

    return true;
}

/**********************************************************************************************************************/
/*                                                                                                                    */
/* glutil.h                                                                                                           */
/*                                                                                                                    */
/**********************************************************************************************************************/

#ifndef GLUTIL_H
#define GLUTIL_H

#include "lua.h"
#include "lualib.h"
#include "lauxlib.h"

int GlAccum(lua_State *L);
int GlAlphaFunc(lua_State *L);
int GlBegin(lua_State *L);
int GlBitmap(lua_State *L);
int GlBlendFunc(lua_State *L);
int GlCallList(lua_State *L);
int GlCallLists(lua_State *L);
int GlClear(lua_State *L);
int GlClearAccum(lua_State *L);
int GlClearColor(lua_State *L);
int GlClearDepth(lua_State *L);
int GlClearIndex(lua_State *L);
int GlClearStencil(lua_State *L);
int GlClipPlane(lua_State *L);
int GlColor3b(lua_State *L);
int GlColor3bv(lua_State *L);
int GlColor3d(lua_State *L);
int GlColor3dv(lua_State *L);
int GlColor3f(lua_State *L);
int GlColor3fv(lua_State *L);
int GlColor3i(lua_State *L);
int GlColor3iv(lua_State *L);
int GlColor3s(lua_State *L);
int GlColor3sv(lua_State *L);
int GlColor3ub(lua_State *L);
int GlColor3ubv(lua_State *L);
int GlColor3ui(lua_State *L);
int GlColor3uiv(lua_State *L);
int GlColor3us(lua_State *L);
int GlColor3usv(lua_State *L);
int GlColor4b(lua_State *L);
int GlColor4bv(lua_State *L);
int GlColor4d(lua_State *L);
int GlColor4dv(lua_State *L);
int GlColor4f(lua_State *L);
int GlColor4fv(lua_State *L);
int GlColor4i(lua_State *L);
int GlColor4iv(lua_State *L);
int GlColor4s(lua_State *L);
int GlColor4sv(lua_State *L);
int GlColor4ub(lua_State *L);
int GlColor4ubv(lua_State *L);
int GlColor4ui(lua_State *L);
int GlColor4uiv(lua_State *L);
int GlColor4us(lua_State *L);
int GlColor4usv(lua_State *L);
int GlColorMask(lua_State *L);
int GlColorMaterial(lua_State *L);
int GlCopyPixels(lua_State *L);
int GlCullFace(lua_State *L);
int GlDeleteLists(lua_State *L);
int GlDepthFunc(lua_State *L);
int GlDepthMask(lua_State *L);
int GlDepthRange(lua_State *L);
int GlDisable(lua_State *L);
int GlDrawBuffer(lua_State *L);
int GlDrawPixels(lua_State *L);
int GlEdgeFlag(lua_State *L);
int GlEdgeFlagv(lua_State *L);
int GlEnable(lua_State *L);
int GlEnd(lua_State *L);
int GlEndList(lua_State *L);
int GlEvalCoord1d(lua_State *L);
int GlEvalCoord1dv(lua_State *L);
int GlEvalCoord1f(lua_State *L);
int GlEvalCoord1fv(lua_State *L);
int GlEvalCoord2d(lua_State *L);
int GlEvalCoord2dv(lua_State *L);
int GlEvalCoord2f(lua_State *L);
int GlEvalCoord2fv(lua_State *L);
int GlEvalMesh1(lua_State *L);
int GlEvalMesh2(lua_State *L);
int GlEvalPoint1(lua_State *L);
int GlEvalPoint2(lua_State *L);
int GlFeedbackBuffer(lua_State *L);
int GlFinish(lua_State *L);
int GlFlush(lua_State *L);
int GlFogf(lua_State *L);
int GlFogfv(lua_State *L);
int GlFogi(lua_State *L);
int GlFogiv(lua_State *L);
int GlFrontFace(lua_State *L);
int GlFrustum(lua_State *L);
int GlGenLists(lua_State *L);
int GlGetBooleanv(lua_State *L);
int GlGetClipPlane(lua_State *L);
int GlGetDoublev(lua_State *L);
int GlGetError(lua_State *L);
int GlGetFloatv(lua_State *L);
int GlGetIntegerv(lua_State *L);
int GlGetLightfv(lua_State *L);
int GlGetLightiv(lua_State *L);
int GlGetMapdv(lua_State *L);
int GlGetMapfv(lua_State *L);
int GlGetMapiv(lua_State *L);
int GlGetMaterialfv(lua_State *L);
int GlGetMaterialiv(lua_State *L);
int GlGetPixelMapfv(lua_State *L);
int GlGetPixelMapuiv(lua_State *L);
int GlGetPixelMapusv(lua_State *L);
int GlGetPolygonStipple(lua_State *L);
int GlGetString(lua_State *L);
int GlGetTexEnvfv(lua_State *L);
int GlGetTexEnviv(lua_State *L);
int GlGetTexGendv(lua_State *L);
int GlGetTexGenfv(lua_State *L);
int GlGetTexGeniv(lua_State *L);
int GlGetTexImage(lua_State *L);
int GlGetTexLevelParameterfv(lua_State *L);
int GlGetTexLevelParameteriv(lua_State *L);
int GlGetTexParameterfv(lua_State *L);
int GlGetTexParameteriv(lua_State *L);
int GlHint(lua_State *L);
int GlIndexMask(lua_State *L);
int GlIndexd(lua_State *L);
int GlIndexdv(lua_State *L);
int GlIndexf(lua_State *L);
int GlIndexfv(lua_State *L);
int GlIndexi(lua_State *L);
int GlIndexiv(lua_State *L);
int GlIndexs(lua_State *L);
int GlIndexsv(lua_State *L);
int GlInitNames(lua_State *L);
int GlIsEnabled(lua_State *L);
int GlIsList(lua_State *L);
int GlLightModelf(lua_State *L);
int GlLightModelfv(lua_State *L);
int GlLightModeli(lua_State *L);
int GlLightModeliv(lua_State *L);
int GlLightf(lua_State *L);
int GlLightfv(lua_State *L);
int GlLighti(lua_State *L);
int GlLightiv(lua_State *L);
int GlLineStipple(lua_State *L);
int GlLineWidth(lua_State *L);
int GlListBase(lua_State *L);
int GlLoadIdentity(lua_State *L);
int GlLoadMatrixd(lua_State *L);
int GlLoadMatrixf(lua_State *L);
int GlLoadName(lua_State *L);
int GlLogicOp(lua_State *L);
int GlMap1d(lua_State *L);
int GlMap1f(lua_State *L);
int GlMap2d(lua_State *L);
int GlMap2f(lua_State *L);
int GlMapGrid1d(lua_State *L);
int GlMapGrid1f(lua_State *L);
int GlMapGrid2d(lua_State *L);
int GlMapGrid2f(lua_State *L);
int GlMaterialf(lua_State *L);
int GlMaterialfv(lua_State *L);
int GlMateriali(lua_State *L);
int GlMaterialiv(lua_State *L);
int GlMatrixMode(lua_State *L);
int GlMultMatrixd(lua_State *L);
int GlMultMatrixf(lua_State *L);
int GlNewList(lua_State *L);
int GlNormal3b(lua_State *L);
int GlNormal3bv(lua_State *L);
int GlNormal3d(lua_State *L);
int GlNormal3dv(lua_State *L);
int GlNormal3f(lua_State *L);
int GlNormal3fv(lua_State *L);
int GlNormal3i(lua_State *L);
int GlNormal3iv(lua_State *L);
int GlNormal3s(lua_State *L);
int GlNormal3sv(lua_State *L);
int GlOrtho(lua_State *L);
int GlPassThrough(lua_State *L);
int GlPixelMapfv(lua_State *L);
int GlPixelMapuiv(lua_State *L);
int GlPixelMapusv(lua_State *L);
int GlPixelStoref(lua_State *L);
int GlPixelStorei(lua_State *L);
int GlPixelTransferf(lua_State *L);
int GlPixelTransferi(lua_State *L);
int GlPixelZoom(lua_State *L);
int GlPointSize(lua_State *L);
int GlPolygonMode(lua_State *L);
int GlPolygonStipple(lua_State *L);
int GlPopAttrib(lua_State *L);
int GlPopMatrix(lua_State *L);
int GlPopName(lua_State *L);
int GlPushAttrib(lua_State *L);
int GlPushMatrix(lua_State *L);
int GlPushName(lua_State *L);
int GlRasterPos2d(lua_State *L);
int GlRasterPos2dv(lua_State *L);
int GlRasterPos2f(lua_State *L);
int GlRasterPos2fv(lua_State *L);
int GlRasterPos2i(lua_State *L);
int GlRasterPos2iv(lua_State *L);
int GlRasterPos2s(lua_State *L);
int GlRasterPos2sv(lua_State *L);
int GlRasterPos3d(lua_State *L);
int GlRasterPos3dv(lua_State *L);
int GlRasterPos3f(lua_State *L);
int GlRasterPos3fv(lua_State *L);
int GlRasterPos3i(lua_State *L);
int GlRasterPos3iv(lua_State *L);
int GlRasterPos3s(lua_State *L);
int GlRasterPos3sv(lua_State *L);
int GlRasterPos4d(lua_State *L);
int GlRasterPos4dv(lua_State *L);
int GlRasterPos4f(lua_State *L);
int GlRasterPos4fv(lua_State *L);
int GlRasterPos4i(lua_State *L);
int GlRasterPos4iv(lua_State *L);
int GlRasterPos4s(lua_State *L);
int GlRasterPos4sv(lua_State *L);
int GlReadBuffer(lua_State *L);
int GlReadPixels(lua_State *L);
int GlRectd(lua_State *L);
int GlRectdv(lua_State *L);
int GlRectf(lua_State *L);
int GlRectfv(lua_State *L);
int GlRecti(lua_State *L);
int GlRectiv(lua_State *L);
int GlRects(lua_State *L);
int GlRectsv(lua_State *L);
int GlRenderMode(lua_State *L);
int GlRotated(lua_State *L);
int GlRotatef(lua_State *L);
int GlScaled(lua_State *L);
int GlScalef(lua_State *L);
int GlScissor(lua_State *L);
int GlSelectBuffer(lua_State *L);
int GlShadeModel(lua_State *L);
int GlStencilFunc(lua_State *L);
int GlStencilMask(lua_State *L);
int GlStencilOp(lua_State *L);
int GlTexCoord1d(lua_State *L);
int GlTexCoord1dv(lua_State *L);
int GlTexCoord1f(lua_State *L);
int GlTexCoord1fv(lua_State *L);
int GlTexCoord1i(lua_State *L);
int GlTexCoord1iv(lua_State *L);
int GlTexCoord1s(lua_State *L);
int GlTexCoord1sv(lua_State *L);
int GlTexCoord2d(lua_State *L);
int GlTexCoord2dv(lua_State *L);
int GlTexCoord2f(lua_State *L);
int GlTexCoord2fv(lua_State *L);
int GlTexCoord2i(lua_State *L);
int GlTexCoord2iv(lua_State *L);
int GlTexCoord2s(lua_State *L);
int GlTexCoord2sv(lua_State *L);
int GlTexCoord3d(lua_State *L);
int GlTexCoord3dv(lua_State *L);
int GlTexCoord3f(lua_State *L);
int GlTexCoord3fv(lua_State *L);
int GlTexCoord3i(lua_State *L);
int GlTexCoord3iv(lua_State *L);
int GlTexCoord3s(lua_State *L);
int GlTexCoord3sv(lua_State *L);
int GlTexCoord4d(lua_State *L);
int GlTexCoord4dv(lua_State *L);
int GlTexCoord4f(lua_State *L);
int GlTexCoord4fv(lua_State *L);
int GlTexCoord4i(lua_State *L);
int GlTexCoord4iv(lua_State *L);
int GlTexCoord4s(lua_State *L);
int GlTexCoord4sv(lua_State *L);
int GlTexEnvf(lua_State *L);
int GlTexEnvfv(lua_State *L);
int GlTexEnvi(lua_State *L);
int GlTexEnviv(lua_State *L);
int GlTexGend(lua_State *L);
int GlTexGendv(lua_State *L);
int GlTexGenf(lua_State *L);
int GlTexGenfv(lua_State *L);
int GlTexGeni(lua_State *L);
int GlTexGeniv(lua_State *L);
int GlTexImage1D(lua_State *L);
int GlTexImage2D(lua_State *L);
int GlTexParameterf(lua_State *L);
int GlTexParameterfv(lua_State *L);
int GlTexParameteri(lua_State *L);
int GlTexParameteriv(lua_State *L);
int GlTranslated(lua_State *L);
int GlTranslatef(lua_State *L);
int GlVertex2d(lua_State *L);
int GlVertex2dv(lua_State *L);
int GlVertex2f(lua_State *L);
int GlVertex2fv(lua_State *L);
int GlVertex2i(lua_State *L);
int GlVertex2iv(lua_State *L);
int GlVertex2s(lua_State *L);
int GlVertex2sv(lua_State *L);
int GlVertex3d(lua_State *L);
int GlVertex3dv(lua_State *L);
int GlVertex3f(lua_State *L);
int GlVertex3fv(lua_State *L);
int GlVertex3i(lua_State *L);
int GlVertex3iv(lua_State *L);
int GlVertex3s(lua_State *L);
int GlVertex3sv(lua_State *L);
int GlVertex4d(lua_State *L);
int GlVertex4dv(lua_State *L);
int GlVertex4f(lua_State *L);
int GlVertex4fv(lua_State *L);
int GlVertex4i(lua_State *L);
int GlVertex4iv(lua_State *L);
int GlVertex4s(lua_State *L);
int GlVertex4sv(lua_State *L);
int GlViewport(lua_State *L);
int GlAreTexturesResident(lua_State *L);
int GlArrayElement(lua_State *L);
int GlBindTexture(lua_State *L);
int GlColorPointer(lua_State *L);
int GlCopyTexImage1D(lua_State *L);
int GlCopyTexImage2D(lua_State *L);
int GlCopyTexSubImage1D(lua_State *L);
int GlCopyTexSubImage2D(lua_State *L);
int GlDeleteTextures(lua_State *L);
int GlDisableClientState(lua_State *L);
int GlDrawArrays(lua_State *L);
int GlDrawElements(lua_State *L);
int GlEdgeFlagPointer(lua_State *L);
int GlEnableClientState(lua_State *L);
int GlGenTextures(lua_State *L);
int GlGetPointerv(lua_State *L);
int GlIndexPointer(lua_State *L);
int GlIndexub(lua_State *L);
int GlIndexubv(lua_State *L);
int GlInterleavedArrays(lua_State *L);
int GlIsTexture(lua_State *L);
int GlNormalPointer(lua_State *L);
int GlPolygonOffset(lua_State *L);
int GlPopClientAttrib(lua_State *L);
int GlPrioritizeTextures(lua_State *L);
int GlPushClientAttrib(lua_State *L);
int GlTexCoordPointer(lua_State *L);
int GlTexSubImage1D(lua_State *L);
int GlTexSubImage2D(lua_State *L);
int GlVertexPointer(lua_State *L);
int GlCopyTexSubImage3D(lua_State *L);
int GlDrawRangeElements(lua_State *L);
int GlTexImage3D(lua_State *L);
int GlTexSubImage3D(lua_State *L);
int GlActiveTexture(lua_State *L);
int GlClientActiveTexture(lua_State *L);
int GlCompressedTexImage1D(lua_State *L);
int GlCompressedTexImage2D(lua_State *L);
int GlCompressedTexImage3D(lua_State *L);
int GlCompressedTexSubImage1D(lua_State *L);
int GlCompressedTexSubImage2D(lua_State *L);
int GlCompressedTexSubImage3D(lua_State *L);
int GlGetCompressedTexImage(lua_State *L);
int GlLoadTransposeMatrixd(lua_State *L);
int GlLoadTransposeMatrixf(lua_State *L);
int GlMultTransposeMatrixd(lua_State *L);
int GlMultTransposeMatrixf(lua_State *L);
int GlMultiTexCoord1d(lua_State *L);
int GlMultiTexCoord1dv(lua_State *L);
int GlMultiTexCoord1f(lua_State *L);
int GlMultiTexCoord1fv(lua_State *L);
int GlMultiTexCoord1i(lua_State *L);
int GlMultiTexCoord1iv(lua_State *L);
int GlMultiTexCoord1s(lua_State *L);
int GlMultiTexCoord1sv(lua_State *L);
int GlMultiTexCoord2d(lua_State *L);
int GlMultiTexCoord2dv(lua_State *L);
int GlMultiTexCoord2f(lua_State *L);
int GlMultiTexCoord2fv(lua_State *L);
int GlMultiTexCoord2i(lua_State *L);
int GlMultiTexCoord2iv(lua_State *L);
int GlMultiTexCoord2s(lua_State *L);
int GlMultiTexCoord2sv(lua_State *L);
int GlMultiTexCoord3d(lua_State *L);
int GlMultiTexCoord3dv(lua_State *L);
int GlMultiTexCoord3f(lua_State *L);
int GlMultiTexCoord3fv(lua_State *L);
int GlMultiTexCoord3i(lua_State *L);
int GlMultiTexCoord3iv(lua_State *L);
int GlMultiTexCoord3s(lua_State *L);
int GlMultiTexCoord3sv(lua_State *L);
int GlMultiTexCoord4d(lua_State *L);
int GlMultiTexCoord4dv(lua_State *L);
int GlMultiTexCoord4f(lua_State *L);
int GlMultiTexCoord4fv(lua_State *L);
int GlMultiTexCoord4i(lua_State *L);
int GlMultiTexCoord4iv(lua_State *L);
int GlMultiTexCoord4s(lua_State *L);
int GlMultiTexCoord4sv(lua_State *L);
int GlSampleCoverage(lua_State *L);
int GlBlendColor(lua_State *L);
int GlBlendEquation(lua_State *L);
int GlBlendFuncSeparate(lua_State *L);
int GlFogCoordPointer(lua_State *L);
int GlFogCoordd(lua_State *L);
int GlFogCoorddv(lua_State *L);
int GlFogCoordf(lua_State *L);
int GlFogCoordfv(lua_State *L);
int GlMultiDrawArrays(lua_State *L);
int GlMultiDrawElements(lua_State *L);
int GlPointParameterf(lua_State *L);
int GlPointParameterfv(lua_State *L);
int GlPointParameteri(lua_State *L);
int GlPointParameteriv(lua_State *L);
int GlSecondaryColor3b(lua_State *L);
int GlSecondaryColor3bv(lua_State *L);
int GlSecondaryColor3d(lua_State *L);
int GlSecondaryColor3dv(lua_State *L);
int GlSecondaryColor3f(lua_State *L);
int GlSecondaryColor3fv(lua_State *L);
int GlSecondaryColor3i(lua_State *L);
int GlSecondaryColor3iv(lua_State *L);
int GlSecondaryColor3s(lua_State *L);
int GlSecondaryColor3sv(lua_State *L);
int GlSecondaryColor3ub(lua_State *L);
int GlSecondaryColor3ubv(lua_State *L);
int GlSecondaryColor3ui(lua_State *L);
int GlSecondaryColor3uiv(lua_State *L);
int GlSecondaryColor3us(lua_State *L);
int GlSecondaryColor3usv(lua_State *L);
int GlSecondaryColorPointer(lua_State *L);
int GlWindowPos2d(lua_State *L);
int GlWindowPos2dv(lua_State *L);
int GlWindowPos2f(lua_State *L);
int GlWindowPos2fv(lua_State *L);
int GlWindowPos2i(lua_State *L);
int GlWindowPos2iv(lua_State *L);
int GlWindowPos2s(lua_State *L);
int GlWindowPos2sv(lua_State *L);
int GlWindowPos3d(lua_State *L);
int GlWindowPos3dv(lua_State *L);
int GlWindowPos3f(lua_State *L);
int GlWindowPos3fv(lua_State *L);
int GlWindowPos3i(lua_State *L);
int GlWindowPos3iv(lua_State *L);
int GlWindowPos3s(lua_State *L);
int GlWindowPos3sv(lua_State *L);
int GlBeginQuery(lua_State *L);
int GlBindBuffer(lua_State *L);
int GlBufferData(lua_State *L);
int GlBufferSubData(lua_State *L);
int GlDeleteBuffers(lua_State *L);
int GlDeleteQueries(lua_State *L);
int GlEndQuery(lua_State *L);
int GlGenBuffers(lua_State *L);
int GlGenQueries(lua_State *L);
int GlGetBufferParameteriv(lua_State *L);
int GlGetBufferPointerv(lua_State *L);
int GlGetBufferSubData(lua_State *L);
int GlGetQueryObjectiv(lua_State *L);
int GlGetQueryObjectuiv(lua_State *L);
int GlGetQueryiv(lua_State *L);
int GlIsBuffer(lua_State *L);
int GlIsQuery(lua_State *L);
int GlMapBuffer(lua_State *L);
int GlUnmapBuffer(lua_State *L);
int GlAttachShader(lua_State *L);
int GlBindAttribLocation(lua_State *L);
int GlBlendEquationSeparate(lua_State *L);
int GlCompileShader(lua_State *L);
int GlCreateProgram(lua_State *L);
int GlCreateShader(lua_State *L);
int GlDeleteProgram(lua_State *L);
int GlDeleteShader(lua_State *L);
int GlDetachShader(lua_State *L);
int GlDisableVertexAttribArray(lua_State *L);
int GlDrawBuffers(lua_State *L);
int GlEnableVertexAttribArray(lua_State *L);
int GlGetActiveAttrib(lua_State *L);
int GlGetActiveUniform(lua_State *L);
int GlGetAttachedShaders(lua_State *L);
int GlGetAttribLocation(lua_State *L);
int GlGetProgramInfoLog(lua_State *L);
int GlGetProgramiv(lua_State *L);
int GlGetShaderInfoLog(lua_State *L);
int GlGetShaderSource(lua_State *L);
int GlGetShaderiv(lua_State *L);
int GlGetUniformLocation(lua_State *L);
int GlGetUniformfv(lua_State *L);
int GlGetUniformiv(lua_State *L);
int GlGetVertexAttribPointerv(lua_State *L);
int GlGetVertexAttribdv(lua_State *L);
int GlGetVertexAttribfv(lua_State *L);
int GlGetVertexAttribiv(lua_State *L);
int GlIsProgram(lua_State *L);
int GlIsShader(lua_State *L);
int GlLinkProgram(lua_State *L);
int GlShaderSource(lua_State *L);
int GlStencilFuncSeparate(lua_State *L);
int GlStencilMaskSeparate(lua_State *L);
int GlStencilOpSeparate(lua_State *L);
int GlUniform1f(lua_State *L);
int GlUniform1fv(lua_State *L);
int GlUniform1i(lua_State *L);
int GlUniform1iv(lua_State *L);
int GlUniform2f(lua_State *L);
int GlUniform2fv(lua_State *L);
int GlUniform2i(lua_State *L);
int GlUniform2iv(lua_State *L);
int GlUniform3f(lua_State *L);
int GlUniform3fv(lua_State *L);
int GlUniform3i(lua_State *L);
int GlUniform3iv(lua_State *L);
int GlUniform4f(lua_State *L);
int GlUniform4fv(lua_State *L);
int GlUniform4i(lua_State *L);
int GlUniform4iv(lua_State *L);
int GlUniformMatrix2fv(lua_State *L);
int GlUniformMatrix3fv(lua_State *L);
int GlUniformMatrix4fv(lua_State *L);
int GlUseProgram(lua_State *L);
int GlValidateProgram(lua_State *L);
int GlVertexAttrib1d(lua_State *L);
int GlVertexAttrib1dv(lua_State *L);
int GlVertexAttrib1f(lua_State *L);
int GlVertexAttrib1fv(lua_State *L);
int GlVertexAttrib1s(lua_State *L);
int GlVertexAttrib1sv(lua_State *L);
int GlVertexAttrib2d(lua_State *L);
int GlVertexAttrib2dv(lua_State *L);
int GlVertexAttrib2f(lua_State *L);
int GlVertexAttrib2fv(lua_State *L);
int GlVertexAttrib2s(lua_State *L);
int GlVertexAttrib2sv(lua_State *L);
int GlVertexAttrib3d(lua_State *L);
int GlVertexAttrib3dv(lua_State *L);
int GlVertexAttrib3f(lua_State *L);
int GlVertexAttrib3fv(lua_State *L);
int GlVertexAttrib3s(lua_State *L);
int GlVertexAttrib3sv(lua_State *L);
int GlVertexAttrib4Nbv(lua_State *L);
int GlVertexAttrib4Niv(lua_State *L);
int GlVertexAttrib4Nsv(lua_State *L);
int GlVertexAttrib4Nub(lua_State *L);
int GlVertexAttrib4Nubv(lua_State *L);
int GlVertexAttrib4Nuiv(lua_State *L);
int GlVertexAttrib4Nusv(lua_State *L);
int GlVertexAttrib4bv(lua_State *L);
int GlVertexAttrib4d(lua_State *L);
int GlVertexAttrib4dv(lua_State *L);
int GlVertexAttrib4f(lua_State *L);
int GlVertexAttrib4fv(lua_State *L);
int GlVertexAttrib4iv(lua_State *L);
int GlVertexAttrib4s(lua_State *L);
int GlVertexAttrib4sv(lua_State *L);
int GlVertexAttrib4ubv(lua_State *L);
int GlVertexAttrib4uiv(lua_State *L);
int GlVertexAttrib4usv(lua_State *L);
int GlVertexAttribPointer(lua_State *L);
int GlUniformMatrix2x3fv(lua_State *L);
int GlUniformMatrix2x4fv(lua_State *L);
int GlUniformMatrix3x2fv(lua_State *L);
int GlUniformMatrix3x4fv(lua_State *L);
int GlUniformMatrix4x2fv(lua_State *L);
int GlUniformMatrix4x3fv(lua_State *L);
int GlBeginConditionalRender(lua_State *L);
int GlBeginTransformFeedback(lua_State *L);
int GlBindBufferBase(lua_State *L);
int GlBindBufferRange(lua_State *L);
int GlBindFragDataLocation(lua_State *L);
int GlBindFramebuffer(lua_State *L);
int GlBindRenderbuffer(lua_State *L);
int GlBindVertexArray(lua_State *L);
int GlBlitFramebuffer(lua_State *L);
int GlCheckFramebufferStatus(lua_State *L);
int GlClampColor(lua_State *L);
int GlClearBufferfi(lua_State *L);
int GlClearBufferfv(lua_State *L);
int GlClearBufferiv(lua_State *L);
int GlClearBufferuiv(lua_State *L);
int GlColorMaski(lua_State *L);
int GlDeleteFramebuffers(lua_State *L);
int GlDeleteRenderbuffers(lua_State *L);
int GlDeleteVertexArrays(lua_State *L);
int GlDisablei(lua_State *L);
int GlEnablei(lua_State *L);
int GlEndConditionalRender(lua_State *L);
int GlEndTransformFeedback(lua_State *L);
int GlFlushMappedBufferRange(lua_State *L);
int GlFramebufferRenderbuffer(lua_State *L);
int GlFramebufferTexture1D(lua_State *L);
int GlFramebufferTexture2D(lua_State *L);
int GlFramebufferTexture3D(lua_State *L);
int GlFramebufferTextureLayer(lua_State *L);
int GlGenFramebuffers(lua_State *L);
int GlGenRenderbuffers(lua_State *L);
int GlGenVertexArrays(lua_State *L);
int GlGenerateMipmap(lua_State *L);
int GlGetBooleani_v(lua_State *L);
int GlGetFragDataLocation(lua_State *L);
int GlGetFramebufferAttachmentParameteriv(lua_State *L);
int GlGetIntegeri_v(lua_State *L);
int GlGetRenderbufferParameteriv(lua_State *L);
int GlGetStringi(lua_State *L);
int GlGetTexParameterIiv(lua_State *L);
int GlGetTexParameterIuiv(lua_State *L);
int GlGetTransformFeedbackVarying(lua_State *L);
int GlGetUniformuiv(lua_State *L);
int GlGetVertexAttribIiv(lua_State *L);
int GlGetVertexAttribIuiv(lua_State *L);
int GlIsEnabledi(lua_State *L);
int GlIsFramebuffer(lua_State *L);
int GlIsRenderbuffer(lua_State *L);
int GlIsVertexArray(lua_State *L);
int GlMapBufferRange(lua_State *L);
int GlRenderbufferStorage(lua_State *L);
int GlRenderbufferStorageMultisample(lua_State *L);
int GlTexParameterIiv(lua_State *L);
int GlTexParameterIuiv(lua_State *L);
int GlTransformFeedbackVaryings(lua_State *L);
int GlUniform1ui(lua_State *L);
int GlUniform1uiv(lua_State *L);
int GlUniform2ui(lua_State *L);
int GlUniform2uiv(lua_State *L);
int GlUniform3ui(lua_State *L);
int GlUniform3uiv(lua_State *L);
int GlUniform4ui(lua_State *L);
int GlUniform4uiv(lua_State *L);
int GlVertexAttribI1i(lua_State *L);
int GlVertexAttribI1iv(lua_State *L);
int GlVertexAttribI1ui(lua_State *L);
int GlVertexAttribI1uiv(lua_State *L);
int GlVertexAttribI2i(lua_State *L);
int GlVertexAttribI2iv(lua_State *L);
int GlVertexAttribI2ui(lua_State *L);
int GlVertexAttribI2uiv(lua_State *L);
int GlVertexAttribI3i(lua_State *L);
int GlVertexAttribI3iv(lua_State *L);
int GlVertexAttribI3ui(lua_State *L);
int GlVertexAttribI3uiv(lua_State *L);
int GlVertexAttribI4bv(lua_State *L);
int GlVertexAttribI4i(lua_State *L);
int GlVertexAttribI4iv(lua_State *L);
int GlVertexAttribI4sv(lua_State *L);
int GlVertexAttribI4ubv(lua_State *L);
int GlVertexAttribI4ui(lua_State *L);
int GlVertexAttribI4uiv(lua_State *L);
int GlVertexAttribI4usv(lua_State *L);
int GlVertexAttribIPointer(lua_State *L);
int GlCopyBufferSubData(lua_State *L);
int GlDrawArraysInstanced(lua_State *L);
int GlDrawElementsInstanced(lua_State *L);
int GlGetActiveUniformBlockName(lua_State *L);
int GlGetActiveUniformBlockiv(lua_State *L);
int GlGetActiveUniformName(lua_State *L);
int GlGetActiveUniformsiv(lua_State *L);
int GlGetUniformBlockIndex(lua_State *L);
int GlGetUniformIndices(lua_State *L);
int GlPrimitiveRestartIndex(lua_State *L);
int GlTexBuffer(lua_State *L);
int GlUniformBlockBinding(lua_State *L);
int GlClientWaitSync(lua_State *L);
int GlDeleteSync(lua_State *L);
int GlDrawElementsBaseVertex(lua_State *L);
int GlDrawElementsInstancedBaseVertex(lua_State *L);
int GlDrawRangeElementsBaseVertex(lua_State *L);
int GlFenceSync(lua_State *L);
int GlFramebufferTexture(lua_State *L);
int GlGetBufferParameteri64v(lua_State *L);
int GlGetInteger64i_v(lua_State *L);
int GlGetInteger64v(lua_State *L);
int GlGetMultisamplefv(lua_State *L);
int GlGetSynciv(lua_State *L);
int GlIsSync(lua_State *L);
int GlMultiDrawElementsBaseVertex(lua_State *L);
int GlProvokingVertex(lua_State *L);
int GlSampleMaski(lua_State *L);
int GlTexImage2DMultisample(lua_State *L);
int GlTexImage3DMultisample(lua_State *L);
int GlWaitSync(lua_State *L);
int GlBindFragDataLocationIndexed(lua_State *L);
int GlBindSampler(lua_State *L);
int GlDeleteSamplers(lua_State *L);
int GlGenSamplers(lua_State *L);
int GlGetFragDataIndex(lua_State *L);
int GlGetQueryObjecti64v(lua_State *L);
int GlGetQueryObjectui64v(lua_State *L);
int GlGetSamplerParameterIiv(lua_State *L);
int GlGetSamplerParameterIuiv(lua_State *L);
int GlGetSamplerParameterfv(lua_State *L);
int GlGetSamplerParameteriv(lua_State *L);
int GlIsSampler(lua_State *L);
int GlQueryCounter(lua_State *L);
int GlSamplerParameterIiv(lua_State *L);
int GlSamplerParameterIuiv(lua_State *L);
int GlSamplerParameterf(lua_State *L);
int GlSamplerParameterfv(lua_State *L);
int GlSamplerParameteri(lua_State *L);
int GlSamplerParameteriv(lua_State *L);
int GlVertexAttribDivisor(lua_State *L);
int GlVertexAttribP1ui(lua_State *L);
int GlVertexAttribP1uiv(lua_State *L);
int GlVertexAttribP2ui(lua_State *L);
int GlVertexAttribP2uiv(lua_State *L);
int GlVertexAttribP3ui(lua_State *L);
int GlVertexAttribP3uiv(lua_State *L);
int GlVertexAttribP4ui(lua_State *L);
int GlVertexAttribP4uiv(lua_State *L);
int GlBeginQueryIndexed(lua_State *L);
int GlBindTransformFeedback(lua_State *L);
int GlBlendEquationSeparatei(lua_State *L);
int GlBlendEquationi(lua_State *L);
int GlBlendFuncSeparatei(lua_State *L);
int GlBlendFunci(lua_State *L);
int GlDeleteTransformFeedbacks(lua_State *L);
int GlDrawArraysIndirect(lua_State *L);
int GlDrawElementsIndirect(lua_State *L);
int GlDrawTransformFeedback(lua_State *L);
int GlDrawTransformFeedbackStream(lua_State *L);
int GlEndQueryIndexed(lua_State *L);
int GlGenTransformFeedbacks(lua_State *L);
int GlGetActiveSubroutineName(lua_State *L);
int GlGetActiveSubroutineUniformName(lua_State *L);
int GlGetActiveSubroutineUniformiv(lua_State *L);
int GlGetProgramStageiv(lua_State *L);
int GlGetQueryIndexediv(lua_State *L);
int GlGetSubroutineIndex(lua_State *L);
int GlGetSubroutineUniformLocation(lua_State *L);
int GlGetUniformSubroutineuiv(lua_State *L);
int GlGetUniformdv(lua_State *L);
int GlIsTransformFeedback(lua_State *L);
int GlMinSampleShading(lua_State *L);
int GlPatchParameterfv(lua_State *L);
int GlPatchParameteri(lua_State *L);
int GlPauseTransformFeedback(lua_State *L);
int GlResumeTransformFeedback(lua_State *L);
int GlUniform1d(lua_State *L);
int GlUniform1dv(lua_State *L);
int GlUniform2d(lua_State *L);
int GlUniform2dv(lua_State *L);
int GlUniform3d(lua_State *L);
int GlUniform3dv(lua_State *L);
int GlUniform4d(lua_State *L);
int GlUniform4dv(lua_State *L);
int GlUniformMatrix2dv(lua_State *L);
int GlUniformMatrix2x3dv(lua_State *L);
int GlUniformMatrix2x4dv(lua_State *L);
int GlUniformMatrix3dv(lua_State *L);
int GlUniformMatrix3x2dv(lua_State *L);
int GlUniformMatrix3x4dv(lua_State *L);
int GlUniformMatrix4dv(lua_State *L);
int GlUniformMatrix4x2dv(lua_State *L);
int GlUniformMatrix4x3dv(lua_State *L);
int GlUniformSubroutinesuiv(lua_State *L);
int GlActiveShaderProgram(lua_State *L);
int GlBindProgramPipeline(lua_State *L);
int GlClearDepthf(lua_State *L);
int GlCreateShaderProgramv(lua_State *L);
int GlDeleteProgramPipelines(lua_State *L);
int GlDepthRangeArrayv(lua_State *L);
int GlDepthRangeIndexed(lua_State *L);
int GlDepthRangef(lua_State *L);
int GlGenProgramPipelines(lua_State *L);
int GlGetDoublei_v(lua_State *L);
int GlGetFloati_v(lua_State *L);
int GlGetProgramBinary(lua_State *L);
int GlGetProgramPipelineInfoLog(lua_State *L);
int GlGetProgramPipelineiv(lua_State *L);
int GlGetShaderPrecisionFormat(lua_State *L);
int GlGetVertexAttribLdv(lua_State *L);
int GlIsProgramPipeline(lua_State *L);
int GlProgramBinary(lua_State *L);
int GlProgramParameteri(lua_State *L);
int GlProgramUniform1d(lua_State *L);
int GlProgramUniform1dv(lua_State *L);
int GlProgramUniform1f(lua_State *L);
int GlProgramUniform1fv(lua_State *L);
int GlProgramUniform1i(lua_State *L);
int GlProgramUniform1iv(lua_State *L);
int GlProgramUniform1ui(lua_State *L);
int GlProgramUniform1uiv(lua_State *L);
int GlProgramUniform2d(lua_State *L);
int GlProgramUniform2dv(lua_State *L);
int GlProgramUniform2f(lua_State *L);
int GlProgramUniform2fv(lua_State *L);
int GlProgramUniform2i(lua_State *L);
int GlProgramUniform2iv(lua_State *L);
int GlProgramUniform2ui(lua_State *L);
int GlProgramUniform2uiv(lua_State *L);
int GlProgramUniform3d(lua_State *L);
int GlProgramUniform3dv(lua_State *L);
int GlProgramUniform3f(lua_State *L);
int GlProgramUniform3fv(lua_State *L);
int GlProgramUniform3i(lua_State *L);
int GlProgramUniform3iv(lua_State *L);
int GlProgramUniform3ui(lua_State *L);
int GlProgramUniform3uiv(lua_State *L);
int GlProgramUniform4d(lua_State *L);
int GlProgramUniform4dv(lua_State *L);
int GlProgramUniform4f(lua_State *L);
int GlProgramUniform4fv(lua_State *L);
int GlProgramUniform4i(lua_State *L);
int GlProgramUniform4iv(lua_State *L);
int GlProgramUniform4ui(lua_State *L);
int GlProgramUniform4uiv(lua_State *L);
int GlProgramUniformMatrix2dv(lua_State *L);
int GlProgramUniformMatrix2fv(lua_State *L);
int GlProgramUniformMatrix2x3dv(lua_State *L);
int GlProgramUniformMatrix2x3fv(lua_State *L);
int GlProgramUniformMatrix2x4dv(lua_State *L);
int GlProgramUniformMatrix2x4fv(lua_State *L);
int GlProgramUniformMatrix3dv(lua_State *L);
int GlProgramUniformMatrix3fv(lua_State *L);
int GlProgramUniformMatrix3x2dv(lua_State *L);
int GlProgramUniformMatrix3x2fv(lua_State *L);
int GlProgramUniformMatrix3x4dv(lua_State *L);
int GlProgramUniformMatrix3x4fv(lua_State *L);
int GlProgramUniformMatrix4dv(lua_State *L);
int GlProgramUniformMatrix4fv(lua_State *L);
int GlProgramUniformMatrix4x2dv(lua_State *L);
int GlProgramUniformMatrix4x2fv(lua_State *L);
int GlProgramUniformMatrix4x3dv(lua_State *L);
int GlProgramUniformMatrix4x3fv(lua_State *L);
int GlReleaseShaderCompiler(lua_State *L);
int GlScissorArrayv(lua_State *L);
int GlScissorIndexed(lua_State *L);
int GlScissorIndexedv(lua_State *L);
int GlShaderBinary(lua_State *L);
int GlUseProgramStages(lua_State *L);
int GlValidateProgramPipeline(lua_State *L);
int GlVertexAttribL1d(lua_State *L);
int GlVertexAttribL1dv(lua_State *L);
int GlVertexAttribL2d(lua_State *L);
int GlVertexAttribL2dv(lua_State *L);
int GlVertexAttribL3d(lua_State *L);
int GlVertexAttribL3dv(lua_State *L);
int GlVertexAttribL4d(lua_State *L);
int GlVertexAttribL4dv(lua_State *L);
int GlVertexAttribLPointer(lua_State *L);
int GlViewportArrayv(lua_State *L);
int GlViewportIndexedf(lua_State *L);
int GlViewportIndexedfv(lua_State *L);
int GlBindImageTexture(lua_State *L);
int GlDrawArraysInstancedBaseInstance(lua_State *L);
int GlDrawElementsInstancedBaseInstance(lua_State *L);
int GlDrawElementsInstancedBaseVertexBaseInstance(lua_State *L);
int GlDrawTransformFeedbackInstanced(lua_State *L);
int GlDrawTransformFeedbackStreamInstanced(lua_State *L);
int GlGetActiveAtomicCounterBufferiv(lua_State *L);
int GlGetInternalformativ(lua_State *L);
int GlMemoryBarrier(lua_State *L);
int GlTexStorage1D(lua_State *L);
int GlTexStorage2D(lua_State *L);
int GlTexStorage3D(lua_State *L);
int GlBindVertexBuffer(lua_State *L);
int GlClearBufferData(lua_State *L);
int GlClearBufferSubData(lua_State *L);
int GlCopyImageSubData(lua_State *L);
int GlDebugMessageCallback(lua_State *L);
int GlDebugMessageControl(lua_State *L);
int GlDebugMessageInsert(lua_State *L);
int GlDispatchCompute(lua_State *L);
int GlDispatchComputeIndirect(lua_State *L);
int GlFramebufferParameteri(lua_State *L);
int GlGetDebugMessageLog(lua_State *L);
int GlGetFramebufferParameteriv(lua_State *L);
int GlGetInternalformati64v(lua_State *L);
int GlGetObjectLabel(lua_State *L);
int GlGetObjectPtrLabel(lua_State *L);
int GlGetProgramInterfaceiv(lua_State *L);
int GlGetProgramResourceIndex(lua_State *L);
int GlGetProgramResourceLocation(lua_State *L);
int GlGetProgramResourceLocationIndex(lua_State *L);
int GlGetProgramResourceName(lua_State *L);
int GlGetProgramResourceiv(lua_State *L);
int GlInvalidateBufferData(lua_State *L);
int GlInvalidateBufferSubData(lua_State *L);
int GlInvalidateFramebuffer(lua_State *L);
int GlInvalidateSubFramebuffer(lua_State *L);
int GlInvalidateTexImage(lua_State *L);
int GlInvalidateTexSubImage(lua_State *L);
int GlMultiDrawArraysIndirect(lua_State *L);
int GlMultiDrawElementsIndirect(lua_State *L);
int GlObjectLabel(lua_State *L);
int GlObjectPtrLabel(lua_State *L);
int GlPopDebugGroup(lua_State *L);
int GlPushDebugGroup(lua_State *L);
int GlShaderStorageBlockBinding(lua_State *L);
int GlTexBufferRange(lua_State *L);
int GlTexStorage2DMultisample(lua_State *L);
int GlTexStorage3DMultisample(lua_State *L);
int GlTextureView(lua_State *L);
int GlVertexAttribBinding(lua_State *L);
int GlVertexAttribFormat(lua_State *L);
int GlVertexAttribIFormat(lua_State *L);
int GlVertexAttribLFormat(lua_State *L);
int GlVertexBindingDivisor(lua_State *L);
int GlBindBuffersBase(lua_State *L);
int GlBindBuffersRange(lua_State *L);
int GlBindImageTextures(lua_State *L);
int GlBindSamplers(lua_State *L);
int GlBindTextures(lua_State *L);
int GlBindVertexBuffers(lua_State *L);
int GlBufferStorage(lua_State *L);
int GlClearTexImage(lua_State *L);
int GlClearTexSubImage(lua_State *L);

#define EXPOSED_GL_FUNCTIONS \
    {"gl_accum"                                            , GlAccum                                      }, \
    {"gl_alpha_func"                                       , GlAlphaFunc                                  }, \
    {"gl_begin"                                            , GlBegin                                      }, \
    {"gl_bitmap"                                           , GlBitmap                                     }, \
    {"gl_blend_func"                                       , GlBlendFunc                                  }, \
    {"gl_call_list"                                        , GlCallList                                   }, \
    {"gl_call_lists"                                       , GlCallLists                                  }, \
    {"gl_clear"                                            , GlClear                                      }, \
    {"gl_clear_accum"                                      , GlClearAccum                                 }, \
    {"gl_clear_color"                                      , GlClearColor                                 }, \
    {"gl_clear_depth"                                      , GlClearDepth                                 }, \
    {"gl_clear_index"                                      , GlClearIndex                                 }, \
    {"gl_clear_stencil"                                    , GlClearStencil                               }, \
    {"gl_clip_plane"                                       , GlClipPlane                                  }, \
    {"gl_color3b"                                          , GlColor3b                                    }, \
    {"gl_color3bv"                                         , GlColor3bv                                   }, \
    {"gl_color3d"                                          , GlColor3d                                    }, \
    {"gl_color3dv"                                         , GlColor3dv                                   }, \
    {"gl_color3f"                                          , GlColor3f                                    }, \
    {"gl_color3fv"                                         , GlColor3fv                                   }, \
    {"gl_color3i"                                          , GlColor3i                                    }, \
    {"gl_color3iv"                                         , GlColor3iv                                   }, \
    {"gl_color3s"                                          , GlColor3s                                    }, \
    {"gl_color3sv"                                         , GlColor3sv                                   }, \
    {"gl_color3ub"                                         , GlColor3ub                                   }, \
    {"gl_color3ubv"                                        , GlColor3ubv                                  }, \
    {"gl_color3ui"                                         , GlColor3ui                                   }, \
    {"gl_color3uiv"                                        , GlColor3uiv                                  }, \
    {"gl_color3us"                                         , GlColor3us                                   }, \
    {"gl_color3usv"                                        , GlColor3usv                                  }, \
    {"gl_color4b"                                          , GlColor4b                                    }, \
    {"gl_color4bv"                                         , GlColor4bv                                   }, \
    {"gl_color4d"                                          , GlColor4d                                    }, \
    {"gl_color4dv"                                         , GlColor4dv                                   }, \
    {"gl_color4f"                                          , GlColor4f                                    }, \
    {"gl_color4fv"                                         , GlColor4fv                                   }, \
    {"gl_color4i"                                          , GlColor4i                                    }, \
    {"gl_color4iv"                                         , GlColor4iv                                   }, \
    {"gl_color4s"                                          , GlColor4s                                    }, \
    {"gl_color4sv"                                         , GlColor4sv                                   }, \
    {"gl_color4ub"                                         , GlColor4ub                                   }, \
    {"gl_color4ubv"                                        , GlColor4ubv                                  }, \
    {"gl_color4ui"                                         , GlColor4ui                                   }, \
    {"gl_color4uiv"                                        , GlColor4uiv                                  }, \
    {"gl_color4us"                                         , GlColor4us                                   }, \
    {"gl_color4usv"                                        , GlColor4usv                                  }, \
    {"gl_color_mask"                                       , GlColorMask                                  }, \
    {"gl_color_material"                                   , GlColorMaterial                              }, \
    {"gl_copy_pixels"                                      , GlCopyPixels                                 }, \
    {"gl_cull_face"                                        , GlCullFace                                   }, \
    {"gl_delete_lists"                                     , GlDeleteLists                                }, \
    {"gl_depth_func"                                       , GlDepthFunc                                  }, \
    {"gl_depth_mask"                                       , GlDepthMask                                  }, \
    {"gl_depth_range"                                      , GlDepthRange                                 }, \
    {"gl_disable"                                          , GlDisable                                    }, \
    {"gl_draw_buffer"                                      , GlDrawBuffer                                 }, \
    {"gl_draw_pixels"                                      , GlDrawPixels                                 }, \
    {"gl_edge_flag"                                        , GlEdgeFlag                                   }, \
    {"gl_edge_flagv"                                       , GlEdgeFlagv                                  }, \
    {"gl_enable"                                           , GlEnable                                     }, \
    {"gl_end"                                              , GlEnd                                        }, \
    {"gl_end_list"                                         , GlEndList                                    }, \
    {"gl_eval_coord1d"                                     , GlEvalCoord1d                                }, \
    {"gl_eval_coord1dv"                                    , GlEvalCoord1dv                               }, \
    {"gl_eval_coord1f"                                     , GlEvalCoord1f                                }, \
    {"gl_eval_coord1fv"                                    , GlEvalCoord1fv                               }, \
    {"gl_eval_coord2d"                                     , GlEvalCoord2d                                }, \
    {"gl_eval_coord2dv"                                    , GlEvalCoord2dv                               }, \
    {"gl_eval_coord2f"                                     , GlEvalCoord2f                                }, \
    {"gl_eval_coord2fv"                                    , GlEvalCoord2fv                               }, \
    {"gl_eval_mesh1"                                       , GlEvalMesh1                                  }, \
    {"gl_eval_mesh2"                                       , GlEvalMesh2                                  }, \
    {"gl_eval_point1"                                      , GlEvalPoint1                                 }, \
    {"gl_eval_point2"                                      , GlEvalPoint2                                 }, \
    {"gl_feedback_buffer"                                  , GlFeedbackBuffer                             }, \
    {"gl_finish"                                           , GlFinish                                     }, \
    {"gl_flush"                                            , GlFlush                                      }, \
    {"gl_fogf"                                             , GlFogf                                       }, \
    {"gl_fogfv"                                            , GlFogfv                                      }, \
    {"gl_fogi"                                             , GlFogi                                       }, \
    {"gl_fogiv"                                            , GlFogiv                                      }, \
    {"gl_front_face"                                       , GlFrontFace                                  }, \
    {"gl_frustum"                                          , GlFrustum                                    }, \
    {"gl_gen_lists"                                        , GlGenLists                                   }, \
    {"gl_get_booleanv"                                     , GlGetBooleanv                                }, \
    {"gl_get_clip_plane"                                   , GlGetClipPlane                               }, \
    {"gl_get_doublev"                                      , GlGetDoublev                                 }, \
    {"gl_get_error"                                        , GlGetError                                   }, \
    {"gl_get_floatv"                                       , GlGetFloatv                                  }, \
    {"gl_get_integerv"                                     , GlGetIntegerv                                }, \
    {"gl_get_lightfv"                                      , GlGetLightfv                                 }, \
    {"gl_get_lightiv"                                      , GlGetLightiv                                 }, \
    {"gl_get_mapdv"                                        , GlGetMapdv                                   }, \
    {"gl_get_mapfv"                                        , GlGetMapfv                                   }, \
    {"gl_get_mapiv"                                        , GlGetMapiv                                   }, \
    {"gl_get_materialfv"                                   , GlGetMaterialfv                              }, \
    {"gl_get_materialiv"                                   , GlGetMaterialiv                              }, \
    {"gl_get_pixel_mapfv"                                  , GlGetPixelMapfv                              }, \
    {"gl_get_pixel_mapuiv"                                 , GlGetPixelMapuiv                             }, \
    {"gl_get_pixel_mapusv"                                 , GlGetPixelMapusv                             }, \
    {"gl_get_polygon_stipple"                              , GlGetPolygonStipple                          }, \
    {"gl_get_string"                                       , GlGetString                                  }, \
    {"gl_get_tex_envfv"                                    , GlGetTexEnvfv                                }, \
    {"gl_get_tex_enviv"                                    , GlGetTexEnviv                                }, \
    {"gl_get_tex_gendv"                                    , GlGetTexGendv                                }, \
    {"gl_get_tex_genfv"                                    , GlGetTexGenfv                                }, \
    {"gl_get_tex_geniv"                                    , GlGetTexGeniv                                }, \
    {"gl_get_tex_image"                                    , GlGetTexImage                                }, \
    {"gl_get_tex_level_parameterfv"                        , GlGetTexLevelParameterfv                     }, \
    {"gl_get_tex_level_parameteriv"                        , GlGetTexLevelParameteriv                     }, \
    {"gl_get_tex_parameterfv"                              , GlGetTexParameterfv                          }, \
    {"gl_get_tex_parameteriv"                              , GlGetTexParameteriv                          }, \
    {"gl_hint"                                             , GlHint                                       }, \
    {"gl_index_mask"                                       , GlIndexMask                                  }, \
    {"gl_indexd"                                           , GlIndexd                                     }, \
    {"gl_indexdv"                                          , GlIndexdv                                    }, \
    {"gl_indexf"                                           , GlIndexf                                     }, \
    {"gl_indexfv"                                          , GlIndexfv                                    }, \
    {"gl_indexi"                                           , GlIndexi                                     }, \
    {"gl_indexiv"                                          , GlIndexiv                                    }, \
    {"gl_indexs"                                           , GlIndexs                                     }, \
    {"gl_indexsv"                                          , GlIndexsv                                    }, \
    {"gl_init_names"                                       , GlInitNames                                  }, \
    {"gl_is_enabled"                                       , GlIsEnabled                                  }, \
    {"gl_is_list"                                          , GlIsList                                     }, \
    {"gl_light_modelf"                                     , GlLightModelf                                }, \
    {"gl_light_modelfv"                                    , GlLightModelfv                               }, \
    {"gl_light_modeli"                                     , GlLightModeli                                }, \
    {"gl_light_modeliv"                                    , GlLightModeliv                               }, \
    {"gl_lightf"                                           , GlLightf                                     }, \
    {"gl_lightfv"                                          , GlLightfv                                    }, \
    {"gl_lighti"                                           , GlLighti                                     }, \
    {"gl_lightiv"                                          , GlLightiv                                    }, \
    {"gl_line_stipple"                                     , GlLineStipple                                }, \
    {"gl_line_width"                                       , GlLineWidth                                  }, \
    {"gl_list_base"                                        , GlListBase                                   }, \
    {"gl_load_identity"                                    , GlLoadIdentity                               }, \
    {"gl_load_matrixd"                                     , GlLoadMatrixd                                }, \
    {"gl_load_matrixf"                                     , GlLoadMatrixf                                }, \
    {"gl_load_name"                                        , GlLoadName                                   }, \
    {"gl_logic_op"                                         , GlLogicOp                                    }, \
    {"gl_map1d"                                            , GlMap1d                                      }, \
    {"gl_map1f"                                            , GlMap1f                                      }, \
    {"gl_map2d"                                            , GlMap2d                                      }, \
    {"gl_map2f"                                            , GlMap2f                                      }, \
    {"gl_map_grid1d"                                       , GlMapGrid1d                                  }, \
    {"gl_map_grid1f"                                       , GlMapGrid1f                                  }, \
    {"gl_map_grid2d"                                       , GlMapGrid2d                                  }, \
    {"gl_map_grid2f"                                       , GlMapGrid2f                                  }, \
    {"gl_materialf"                                        , GlMaterialf                                  }, \
    {"gl_materialfv"                                       , GlMaterialfv                                 }, \
    {"gl_materiali"                                        , GlMateriali                                  }, \
    {"gl_materialiv"                                       , GlMaterialiv                                 }, \
    {"gl_matrix_mode"                                      , GlMatrixMode                                 }, \
    {"gl_mult_matrixd"                                     , GlMultMatrixd                                }, \
    {"gl_mult_matrixf"                                     , GlMultMatrixf                                }, \
    {"gl_new_list"                                         , GlNewList                                    }, \
    {"gl_normal3b"                                         , GlNormal3b                                   }, \
    {"gl_normal3bv"                                        , GlNormal3bv                                  }, \
    {"gl_normal3d"                                         , GlNormal3d                                   }, \
    {"gl_normal3dv"                                        , GlNormal3dv                                  }, \
    {"gl_normal3f"                                         , GlNormal3f                                   }, \
    {"gl_normal3fv"                                        , GlNormal3fv                                  }, \
    {"gl_normal3i"                                         , GlNormal3i                                   }, \
    {"gl_normal3iv"                                        , GlNormal3iv                                  }, \
    {"gl_normal3s"                                         , GlNormal3s                                   }, \
    {"gl_normal3sv"                                        , GlNormal3sv                                  }, \
    {"gl_ortho"                                            , GlOrtho                                      }, \
    {"gl_pass_through"                                     , GlPassThrough                                }, \
    {"gl_pixel_mapfv"                                      , GlPixelMapfv                                 }, \
    {"gl_pixel_mapuiv"                                     , GlPixelMapuiv                                }, \
    {"gl_pixel_mapusv"                                     , GlPixelMapusv                                }, \
    {"gl_pixel_storef"                                     , GlPixelStoref                                }, \
    {"gl_pixel_storei"                                     , GlPixelStorei                                }, \
    {"gl_pixel_transferf"                                  , GlPixelTransferf                             }, \
    {"gl_pixel_transferi"                                  , GlPixelTransferi                             }, \
    {"gl_pixel_zoom"                                       , GlPixelZoom                                  }, \
    {"gl_point_size"                                       , GlPointSize                                  }, \
    {"gl_polygon_mode"                                     , GlPolygonMode                                }, \
    {"gl_polygon_stipple"                                  , GlPolygonStipple                             }, \
    {"gl_pop_attrib"                                       , GlPopAttrib                                  }, \
    {"gl_pop_matrix"                                       , GlPopMatrix                                  }, \
    {"gl_pop_name"                                         , GlPopName                                    }, \
    {"gl_push_attrib"                                      , GlPushAttrib                                 }, \
    {"gl_push_matrix"                                      , GlPushMatrix                                 }, \
    {"gl_push_name"                                        , GlPushName                                   }, \
    {"gl_raster_pos2d"                                     , GlRasterPos2d                                }, \
    {"gl_raster_pos2dv"                                    , GlRasterPos2dv                               }, \
    {"gl_raster_pos2f"                                     , GlRasterPos2f                                }, \
    {"gl_raster_pos2fv"                                    , GlRasterPos2fv                               }, \
    {"gl_raster_pos2i"                                     , GlRasterPos2i                                }, \
    {"gl_raster_pos2iv"                                    , GlRasterPos2iv                               }, \
    {"gl_raster_pos2s"                                     , GlRasterPos2s                                }, \
    {"gl_raster_pos2sv"                                    , GlRasterPos2sv                               }, \
    {"gl_raster_pos3d"                                     , GlRasterPos3d                                }, \
    {"gl_raster_pos3dv"                                    , GlRasterPos3dv                               }, \
    {"gl_raster_pos3f"                                     , GlRasterPos3f                                }, \
    {"gl_raster_pos3fv"                                    , GlRasterPos3fv                               }, \
    {"gl_raster_pos3i"                                     , GlRasterPos3i                                }, \
    {"gl_raster_pos3iv"                                    , GlRasterPos3iv                               }, \
    {"gl_raster_pos3s"                                     , GlRasterPos3s                                }, \
    {"gl_raster_pos3sv"                                    , GlRasterPos3sv                               }, \
    {"gl_raster_pos4d"                                     , GlRasterPos4d                                }, \
    {"gl_raster_pos4dv"                                    , GlRasterPos4dv                               }, \
    {"gl_raster_pos4f"                                     , GlRasterPos4f                                }, \
    {"gl_raster_pos4fv"                                    , GlRasterPos4fv                               }, \
    {"gl_raster_pos4i"                                     , GlRasterPos4i                                }, \
    {"gl_raster_pos4iv"                                    , GlRasterPos4iv                               }, \
    {"gl_raster_pos4s"                                     , GlRasterPos4s                                }, \
    {"gl_raster_pos4sv"                                    , GlRasterPos4sv                               }, \
    {"gl_read_buffer"                                      , GlReadBuffer                                 }, \
    {"gl_read_pixels"                                      , GlReadPixels                                 }, \
    {"gl_rectd"                                            , GlRectd                                      }, \
    {"gl_rectdv"                                           , GlRectdv                                     }, \
    {"gl_rectf"                                            , GlRectf                                      }, \
    {"gl_rectfv"                                           , GlRectfv                                     }, \
    {"gl_recti"                                            , GlRecti                                      }, \
    {"gl_rectiv"                                           , GlRectiv                                     }, \
    {"gl_rects"                                            , GlRects                                      }, \
    {"gl_rectsv"                                           , GlRectsv                                     }, \
    {"gl_render_mode"                                      , GlRenderMode                                 }, \
    {"gl_rotated"                                          , GlRotated                                    }, \
    {"gl_rotatef"                                          , GlRotatef                                    }, \
    {"gl_scaled"                                           , GlScaled                                     }, \
    {"gl_scalef"                                           , GlScalef                                     }, \
    {"gl_scissor"                                          , GlScissor                                    }, \
    {"gl_select_buffer"                                    , GlSelectBuffer                               }, \
    {"gl_shade_model"                                      , GlShadeModel                                 }, \
    {"gl_stencil_func"                                     , GlStencilFunc                                }, \
    {"gl_stencil_mask"                                     , GlStencilMask                                }, \
    {"gl_stencil_op"                                       , GlStencilOp                                  }, \
    {"gl_tex_coord1d"                                      , GlTexCoord1d                                 }, \
    {"gl_tex_coord1dv"                                     , GlTexCoord1dv                                }, \
    {"gl_tex_coord1f"                                      , GlTexCoord1f                                 }, \
    {"gl_tex_coord1fv"                                     , GlTexCoord1fv                                }, \
    {"gl_tex_coord1i"                                      , GlTexCoord1i                                 }, \
    {"gl_tex_coord1iv"                                     , GlTexCoord1iv                                }, \
    {"gl_tex_coord1s"                                      , GlTexCoord1s                                 }, \
    {"gl_tex_coord1sv"                                     , GlTexCoord1sv                                }, \
    {"gl_tex_coord2d"                                      , GlTexCoord2d                                 }, \
    {"gl_tex_coord2dv"                                     , GlTexCoord2dv                                }, \
    {"gl_tex_coord2f"                                      , GlTexCoord2f                                 }, \
    {"gl_tex_coord2fv"                                     , GlTexCoord2fv                                }, \
    {"gl_tex_coord2i"                                      , GlTexCoord2i                                 }, \
    {"gl_tex_coord2iv"                                     , GlTexCoord2iv                                }, \
    {"gl_tex_coord2s"                                      , GlTexCoord2s                                 }, \
    {"gl_tex_coord2sv"                                     , GlTexCoord2sv                                }, \
    {"gl_tex_coord3d"                                      , GlTexCoord3d                                 }, \
    {"gl_tex_coord3dv"                                     , GlTexCoord3dv                                }, \
    {"gl_tex_coord3f"                                      , GlTexCoord3f                                 }, \
    {"gl_tex_coord3fv"                                     , GlTexCoord3fv                                }, \
    {"gl_tex_coord3i"                                      , GlTexCoord3i                                 }, \
    {"gl_tex_coord3iv"                                     , GlTexCoord3iv                                }, \
    {"gl_tex_coord3s"                                      , GlTexCoord3s                                 }, \
    {"gl_tex_coord3sv"                                     , GlTexCoord3sv                                }, \
    {"gl_tex_coord4d"                                      , GlTexCoord4d                                 }, \
    {"gl_tex_coord4dv"                                     , GlTexCoord4dv                                }, \
    {"gl_tex_coord4f"                                      , GlTexCoord4f                                 }, \
    {"gl_tex_coord4fv"                                     , GlTexCoord4fv                                }, \
    {"gl_tex_coord4i"                                      , GlTexCoord4i                                 }, \
    {"gl_tex_coord4iv"                                     , GlTexCoord4iv                                }, \
    {"gl_tex_coord4s"                                      , GlTexCoord4s                                 }, \
    {"gl_tex_coord4sv"                                     , GlTexCoord4sv                                }, \
    {"gl_tex_envf"                                         , GlTexEnvf                                    }, \
    {"gl_tex_envfv"                                        , GlTexEnvfv                                   }, \
    {"gl_tex_envi"                                         , GlTexEnvi                                    }, \
    {"gl_tex_enviv"                                        , GlTexEnviv                                   }, \
    {"gl_tex_gend"                                         , GlTexGend                                    }, \
    {"gl_tex_gendv"                                        , GlTexGendv                                   }, \
    {"gl_tex_genf"                                         , GlTexGenf                                    }, \
    {"gl_tex_genfv"                                        , GlTexGenfv                                   }, \
    {"gl_tex_geni"                                         , GlTexGeni                                    }, \
    {"gl_tex_geniv"                                        , GlTexGeniv                                   }, \
    {"gl_tex_image1_d"                                     , GlTexImage1D                                 }, \
    {"gl_tex_image2_d"                                     , GlTexImage2D                                 }, \
    {"gl_tex_parameterf"                                   , GlTexParameterf                              }, \
    {"gl_tex_parameterfv"                                  , GlTexParameterfv                             }, \
    {"gl_tex_parameteri"                                   , GlTexParameteri                              }, \
    {"gl_tex_parameteriv"                                  , GlTexParameteriv                             }, \
    {"gl_translated"                                       , GlTranslated                                 }, \
    {"gl_translatef"                                       , GlTranslatef                                 }, \
    {"gl_vertex2d"                                         , GlVertex2d                                   }, \
    {"gl_vertex2dv"                                        , GlVertex2dv                                  }, \
    {"gl_vertex2f"                                         , GlVertex2f                                   }, \
    {"gl_vertex2fv"                                        , GlVertex2fv                                  }, \
    {"gl_vertex2i"                                         , GlVertex2i                                   }, \
    {"gl_vertex2iv"                                        , GlVertex2iv                                  }, \
    {"gl_vertex2s"                                         , GlVertex2s                                   }, \
    {"gl_vertex2sv"                                        , GlVertex2sv                                  }, \
    {"gl_vertex3d"                                         , GlVertex3d                                   }, \
    {"gl_vertex3dv"                                        , GlVertex3dv                                  }, \
    {"gl_vertex3f"                                         , GlVertex3f                                   }, \
    {"gl_vertex3fv"                                        , GlVertex3fv                                  }, \
    {"gl_vertex3i"                                         , GlVertex3i                                   }, \
    {"gl_vertex3iv"                                        , GlVertex3iv                                  }, \
    {"gl_vertex3s"                                         , GlVertex3s                                   }, \
    {"gl_vertex3sv"                                        , GlVertex3sv                                  }, \
    {"gl_vertex4d"                                         , GlVertex4d                                   }, \
    {"gl_vertex4dv"                                        , GlVertex4dv                                  }, \
    {"gl_vertex4f"                                         , GlVertex4f                                   }, \
    {"gl_vertex4fv"                                        , GlVertex4fv                                  }, \
    {"gl_vertex4i"                                         , GlVertex4i                                   }, \
    {"gl_vertex4iv"                                        , GlVertex4iv                                  }, \
    {"gl_vertex4s"                                         , GlVertex4s                                   }, \
    {"gl_vertex4sv"                                        , GlVertex4sv                                  }, \
    {"gl_viewport"                                         , GlViewport                                   }, \
    {"gl_are_textures_resident"                            , GlAreTexturesResident                        }, \
    {"gl_array_element"                                    , GlArrayElement                               }, \
    {"gl_bind_texture"                                     , GlBindTexture                                }, \
    {"gl_color_pointer"                                    , GlColorPointer                               }, \
    {"gl_copy_tex_image1_d"                                , GlCopyTexImage1D                             }, \
    {"gl_copy_tex_image2_d"                                , GlCopyTexImage2D                             }, \
    {"gl_copy_tex_sub_image1_d"                            , GlCopyTexSubImage1D                          }, \
    {"gl_copy_tex_sub_image2_d"                            , GlCopyTexSubImage2D                          }, \
    {"gl_delete_textures"                                  , GlDeleteTextures                             }, \
    {"gl_disable_client_state"                             , GlDisableClientState                         }, \
    {"gl_draw_arrays"                                      , GlDrawArrays                                 }, \
    {"gl_draw_elements"                                    , GlDrawElements                               }, \
    {"gl_edge_flag_pointer"                                , GlEdgeFlagPointer                            }, \
    {"gl_enable_client_state"                              , GlEnableClientState                          }, \
    {"gl_gen_textures"                                     , GlGenTextures                                }, \
    {"gl_get_pointerv"                                     , GlGetPointerv                                }, \
    {"gl_index_pointer"                                    , GlIndexPointer                               }, \
    {"gl_indexub"                                          , GlIndexub                                    }, \
    {"gl_indexubv"                                         , GlIndexubv                                   }, \
    {"gl_interleaved_arrays"                               , GlInterleavedArrays                          }, \
    {"gl_is_texture"                                       , GlIsTexture                                  }, \
    {"gl_normal_pointer"                                   , GlNormalPointer                              }, \
    {"gl_polygon_offset"                                   , GlPolygonOffset                              }, \
    {"gl_pop_client_attrib"                                , GlPopClientAttrib                            }, \
    {"gl_prioritize_textures"                              , GlPrioritizeTextures                         }, \
    {"gl_push_client_attrib"                               , GlPushClientAttrib                           }, \
    {"gl_tex_coord_pointer"                                , GlTexCoordPointer                            }, \
    {"gl_tex_sub_image1_d"                                 , GlTexSubImage1D                              }, \
    {"gl_tex_sub_image2_d"                                 , GlTexSubImage2D                              }, \
    {"gl_vertex_pointer"                                   , GlVertexPointer                              }, \
    {"gl_copy_tex_sub_image3_d"                            , GlCopyTexSubImage3D                          }, \
    {"gl_draw_range_elements"                              , GlDrawRangeElements                          }, \
    {"gl_tex_image3_d"                                     , GlTexImage3D                                 }, \
    {"gl_tex_sub_image3_d"                                 , GlTexSubImage3D                              }, \
    {"gl_active_texture"                                   , GlActiveTexture                              }, \
    {"gl_client_active_texture"                            , GlClientActiveTexture                        }, \
    {"gl_compressed_tex_image1_d"                          , GlCompressedTexImage1D                       }, \
    {"gl_compressed_tex_image2_d"                          , GlCompressedTexImage2D                       }, \
    {"gl_compressed_tex_image3_d"                          , GlCompressedTexImage3D                       }, \
    {"gl_compressed_tex_sub_image1_d"                      , GlCompressedTexSubImage1D                    }, \
    {"gl_compressed_tex_sub_image2_d"                      , GlCompressedTexSubImage2D                    }, \
    {"gl_compressed_tex_sub_image3_d"                      , GlCompressedTexSubImage3D                    }, \
    {"gl_get_compressed_tex_image"                         , GlGetCompressedTexImage                      }, \
    {"gl_load_transpose_matrixd"                           , GlLoadTransposeMatrixd                       }, \
    {"gl_load_transpose_matrixf"                           , GlLoadTransposeMatrixf                       }, \
    {"gl_mult_transpose_matrixd"                           , GlMultTransposeMatrixd                       }, \
    {"gl_mult_transpose_matrixf"                           , GlMultTransposeMatrixf                       }, \
    {"gl_multi_tex_coord1d"                                , GlMultiTexCoord1d                            }, \
    {"gl_multi_tex_coord1dv"                               , GlMultiTexCoord1dv                           }, \
    {"gl_multi_tex_coord1f"                                , GlMultiTexCoord1f                            }, \
    {"gl_multi_tex_coord1fv"                               , GlMultiTexCoord1fv                           }, \
    {"gl_multi_tex_coord1i"                                , GlMultiTexCoord1i                            }, \
    {"gl_multi_tex_coord1iv"                               , GlMultiTexCoord1iv                           }, \
    {"gl_multi_tex_coord1s"                                , GlMultiTexCoord1s                            }, \
    {"gl_multi_tex_coord1sv"                               , GlMultiTexCoord1sv                           }, \
    {"gl_multi_tex_coord2d"                                , GlMultiTexCoord2d                            }, \
    {"gl_multi_tex_coord2dv"                               , GlMultiTexCoord2dv                           }, \
    {"gl_multi_tex_coord2f"                                , GlMultiTexCoord2f                            }, \
    {"gl_multi_tex_coord2fv"                               , GlMultiTexCoord2fv                           }, \
    {"gl_multi_tex_coord2i"                                , GlMultiTexCoord2i                            }, \
    {"gl_multi_tex_coord2iv"                               , GlMultiTexCoord2iv                           }, \
    {"gl_multi_tex_coord2s"                                , GlMultiTexCoord2s                            }, \
    {"gl_multi_tex_coord2sv"                               , GlMultiTexCoord2sv                           }, \
    {"gl_multi_tex_coord3d"                                , GlMultiTexCoord3d                            }, \
    {"gl_multi_tex_coord3dv"                               , GlMultiTexCoord3dv                           }, \
    {"gl_multi_tex_coord3f"                                , GlMultiTexCoord3f                            }, \
    {"gl_multi_tex_coord3fv"                               , GlMultiTexCoord3fv                           }, \
    {"gl_multi_tex_coord3i"                                , GlMultiTexCoord3i                            }, \
    {"gl_multi_tex_coord3iv"                               , GlMultiTexCoord3iv                           }, \
    {"gl_multi_tex_coord3s"                                , GlMultiTexCoord3s                            }, \
    {"gl_multi_tex_coord3sv"                               , GlMultiTexCoord3sv                           }, \
    {"gl_multi_tex_coord4d"                                , GlMultiTexCoord4d                            }, \
    {"gl_multi_tex_coord4dv"                               , GlMultiTexCoord4dv                           }, \
    {"gl_multi_tex_coord4f"                                , GlMultiTexCoord4f                            }, \
    {"gl_multi_tex_coord4fv"                               , GlMultiTexCoord4fv                           }, \
    {"gl_multi_tex_coord4i"                                , GlMultiTexCoord4i                            }, \
    {"gl_multi_tex_coord4iv"                               , GlMultiTexCoord4iv                           }, \
    {"gl_multi_tex_coord4s"                                , GlMultiTexCoord4s                            }, \
    {"gl_multi_tex_coord4sv"                               , GlMultiTexCoord4sv                           }, \
    {"gl_sample_coverage"                                  , GlSampleCoverage                             }, \
    {"gl_blend_color"                                      , GlBlendColor                                 }, \
    {"gl_blend_equation"                                   , GlBlendEquation                              }, \
    {"gl_blend_func_separate"                              , GlBlendFuncSeparate                          }, \
    {"gl_fog_coord_pointer"                                , GlFogCoordPointer                            }, \
    {"gl_fog_coordd"                                       , GlFogCoordd                                  }, \
    {"gl_fog_coorddv"                                      , GlFogCoorddv                                 }, \
    {"gl_fog_coordf"                                       , GlFogCoordf                                  }, \
    {"gl_fog_coordfv"                                      , GlFogCoordfv                                 }, \
    {"gl_multi_draw_arrays"                                , GlMultiDrawArrays                            }, \
    {"gl_multi_draw_elements"                              , GlMultiDrawElements                          }, \
    {"gl_point_parameterf"                                 , GlPointParameterf                            }, \
    {"gl_point_parameterfv"                                , GlPointParameterfv                           }, \
    {"gl_point_parameteri"                                 , GlPointParameteri                            }, \
    {"gl_point_parameteriv"                                , GlPointParameteriv                           }, \
    {"gl_secondary_color3b"                                , GlSecondaryColor3b                           }, \
    {"gl_secondary_color3bv"                               , GlSecondaryColor3bv                          }, \
    {"gl_secondary_color3d"                                , GlSecondaryColor3d                           }, \
    {"gl_secondary_color3dv"                               , GlSecondaryColor3dv                          }, \
    {"gl_secondary_color3f"                                , GlSecondaryColor3f                           }, \
    {"gl_secondary_color3fv"                               , GlSecondaryColor3fv                          }, \
    {"gl_secondary_color3i"                                , GlSecondaryColor3i                           }, \
    {"gl_secondary_color3iv"                               , GlSecondaryColor3iv                          }, \
    {"gl_secondary_color3s"                                , GlSecondaryColor3s                           }, \
    {"gl_secondary_color3sv"                               , GlSecondaryColor3sv                          }, \
    {"gl_secondary_color3ub"                               , GlSecondaryColor3ub                          }, \
    {"gl_secondary_color3ubv"                              , GlSecondaryColor3ubv                         }, \
    {"gl_secondary_color3ui"                               , GlSecondaryColor3ui                          }, \
    {"gl_secondary_color3uiv"                              , GlSecondaryColor3uiv                         }, \
    {"gl_secondary_color3us"                               , GlSecondaryColor3us                          }, \
    {"gl_secondary_color3usv"                              , GlSecondaryColor3usv                         }, \
    {"gl_secondary_color_pointer"                          , GlSecondaryColorPointer                      }, \
    {"gl_window_pos2d"                                     , GlWindowPos2d                                }, \
    {"gl_window_pos2dv"                                    , GlWindowPos2dv                               }, \
    {"gl_window_pos2f"                                     , GlWindowPos2f                                }, \
    {"gl_window_pos2fv"                                    , GlWindowPos2fv                               }, \
    {"gl_window_pos2i"                                     , GlWindowPos2i                                }, \
    {"gl_window_pos2iv"                                    , GlWindowPos2iv                               }, \
    {"gl_window_pos2s"                                     , GlWindowPos2s                                }, \
    {"gl_window_pos2sv"                                    , GlWindowPos2sv                               }, \
    {"gl_window_pos3d"                                     , GlWindowPos3d                                }, \
    {"gl_window_pos3dv"                                    , GlWindowPos3dv                               }, \
    {"gl_window_pos3f"                                     , GlWindowPos3f                                }, \
    {"gl_window_pos3fv"                                    , GlWindowPos3fv                               }, \
    {"gl_window_pos3i"                                     , GlWindowPos3i                                }, \
    {"gl_window_pos3iv"                                    , GlWindowPos3iv                               }, \
    {"gl_window_pos3s"                                     , GlWindowPos3s                                }, \
    {"gl_window_pos3sv"                                    , GlWindowPos3sv                               }, \
    {"gl_begin_query"                                      , GlBeginQuery                                 }, \
    {"gl_bind_buffer"                                      , GlBindBuffer                                 }, \
    {"gl_buffer_data"                                      , GlBufferData                                 }, \
    {"gl_buffer_sub_data"                                  , GlBufferSubData                              }, \
    {"gl_delete_buffers"                                   , GlDeleteBuffers                              }, \
    {"gl_delete_queries"                                   , GlDeleteQueries                              }, \
    {"gl_end_query"                                        , GlEndQuery                                   }, \
    {"gl_gen_buffers"                                      , GlGenBuffers                                 }, \
    {"gl_gen_queries"                                      , GlGenQueries                                 }, \
    {"gl_get_buffer_parameteriv"                           , GlGetBufferParameteriv                       }, \
    {"gl_get_buffer_pointerv"                              , GlGetBufferPointerv                          }, \
    {"gl_get_buffer_sub_data"                              , GlGetBufferSubData                           }, \
    {"gl_get_query_objectiv"                               , GlGetQueryObjectiv                           }, \
    {"gl_get_query_objectuiv"                              , GlGetQueryObjectuiv                          }, \
    {"gl_get_queryiv"                                      , GlGetQueryiv                                 }, \
    {"gl_is_buffer"                                        , GlIsBuffer                                   }, \
    {"gl_is_query"                                         , GlIsQuery                                    }, \
    {"gl_map_buffer"                                       , GlMapBuffer                                  }, \
    {"gl_unmap_buffer"                                     , GlUnmapBuffer                                }, \
    {"gl_attach_shader"                                    , GlAttachShader                               }, \
    {"gl_bind_attrib_location"                             , GlBindAttribLocation                         }, \
    {"gl_blend_equation_separate"                          , GlBlendEquationSeparate                      }, \
    {"gl_compile_shader"                                   , GlCompileShader                              }, \
    {"gl_create_program"                                   , GlCreateProgram                              }, \
    {"gl_create_shader"                                    , GlCreateShader                               }, \
    {"gl_delete_program"                                   , GlDeleteProgram                              }, \
    {"gl_delete_shader"                                    , GlDeleteShader                               }, \
    {"gl_detach_shader"                                    , GlDetachShader                               }, \
    {"gl_disable_vertex_attrib_array"                      , GlDisableVertexAttribArray                   }, \
    {"gl_draw_buffers"                                     , GlDrawBuffers                                }, \
    {"gl_enable_vertex_attrib_array"                       , GlEnableVertexAttribArray                    }, \
    {"gl_get_active_attrib"                                , GlGetActiveAttrib                            }, \
    {"gl_get_active_uniform"                               , GlGetActiveUniform                           }, \
    {"gl_get_attached_shaders"                             , GlGetAttachedShaders                         }, \
    {"gl_get_attrib_location"                              , GlGetAttribLocation                          }, \
    {"gl_get_program_info_log"                             , GlGetProgramInfoLog                          }, \
    {"gl_get_programiv"                                    , GlGetProgramiv                               }, \
    {"gl_get_shader_info_log"                              , GlGetShaderInfoLog                           }, \
    {"gl_get_shader_source"                                , GlGetShaderSource                            }, \
    {"gl_get_shaderiv"                                     , GlGetShaderiv                                }, \
    {"gl_get_uniform_location"                             , GlGetUniformLocation                         }, \
    {"gl_get_uniformfv"                                    , GlGetUniformfv                               }, \
    {"gl_get_uniformiv"                                    , GlGetUniformiv                               }, \
    {"gl_get_vertex_attrib_pointerv"                       , GlGetVertexAttribPointerv                    }, \
    {"gl_get_vertex_attribdv"                              , GlGetVertexAttribdv                          }, \
    {"gl_get_vertex_attribfv"                              , GlGetVertexAttribfv                          }, \
    {"gl_get_vertex_attribiv"                              , GlGetVertexAttribiv                          }, \
    {"gl_is_program"                                       , GlIsProgram                                  }, \
    {"gl_is_shader"                                        , GlIsShader                                   }, \
    {"gl_link_program"                                     , GlLinkProgram                                }, \
    {"gl_shader_source"                                    , GlShaderSource                               }, \
    {"gl_stencil_func_separate"                            , GlStencilFuncSeparate                        }, \
    {"gl_stencil_mask_separate"                            , GlStencilMaskSeparate                        }, \
    {"gl_stencil_op_separate"                              , GlStencilOpSeparate                          }, \
    {"gl_uniform1f"                                        , GlUniform1f                                  }, \
    {"gl_uniform1fv"                                       , GlUniform1fv                                 }, \
    {"gl_uniform1i"                                        , GlUniform1i                                  }, \
    {"gl_uniform1iv"                                       , GlUniform1iv                                 }, \
    {"gl_uniform2f"                                        , GlUniform2f                                  }, \
    {"gl_uniform2fv"                                       , GlUniform2fv                                 }, \
    {"gl_uniform2i"                                        , GlUniform2i                                  }, \
    {"gl_uniform2iv"                                       , GlUniform2iv                                 }, \
    {"gl_uniform3f"                                        , GlUniform3f                                  }, \
    {"gl_uniform3fv"                                       , GlUniform3fv                                 }, \
    {"gl_uniform3i"                                        , GlUniform3i                                  }, \
    {"gl_uniform3iv"                                       , GlUniform3iv                                 }, \
    {"gl_uniform4f"                                        , GlUniform4f                                  }, \
    {"gl_uniform4fv"                                       , GlUniform4fv                                 }, \
    {"gl_uniform4i"                                        , GlUniform4i                                  }, \
    {"gl_uniform4iv"                                       , GlUniform4iv                                 }, \
    {"gl_uniform_matrix2fv"                                , GlUniformMatrix2fv                           }, \
    {"gl_uniform_matrix3fv"                                , GlUniformMatrix3fv                           }, \
    {"gl_uniform_matrix4fv"                                , GlUniformMatrix4fv                           }, \
    {"gl_use_program"                                      , GlUseProgram                                 }, \
    {"gl_validate_program"                                 , GlValidateProgram                            }, \
    {"gl_vertex_attrib1d"                                  , GlVertexAttrib1d                             }, \
    {"gl_vertex_attrib1dv"                                 , GlVertexAttrib1dv                            }, \
    {"gl_vertex_attrib1f"                                  , GlVertexAttrib1f                             }, \
    {"gl_vertex_attrib1fv"                                 , GlVertexAttrib1fv                            }, \
    {"gl_vertex_attrib1s"                                  , GlVertexAttrib1s                             }, \
    {"gl_vertex_attrib1sv"                                 , GlVertexAttrib1sv                            }, \
    {"gl_vertex_attrib2d"                                  , GlVertexAttrib2d                             }, \
    {"gl_vertex_attrib2dv"                                 , GlVertexAttrib2dv                            }, \
    {"gl_vertex_attrib2f"                                  , GlVertexAttrib2f                             }, \
    {"gl_vertex_attrib2fv"                                 , GlVertexAttrib2fv                            }, \
    {"gl_vertex_attrib2s"                                  , GlVertexAttrib2s                             }, \
    {"gl_vertex_attrib2sv"                                 , GlVertexAttrib2sv                            }, \
    {"gl_vertex_attrib3d"                                  , GlVertexAttrib3d                             }, \
    {"gl_vertex_attrib3dv"                                 , GlVertexAttrib3dv                            }, \
    {"gl_vertex_attrib3f"                                  , GlVertexAttrib3f                             }, \
    {"gl_vertex_attrib3fv"                                 , GlVertexAttrib3fv                            }, \
    {"gl_vertex_attrib3s"                                  , GlVertexAttrib3s                             }, \
    {"gl_vertex_attrib3sv"                                 , GlVertexAttrib3sv                            }, \
    {"gl_vertex_attrib4_nbv"                               , GlVertexAttrib4Nbv                           }, \
    {"gl_vertex_attrib4_niv"                               , GlVertexAttrib4Niv                           }, \
    {"gl_vertex_attrib4_nsv"                               , GlVertexAttrib4Nsv                           }, \
    {"gl_vertex_attrib4_nub"                               , GlVertexAttrib4Nub                           }, \
    {"gl_vertex_attrib4_nubv"                              , GlVertexAttrib4Nubv                          }, \
    {"gl_vertex_attrib4_nuiv"                              , GlVertexAttrib4Nuiv                          }, \
    {"gl_vertex_attrib4_nusv"                              , GlVertexAttrib4Nusv                          }, \
    {"gl_vertex_attrib4bv"                                 , GlVertexAttrib4bv                            }, \
    {"gl_vertex_attrib4d"                                  , GlVertexAttrib4d                             }, \
    {"gl_vertex_attrib4dv"                                 , GlVertexAttrib4dv                            }, \
    {"gl_vertex_attrib4f"                                  , GlVertexAttrib4f                             }, \
    {"gl_vertex_attrib4fv"                                 , GlVertexAttrib4fv                            }, \
    {"gl_vertex_attrib4iv"                                 , GlVertexAttrib4iv                            }, \
    {"gl_vertex_attrib4s"                                  , GlVertexAttrib4s                             }, \
    {"gl_vertex_attrib4sv"                                 , GlVertexAttrib4sv                            }, \
    {"gl_vertex_attrib4ubv"                                , GlVertexAttrib4ubv                           }, \
    {"gl_vertex_attrib4uiv"                                , GlVertexAttrib4uiv                           }, \
    {"gl_vertex_attrib4usv"                                , GlVertexAttrib4usv                           }, \
    {"gl_vertex_attrib_pointer"                            , GlVertexAttribPointer                        }, \
    {"gl_uniform_matrix2x3fv"                              , GlUniformMatrix2x3fv                         }, \
    {"gl_uniform_matrix2x4fv"                              , GlUniformMatrix2x4fv                         }, \
    {"gl_uniform_matrix3x2fv"                              , GlUniformMatrix3x2fv                         }, \
    {"gl_uniform_matrix3x4fv"                              , GlUniformMatrix3x4fv                         }, \
    {"gl_uniform_matrix4x2fv"                              , GlUniformMatrix4x2fv                         }, \
    {"gl_uniform_matrix4x3fv"                              , GlUniformMatrix4x3fv                         }, \
    {"gl_begin_conditional_render"                         , GlBeginConditionalRender                     }, \
    {"gl_begin_transform_feedback"                         , GlBeginTransformFeedback                     }, \
    {"gl_bind_buffer_base"                                 , GlBindBufferBase                             }, \
    {"gl_bind_buffer_range"                                , GlBindBufferRange                            }, \
    {"gl_bind_frag_data_location"                          , GlBindFragDataLocation                       }, \
    {"gl_bind_framebuffer"                                 , GlBindFramebuffer                            }, \
    {"gl_bind_renderbuffer"                                , GlBindRenderbuffer                           }, \
    {"gl_bind_vertex_array"                                , GlBindVertexArray                            }, \
    {"gl_blit_framebuffer"                                 , GlBlitFramebuffer                            }, \
    {"gl_check_framebuffer_status"                         , GlCheckFramebufferStatus                     }, \
    {"gl_clamp_color"                                      , GlClampColor                                 }, \
    {"gl_clear_bufferfi"                                   , GlClearBufferfi                              }, \
    {"gl_clear_bufferfv"                                   , GlClearBufferfv                              }, \
    {"gl_clear_bufferiv"                                   , GlClearBufferiv                              }, \
    {"gl_clear_bufferuiv"                                  , GlClearBufferuiv                             }, \
    {"gl_color_maski"                                      , GlColorMaski                                 }, \
    {"gl_delete_framebuffers"                              , GlDeleteFramebuffers                         }, \
    {"gl_delete_renderbuffers"                             , GlDeleteRenderbuffers                        }, \
    {"gl_delete_vertex_arrays"                             , GlDeleteVertexArrays                         }, \
    {"gl_disablei"                                         , GlDisablei                                   }, \
    {"gl_enablei"                                          , GlEnablei                                    }, \
    {"gl_end_conditional_render"                           , GlEndConditionalRender                       }, \
    {"gl_end_transform_feedback"                           , GlEndTransformFeedback                       }, \
    {"gl_flush_mapped_buffer_range"                        , GlFlushMappedBufferRange                     }, \
    {"gl_framebuffer_renderbuffer"                         , GlFramebufferRenderbuffer                    }, \
    {"gl_framebuffer_texture1_d"                           , GlFramebufferTexture1D                       }, \
    {"gl_framebuffer_texture2_d"                           , GlFramebufferTexture2D                       }, \
    {"gl_framebuffer_texture3_d"                           , GlFramebufferTexture3D                       }, \
    {"gl_framebuffer_texture_layer"                        , GlFramebufferTextureLayer                    }, \
    {"gl_gen_framebuffers"                                 , GlGenFramebuffers                            }, \
    {"gl_gen_renderbuffers"                                , GlGenRenderbuffers                           }, \
    {"gl_gen_vertex_arrays"                                , GlGenVertexArrays                            }, \
    {"gl_generate_mipmap"                                  , GlGenerateMipmap                             }, \
    {"gl_get_booleani__v"                                  , GlGetBooleani_v                              }, \
    {"gl_get_frag_data_location"                           , GlGetFragDataLocation                        }, \
    {"gl_get_framebuffer_attachment_parameteriv"           , GlGetFramebufferAttachmentParameteriv        }, \
    {"gl_get_integeri__v"                                  , GlGetIntegeri_v                              }, \
    {"gl_get_renderbuffer_parameteriv"                     , GlGetRenderbufferParameteriv                 }, \
    {"gl_get_stringi"                                      , GlGetStringi                                 }, \
    {"gl_get_tex_parameter_iiv"                            , GlGetTexParameterIiv                         }, \
    {"gl_get_tex_parameter_iuiv"                           , GlGetTexParameterIuiv                        }, \
    {"gl_get_transform_feedback_varying"                   , GlGetTransformFeedbackVarying                }, \
    {"gl_get_uniformuiv"                                   , GlGetUniformuiv                              }, \
    {"gl_get_vertex_attrib_iiv"                            , GlGetVertexAttribIiv                         }, \
    {"gl_get_vertex_attrib_iuiv"                           , GlGetVertexAttribIuiv                        }, \
    {"gl_is_enabledi"                                      , GlIsEnabledi                                 }, \
    {"gl_is_framebuffer"                                   , GlIsFramebuffer                              }, \
    {"gl_is_renderbuffer"                                  , GlIsRenderbuffer                             }, \
    {"gl_is_vertex_array"                                  , GlIsVertexArray                              }, \
    {"gl_map_buffer_range"                                 , GlMapBufferRange                             }, \
    {"gl_renderbuffer_storage"                             , GlRenderbufferStorage                        }, \
    {"gl_renderbuffer_storage_multisample"                 , GlRenderbufferStorageMultisample             }, \
    {"gl_tex_parameter_iiv"                                , GlTexParameterIiv                            }, \
    {"gl_tex_parameter_iuiv"                               , GlTexParameterIuiv                           }, \
    {"gl_transform_feedback_varyings"                      , GlTransformFeedbackVaryings                  }, \
    {"gl_uniform1ui"                                       , GlUniform1ui                                 }, \
    {"gl_uniform1uiv"                                      , GlUniform1uiv                                }, \
    {"gl_uniform2ui"                                       , GlUniform2ui                                 }, \
    {"gl_uniform2uiv"                                      , GlUniform2uiv                                }, \
    {"gl_uniform3ui"                                       , GlUniform3ui                                 }, \
    {"gl_uniform3uiv"                                      , GlUniform3uiv                                }, \
    {"gl_uniform4ui"                                       , GlUniform4ui                                 }, \
    {"gl_uniform4uiv"                                      , GlUniform4uiv                                }, \
    {"gl_vertex_attrib_i1i"                                , GlVertexAttribI1i                            }, \
    {"gl_vertex_attrib_i1iv"                               , GlVertexAttribI1iv                           }, \
    {"gl_vertex_attrib_i1ui"                               , GlVertexAttribI1ui                           }, \
    {"gl_vertex_attrib_i1uiv"                              , GlVertexAttribI1uiv                          }, \
    {"gl_vertex_attrib_i2i"                                , GlVertexAttribI2i                            }, \
    {"gl_vertex_attrib_i2iv"                               , GlVertexAttribI2iv                           }, \
    {"gl_vertex_attrib_i2ui"                               , GlVertexAttribI2ui                           }, \
    {"gl_vertex_attrib_i2uiv"                              , GlVertexAttribI2uiv                          }, \
    {"gl_vertex_attrib_i3i"                                , GlVertexAttribI3i                            }, \
    {"gl_vertex_attrib_i3iv"                               , GlVertexAttribI3iv                           }, \
    {"gl_vertex_attrib_i3ui"                               , GlVertexAttribI3ui                           }, \
    {"gl_vertex_attrib_i3uiv"                              , GlVertexAttribI3uiv                          }, \
    {"gl_vertex_attrib_i4bv"                               , GlVertexAttribI4bv                           }, \
    {"gl_vertex_attrib_i4i"                                , GlVertexAttribI4i                            }, \
    {"gl_vertex_attrib_i4iv"                               , GlVertexAttribI4iv                           }, \
    {"gl_vertex_attrib_i4sv"                               , GlVertexAttribI4sv                           }, \
    {"gl_vertex_attrib_i4ubv"                              , GlVertexAttribI4ubv                          }, \
    {"gl_vertex_attrib_i4ui"                               , GlVertexAttribI4ui                           }, \
    {"gl_vertex_attrib_i4uiv"                              , GlVertexAttribI4uiv                          }, \
    {"gl_vertex_attrib_i4usv"                              , GlVertexAttribI4usv                          }, \
    {"gl_vertex_attrib_i_pointer"                          , GlVertexAttribIPointer                       }, \
    {"gl_copy_buffer_sub_data"                             , GlCopyBufferSubData                          }, \
    {"gl_draw_arrays_instanced"                            , GlDrawArraysInstanced                        }, \
    {"gl_draw_elements_instanced"                          , GlDrawElementsInstanced                      }, \
    {"gl_get_active_uniform_block_name"                    , GlGetActiveUniformBlockName                  }, \
    {"gl_get_active_uniform_blockiv"                       , GlGetActiveUniformBlockiv                    }, \
    {"gl_get_active_uniform_name"                          , GlGetActiveUniformName                       }, \
    {"gl_get_active_uniformsiv"                            , GlGetActiveUniformsiv                        }, \
    {"gl_get_uniform_block_index"                          , GlGetUniformBlockIndex                       }, \
    {"gl_get_uniform_indices"                              , GlGetUniformIndices                          }, \
    {"gl_primitive_restart_index"                          , GlPrimitiveRestartIndex                      }, \
    {"gl_tex_buffer"                                       , GlTexBuffer                                  }, \
    {"gl_uniform_block_binding"                            , GlUniformBlockBinding                        }, \
    {"gl_client_wait_sync"                                 , GlClientWaitSync                             }, \
    {"gl_delete_sync"                                      , GlDeleteSync                                 }, \
    {"gl_draw_elements_base_vertex"                        , GlDrawElementsBaseVertex                     }, \
    {"gl_draw_elements_instanced_base_vertex"              , GlDrawElementsInstancedBaseVertex            }, \
    {"gl_draw_range_elements_base_vertex"                  , GlDrawRangeElementsBaseVertex                }, \
    {"gl_fence_sync"                                       , GlFenceSync                                  }, \
    {"gl_framebuffer_texture"                              , GlFramebufferTexture                         }, \
    {"gl_get_buffer_parameteri64v"                         , GlGetBufferParameteri64v                     }, \
    {"gl_get_integer64i__v"                                , GlGetInteger64i_v                            }, \
    {"gl_get_integer64v"                                   , GlGetInteger64v                              }, \
    {"gl_get_multisamplefv"                                , GlGetMultisamplefv                           }, \
    {"gl_get_synciv"                                       , GlGetSynciv                                  }, \
    {"gl_is_sync"                                          , GlIsSync                                     }, \
    {"gl_multi_draw_elements_base_vertex"                  , GlMultiDrawElementsBaseVertex                }, \
    {"gl_provoking_vertex"                                 , GlProvokingVertex                            }, \
    {"gl_sample_maski"                                     , GlSampleMaski                                }, \
    {"gl_tex_image2_d_multisample"                         , GlTexImage2DMultisample                      }, \
    {"gl_tex_image3_d_multisample"                         , GlTexImage3DMultisample                      }, \
    {"gl_wait_sync"                                        , GlWaitSync                                   }, \
    {"gl_bind_frag_data_location_indexed"                  , GlBindFragDataLocationIndexed                }, \
    {"gl_bind_sampler"                                     , GlBindSampler                                }, \
    {"gl_delete_samplers"                                  , GlDeleteSamplers                             }, \
    {"gl_gen_samplers"                                     , GlGenSamplers                                }, \
    {"gl_get_frag_data_index"                              , GlGetFragDataIndex                           }, \
    {"gl_get_query_objecti64v"                             , GlGetQueryObjecti64v                         }, \
    {"gl_get_query_objectui64v"                            , GlGetQueryObjectui64v                        }, \
    {"gl_get_sampler_parameter_iiv"                        , GlGetSamplerParameterIiv                     }, \
    {"gl_get_sampler_parameter_iuiv"                       , GlGetSamplerParameterIuiv                    }, \
    {"gl_get_sampler_parameterfv"                          , GlGetSamplerParameterfv                      }, \
    {"gl_get_sampler_parameteriv"                          , GlGetSamplerParameteriv                      }, \
    {"gl_is_sampler"                                       , GlIsSampler                                  }, \
    {"gl_query_counter"                                    , GlQueryCounter                               }, \
    {"gl_sampler_parameter_iiv"                            , GlSamplerParameterIiv                        }, \
    {"gl_sampler_parameter_iuiv"                           , GlSamplerParameterIuiv                       }, \
    {"gl_sampler_parameterf"                               , GlSamplerParameterf                          }, \
    {"gl_sampler_parameterfv"                              , GlSamplerParameterfv                         }, \
    {"gl_sampler_parameteri"                               , GlSamplerParameteri                          }, \
    {"gl_sampler_parameteriv"                              , GlSamplerParameteriv                         }, \
    {"gl_vertex_attrib_divisor"                            , GlVertexAttribDivisor                        }, \
    {"gl_vertex_attrib_p1ui"                               , GlVertexAttribP1ui                           }, \
    {"gl_vertex_attrib_p1uiv"                              , GlVertexAttribP1uiv                          }, \
    {"gl_vertex_attrib_p2ui"                               , GlVertexAttribP2ui                           }, \
    {"gl_vertex_attrib_p2uiv"                              , GlVertexAttribP2uiv                          }, \
    {"gl_vertex_attrib_p3ui"                               , GlVertexAttribP3ui                           }, \
    {"gl_vertex_attrib_p3uiv"                              , GlVertexAttribP3uiv                          }, \
    {"gl_vertex_attrib_p4ui"                               , GlVertexAttribP4ui                           }, \
    {"gl_vertex_attrib_p4uiv"                              , GlVertexAttribP4uiv                          }, \
    {"gl_begin_query_indexed"                              , GlBeginQueryIndexed                          }, \
    {"gl_bind_transform_feedback"                          , GlBindTransformFeedback                      }, \
    {"gl_blend_equation_separatei"                         , GlBlendEquationSeparatei                     }, \
    {"gl_blend_equationi"                                  , GlBlendEquationi                             }, \
    {"gl_blend_func_separatei"                             , GlBlendFuncSeparatei                         }, \
    {"gl_blend_funci"                                      , GlBlendFunci                                 }, \
    {"gl_delete_transform_feedbacks"                       , GlDeleteTransformFeedbacks                   }, \
    {"gl_draw_arrays_indirect"                             , GlDrawArraysIndirect                         }, \
    {"gl_draw_elements_indirect"                           , GlDrawElementsIndirect                       }, \
    {"gl_draw_transform_feedback"                          , GlDrawTransformFeedback                      }, \
    {"gl_draw_transform_feedback_stream"                   , GlDrawTransformFeedbackStream                }, \
    {"gl_end_query_indexed"                                , GlEndQueryIndexed                            }, \
    {"gl_gen_transform_feedbacks"                          , GlGenTransformFeedbacks                      }, \
    {"gl_get_active_subroutine_name"                       , GlGetActiveSubroutineName                    }, \
    {"gl_get_active_subroutine_uniform_name"               , GlGetActiveSubroutineUniformName             }, \
    {"gl_get_active_subroutine_uniformiv"                  , GlGetActiveSubroutineUniformiv               }, \
    {"gl_get_program_stageiv"                              , GlGetProgramStageiv                          }, \
    {"gl_get_query_indexediv"                              , GlGetQueryIndexediv                          }, \
    {"gl_get_subroutine_index"                             , GlGetSubroutineIndex                         }, \
    {"gl_get_subroutine_uniform_location"                  , GlGetSubroutineUniformLocation               }, \
    {"gl_get_uniform_subroutineuiv"                        , GlGetUniformSubroutineuiv                    }, \
    {"gl_get_uniformdv"                                    , GlGetUniformdv                               }, \
    {"gl_is_transform_feedback"                            , GlIsTransformFeedback                        }, \
    {"gl_min_sample_shading"                               , GlMinSampleShading                           }, \
    {"gl_patch_parameterfv"                                , GlPatchParameterfv                           }, \
    {"gl_patch_parameteri"                                 , GlPatchParameteri                            }, \
    {"gl_pause_transform_feedback"                         , GlPauseTransformFeedback                     }, \
    {"gl_resume_transform_feedback"                        , GlResumeTransformFeedback                    }, \
    {"gl_uniform1d"                                        , GlUniform1d                                  }, \
    {"gl_uniform1dv"                                       , GlUniform1dv                                 }, \
    {"gl_uniform2d"                                        , GlUniform2d                                  }, \
    {"gl_uniform2dv"                                       , GlUniform2dv                                 }, \
    {"gl_uniform3d"                                        , GlUniform3d                                  }, \
    {"gl_uniform3dv"                                       , GlUniform3dv                                 }, \
    {"gl_uniform4d"                                        , GlUniform4d                                  }, \
    {"gl_uniform4dv"                                       , GlUniform4dv                                 }, \
    {"gl_uniform_matrix2dv"                                , GlUniformMatrix2dv                           }, \
    {"gl_uniform_matrix2x3dv"                              , GlUniformMatrix2x3dv                         }, \
    {"gl_uniform_matrix2x4dv"                              , GlUniformMatrix2x4dv                         }, \
    {"gl_uniform_matrix3dv"                                , GlUniformMatrix3dv                           }, \
    {"gl_uniform_matrix3x2dv"                              , GlUniformMatrix3x2dv                         }, \
    {"gl_uniform_matrix3x4dv"                              , GlUniformMatrix3x4dv                         }, \
    {"gl_uniform_matrix4dv"                                , GlUniformMatrix4dv                           }, \
    {"gl_uniform_matrix4x2dv"                              , GlUniformMatrix4x2dv                         }, \
    {"gl_uniform_matrix4x3dv"                              , GlUniformMatrix4x3dv                         }, \
    {"gl_uniform_subroutinesuiv"                           , GlUniformSubroutinesuiv                      }, \
    {"gl_active_shader_program"                            , GlActiveShaderProgram                        }, \
    {"gl_bind_program_pipeline"                            , GlBindProgramPipeline                        }, \
    {"gl_clear_depthf"                                     , GlClearDepthf                                }, \
    {"gl_create_shader_programv"                           , GlCreateShaderProgramv                       }, \
    {"gl_delete_program_pipelines"                         , GlDeleteProgramPipelines                     }, \
    {"gl_depth_range_arrayv"                               , GlDepthRangeArrayv                           }, \
    {"gl_depth_range_indexed"                              , GlDepthRangeIndexed                          }, \
    {"gl_depth_rangef"                                     , GlDepthRangef                                }, \
    {"gl_gen_program_pipelines"                            , GlGenProgramPipelines                        }, \
    {"gl_get_doublei__v"                                   , GlGetDoublei_v                               }, \
    {"gl_get_floati__v"                                    , GlGetFloati_v                                }, \
    {"gl_get_program_binary"                               , GlGetProgramBinary                           }, \
    {"gl_get_program_pipeline_info_log"                    , GlGetProgramPipelineInfoLog                  }, \
    {"gl_get_program_pipelineiv"                           , GlGetProgramPipelineiv                       }, \
    {"gl_get_shader_precision_format"                      , GlGetShaderPrecisionFormat                   }, \
    {"gl_get_vertex_attrib_ldv"                            , GlGetVertexAttribLdv                         }, \
    {"gl_is_program_pipeline"                              , GlIsProgramPipeline                          }, \
    {"gl_program_binary"                                   , GlProgramBinary                              }, \
    {"gl_program_parameteri"                               , GlProgramParameteri                          }, \
    {"gl_program_uniform1d"                                , GlProgramUniform1d                           }, \
    {"gl_program_uniform1dv"                               , GlProgramUniform1dv                          }, \
    {"gl_program_uniform1f"                                , GlProgramUniform1f                           }, \
    {"gl_program_uniform1fv"                               , GlProgramUniform1fv                          }, \
    {"gl_program_uniform1i"                                , GlProgramUniform1i                           }, \
    {"gl_program_uniform1iv"                               , GlProgramUniform1iv                          }, \
    {"gl_program_uniform1ui"                               , GlProgramUniform1ui                          }, \
    {"gl_program_uniform1uiv"                              , GlProgramUniform1uiv                         }, \
    {"gl_program_uniform2d"                                , GlProgramUniform2d                           }, \
    {"gl_program_uniform2dv"                               , GlProgramUniform2dv                          }, \
    {"gl_program_uniform2f"                                , GlProgramUniform2f                           }, \
    {"gl_program_uniform2fv"                               , GlProgramUniform2fv                          }, \
    {"gl_program_uniform2i"                                , GlProgramUniform2i                           }, \
    {"gl_program_uniform2iv"                               , GlProgramUniform2iv                          }, \
    {"gl_program_uniform2ui"                               , GlProgramUniform2ui                          }, \
    {"gl_program_uniform2uiv"                              , GlProgramUniform2uiv                         }, \
    {"gl_program_uniform3d"                                , GlProgramUniform3d                           }, \
    {"gl_program_uniform3dv"                               , GlProgramUniform3dv                          }, \
    {"gl_program_uniform3f"                                , GlProgramUniform3f                           }, \
    {"gl_program_uniform3fv"                               , GlProgramUniform3fv                          }, \
    {"gl_program_uniform3i"                                , GlProgramUniform3i                           }, \
    {"gl_program_uniform3iv"                               , GlProgramUniform3iv                          }, \
    {"gl_program_uniform3ui"                               , GlProgramUniform3ui                          }, \
    {"gl_program_uniform3uiv"                              , GlProgramUniform3uiv                         }, \
    {"gl_program_uniform4d"                                , GlProgramUniform4d                           }, \
    {"gl_program_uniform4dv"                               , GlProgramUniform4dv                          }, \
    {"gl_program_uniform4f"                                , GlProgramUniform4f                           }, \
    {"gl_program_uniform4fv"                               , GlProgramUniform4fv                          }, \
    {"gl_program_uniform4i"                                , GlProgramUniform4i                           }, \
    {"gl_program_uniform4iv"                               , GlProgramUniform4iv                          }, \
    {"gl_program_uniform4ui"                               , GlProgramUniform4ui                          }, \
    {"gl_program_uniform4uiv"                              , GlProgramUniform4uiv                         }, \
    {"gl_program_uniform_matrix2dv"                        , GlProgramUniformMatrix2dv                    }, \
    {"gl_program_uniform_matrix2fv"                        , GlProgramUniformMatrix2fv                    }, \
    {"gl_program_uniform_matrix2x3dv"                      , GlProgramUniformMatrix2x3dv                  }, \
    {"gl_program_uniform_matrix2x3fv"                      , GlProgramUniformMatrix2x3fv                  }, \
    {"gl_program_uniform_matrix2x4dv"                      , GlProgramUniformMatrix2x4dv                  }, \
    {"gl_program_uniform_matrix2x4fv"                      , GlProgramUniformMatrix2x4fv                  }, \
    {"gl_program_uniform_matrix3dv"                        , GlProgramUniformMatrix3dv                    }, \
    {"gl_program_uniform_matrix3fv"                        , GlProgramUniformMatrix3fv                    }, \
    {"gl_program_uniform_matrix3x2dv"                      , GlProgramUniformMatrix3x2dv                  }, \
    {"gl_program_uniform_matrix3x2fv"                      , GlProgramUniformMatrix3x2fv                  }, \
    {"gl_program_uniform_matrix3x4dv"                      , GlProgramUniformMatrix3x4dv                  }, \
    {"gl_program_uniform_matrix3x4fv"                      , GlProgramUniformMatrix3x4fv                  }, \
    {"gl_program_uniform_matrix4dv"                        , GlProgramUniformMatrix4dv                    }, \
    {"gl_program_uniform_matrix4fv"                        , GlProgramUniformMatrix4fv                    }, \
    {"gl_program_uniform_matrix4x2dv"                      , GlProgramUniformMatrix4x2dv                  }, \
    {"gl_program_uniform_matrix4x2fv"                      , GlProgramUniformMatrix4x2fv                  }, \
    {"gl_program_uniform_matrix4x3dv"                      , GlProgramUniformMatrix4x3dv                  }, \
    {"gl_program_uniform_matrix4x3fv"                      , GlProgramUniformMatrix4x3fv                  }, \
    {"gl_release_shader_compiler"                          , GlReleaseShaderCompiler                      }, \
    {"gl_scissor_arrayv"                                   , GlScissorArrayv                              }, \
    {"gl_scissor_indexed"                                  , GlScissorIndexed                             }, \
    {"gl_scissor_indexedv"                                 , GlScissorIndexedv                            }, \
    {"gl_shader_binary"                                    , GlShaderBinary                               }, \
    {"gl_use_program_stages"                               , GlUseProgramStages                           }, \
    {"gl_validate_program_pipeline"                        , GlValidateProgramPipeline                    }, \
    {"gl_vertex_attrib_l1d"                                , GlVertexAttribL1d                            }, \
    {"gl_vertex_attrib_l1dv"                               , GlVertexAttribL1dv                           }, \
    {"gl_vertex_attrib_l2d"                                , GlVertexAttribL2d                            }, \
    {"gl_vertex_attrib_l2dv"                               , GlVertexAttribL2dv                           }, \
    {"gl_vertex_attrib_l3d"                                , GlVertexAttribL3d                            }, \
    {"gl_vertex_attrib_l3dv"                               , GlVertexAttribL3dv                           }, \
    {"gl_vertex_attrib_l4d"                                , GlVertexAttribL4d                            }, \
    {"gl_vertex_attrib_l4dv"                               , GlVertexAttribL4dv                           }, \
    {"gl_vertex_attrib_l_pointer"                          , GlVertexAttribLPointer                       }, \
    {"gl_viewport_arrayv"                                  , GlViewportArrayv                             }, \
    {"gl_viewport_indexedf"                                , GlViewportIndexedf                           }, \
    {"gl_viewport_indexedfv"                               , GlViewportIndexedfv                          }, \
    {"gl_bind_image_texture"                               , GlBindImageTexture                           }, \
    {"gl_draw_arrays_instanced_base_instance"              , GlDrawArraysInstancedBaseInstance            }, \
    {"gl_draw_elements_instanced_base_instance"            , GlDrawElementsInstancedBaseInstance          }, \
    {"gl_draw_elements_instanced_base_vertex_base_instance", GlDrawElementsInstancedBaseVertexBaseInstance}, \
    {"gl_draw_transform_feedback_instanced"                , GlDrawTransformFeedbackInstanced             }, \
    {"gl_draw_transform_feedback_stream_instanced"         , GlDrawTransformFeedbackStreamInstanced       }, \
    {"gl_get_active_atomic_counter_bufferiv"               , GlGetActiveAtomicCounterBufferiv             }, \
    {"gl_get_internalformativ"                             , GlGetInternalformativ                        }, \
    {"gl_memory_barrier"                                   , GlMemoryBarrier                              }, \
    {"gl_tex_storage1_d"                                   , GlTexStorage1D                               }, \
    {"gl_tex_storage2_d"                                   , GlTexStorage2D                               }, \
    {"gl_tex_storage3_d"                                   , GlTexStorage3D                               }, \
    {"gl_bind_vertex_buffer"                               , GlBindVertexBuffer                           }, \
    {"gl_clear_buffer_data"                                , GlClearBufferData                            }, \
    {"gl_clear_buffer_sub_data"                            , GlClearBufferSubData                         }, \
    {"gl_copy_image_sub_data"                              , GlCopyImageSubData                           }, \
    {"gl_debug_message_callback"                           , GlDebugMessageCallback                       }, \
    {"gl_debug_message_control"                            , GlDebugMessageControl                        }, \
    {"gl_debug_message_insert"                             , GlDebugMessageInsert                         }, \
    {"gl_dispatch_compute"                                 , GlDispatchCompute                            }, \
    {"gl_dispatch_compute_indirect"                        , GlDispatchComputeIndirect                    }, \
    {"gl_framebuffer_parameteri"                           , GlFramebufferParameteri                      }, \
    {"gl_get_debug_message_log"                            , GlGetDebugMessageLog                         }, \
    {"gl_get_framebuffer_parameteriv"                      , GlGetFramebufferParameteriv                  }, \
    {"gl_get_internalformati64v"                           , GlGetInternalformati64v                      }, \
    {"gl_get_object_label"                                 , GlGetObjectLabel                             }, \
    {"gl_get_object_ptr_label"                             , GlGetObjectPtrLabel                          }, \
    {"gl_get_program_interfaceiv"                          , GlGetProgramInterfaceiv                      }, \
    {"gl_get_program_resource_index"                       , GlGetProgramResourceIndex                    }, \
    {"gl_get_program_resource_location"                    , GlGetProgramResourceLocation                 }, \
    {"gl_get_program_resource_location_index"              , GlGetProgramResourceLocationIndex            }, \
    {"gl_get_program_resource_name"                        , GlGetProgramResourceName                     }, \
    {"gl_get_program_resourceiv"                           , GlGetProgramResourceiv                       }, \
    {"gl_invalidate_buffer_data"                           , GlInvalidateBufferData                       }, \
    {"gl_invalidate_buffer_sub_data"                       , GlInvalidateBufferSubData                    }, \
    {"gl_invalidate_framebuffer"                           , GlInvalidateFramebuffer                      }, \
    {"gl_invalidate_sub_framebuffer"                       , GlInvalidateSubFramebuffer                   }, \
    {"gl_invalidate_tex_image"                             , GlInvalidateTexImage                         }, \
    {"gl_invalidate_tex_sub_image"                         , GlInvalidateTexSubImage                      }, \
    {"gl_multi_draw_arrays_indirect"                       , GlMultiDrawArraysIndirect                    }, \
    {"gl_multi_draw_elements_indirect"                     , GlMultiDrawElementsIndirect                  }, \
    {"gl_object_label"                                     , GlObjectLabel                                }, \
    {"gl_object_ptr_label"                                 , GlObjectPtrLabel                             }, \
    {"gl_pop_debug_group"                                  , GlPopDebugGroup                              }, \
    {"gl_push_debug_group"                                 , GlPushDebugGroup                             }, \
    {"gl_shader_storage_block_binding"                     , GlShaderStorageBlockBinding                  }, \
    {"gl_tex_buffer_range"                                 , GlTexBufferRange                             }, \
    {"gl_tex_storage2_d_multisample"                       , GlTexStorage2DMultisample                    }, \
    {"gl_tex_storage3_d_multisample"                       , GlTexStorage3DMultisample                    }, \
    {"gl_texture_view"                                     , GlTextureView                                }, \
    {"gl_vertex_attrib_binding"                            , GlVertexAttribBinding                        }, \
    {"gl_vertex_attrib_format"                             , GlVertexAttribFormat                         }, \
    {"gl_vertex_attrib_i_format"                           , GlVertexAttribIFormat                        }, \
    {"gl_vertex_attrib_l_format"                           , GlVertexAttribLFormat                        }, \
    {"gl_vertex_binding_divisor"                           , GlVertexBindingDivisor                       }, \
    {"gl_bind_buffers_base"                                , GlBindBuffersBase                            }, \
    {"gl_bind_buffers_range"                               , GlBindBuffersRange                           }, \
    {"gl_bind_image_textures"                              , GlBindImageTextures                          }, \
    {"gl_bind_samplers"                                    , GlBindSamplers                               }, \
    {"gl_bind_textures"                                    , GlBindTextures                               }, \
    {"gl_bind_vertex_buffers"                              , GlBindVertexBuffers                          }, \
    {"gl_buffer_storage"                                   , GlBufferStorage                              }, \
    {"gl_clear_tex_image"                                  , GlClearTexImage                              }, \
    {"gl_clear_tex_sub_image"                              , GlClearTexSubImage                           }, \
    /* end */

#define EXPOSED_GL_CONSTANTS \
    lua_pushnumber(L, GL_2D);\
    lua_setfield(L, -2, "2D");\
    lua_pushnumber(L, GL_2_BYTES);\
    lua_setfield(L, -2, "2_BYTES");\
    lua_pushnumber(L, GL_3D);\
    lua_setfield(L, -2, "3D");\
    lua_pushnumber(L, GL_3D_COLOR);\
    lua_setfield(L, -2, "3D_COLOR");\
    lua_pushnumber(L, GL_3D_COLOR_TEXTURE);\
    lua_setfield(L, -2, "3D_COLOR_TEXTURE");\
    lua_pushnumber(L, GL_3_BYTES);\
    lua_setfield(L, -2, "3_BYTES");\
    lua_pushnumber(L, GL_4D_COLOR_TEXTURE);\
    lua_setfield(L, -2, "4D_COLOR_TEXTURE");\
    lua_pushnumber(L, GL_4_BYTES);\
    lua_setfield(L, -2, "4_BYTES");\
    lua_pushnumber(L, GL_ACCUM);\
    lua_setfield(L, -2, "ACCUM");\
    lua_pushnumber(L, GL_ACCUM_ALPHA_BITS);\
    lua_setfield(L, -2, "ACCUM_ALPHA_BITS");\
    lua_pushnumber(L, GL_ACCUM_BLUE_BITS);\
    lua_setfield(L, -2, "ACCUM_BLUE_BITS");\
    lua_pushnumber(L, GL_ACCUM_BUFFER_BIT);\
    lua_setfield(L, -2, "ACCUM_BUFFER_BIT");\
    lua_pushnumber(L, GL_ACCUM_CLEAR_VALUE);\
    lua_setfield(L, -2, "ACCUM_CLEAR_VALUE");\
    lua_pushnumber(L, GL_ACCUM_GREEN_BITS);\
    lua_setfield(L, -2, "ACCUM_GREEN_BITS");\
    lua_pushnumber(L, GL_ACCUM_RED_BITS);\
    lua_setfield(L, -2, "ACCUM_RED_BITS");\
    lua_pushnumber(L, GL_ADD);\
    lua_setfield(L, -2, "ADD");\
    lua_pushnumber(L, GL_ALL_ATTRIB_BITS);\
    lua_setfield(L, -2, "ALL_ATTRIB_BITS");\
    lua_pushnumber(L, GL_ALPHA);\
    lua_setfield(L, -2, "ALPHA");\
    lua_pushnumber(L, GL_ALPHA12);\
    lua_setfield(L, -2, "ALPHA12");\
    lua_pushnumber(L, GL_ALPHA16);\
    lua_setfield(L, -2, "ALPHA16");\
    lua_pushnumber(L, GL_ALPHA4);\
    lua_setfield(L, -2, "ALPHA4");\
    lua_pushnumber(L, GL_ALPHA8);\
    lua_setfield(L, -2, "ALPHA8");\
    lua_pushnumber(L, GL_ALPHA_BIAS);\
    lua_setfield(L, -2, "ALPHA_BIAS");\
    lua_pushnumber(L, GL_ALPHA_BITS);\
    lua_setfield(L, -2, "ALPHA_BITS");\
    lua_pushnumber(L, GL_ALPHA_SCALE);\
    lua_setfield(L, -2, "ALPHA_SCALE");\
    lua_pushnumber(L, GL_ALPHA_TEST);\
    lua_setfield(L, -2, "ALPHA_TEST");\
    lua_pushnumber(L, GL_ALPHA_TEST_FUNC);\
    lua_setfield(L, -2, "ALPHA_TEST_FUNC");\
    lua_pushnumber(L, GL_ALPHA_TEST_REF);\
    lua_setfield(L, -2, "ALPHA_TEST_REF");\
    lua_pushnumber(L, GL_ALWAYS);\
    lua_setfield(L, -2, "ALWAYS");\
    lua_pushnumber(L, GL_AMBIENT);\
    lua_setfield(L, -2, "AMBIENT");\
    lua_pushnumber(L, GL_AMBIENT_AND_DIFFUSE);\
    lua_setfield(L, -2, "AMBIENT_AND_DIFFUSE");\
    lua_pushnumber(L, GL_AND);\
    lua_setfield(L, -2, "AND");\
    lua_pushnumber(L, GL_AND_INVERTED);\
    lua_setfield(L, -2, "AND_INVERTED");\
    lua_pushnumber(L, GL_AND_REVERSE);\
    lua_setfield(L, -2, "AND_REVERSE");\
    lua_pushnumber(L, GL_ATTRIB_STACK_DEPTH);\
    lua_setfield(L, -2, "ATTRIB_STACK_DEPTH");\
    lua_pushnumber(L, GL_AUTO_NORMAL);\
    lua_setfield(L, -2, "AUTO_NORMAL");\
    lua_pushnumber(L, GL_AUX0);\
    lua_setfield(L, -2, "AUX0");\
    lua_pushnumber(L, GL_AUX1);\
    lua_setfield(L, -2, "AUX1");\
    lua_pushnumber(L, GL_AUX2);\
    lua_setfield(L, -2, "AUX2");\
    lua_pushnumber(L, GL_AUX3);\
    lua_setfield(L, -2, "AUX3");\
    lua_pushnumber(L, GL_AUX_BUFFERS);\
    lua_setfield(L, -2, "AUX_BUFFERS");\
    lua_pushnumber(L, GL_BACK);\
    lua_setfield(L, -2, "BACK");\
    lua_pushnumber(L, GL_BACK_LEFT);\
    lua_setfield(L, -2, "BACK_LEFT");\
    lua_pushnumber(L, GL_BACK_RIGHT);\
    lua_setfield(L, -2, "BACK_RIGHT");\
    lua_pushnumber(L, GL_BITMAP);\
    lua_setfield(L, -2, "BITMAP");\
    lua_pushnumber(L, GL_BITMAP_TOKEN);\
    lua_setfield(L, -2, "BITMAP_TOKEN");\
    lua_pushnumber(L, GL_BLEND);\
    lua_setfield(L, -2, "BLEND");\
    lua_pushnumber(L, GL_BLEND_DST);\
    lua_setfield(L, -2, "BLEND_DST");\
    lua_pushnumber(L, GL_BLEND_SRC);\
    lua_setfield(L, -2, "BLEND_SRC");\
    lua_pushnumber(L, GL_BLUE);\
    lua_setfield(L, -2, "BLUE");\
    lua_pushnumber(L, GL_BLUE_BIAS);\
    lua_setfield(L, -2, "BLUE_BIAS");\
    lua_pushnumber(L, GL_BLUE_BITS);\
    lua_setfield(L, -2, "BLUE_BITS");\
    lua_pushnumber(L, GL_BLUE_SCALE);\
    lua_setfield(L, -2, "BLUE_SCALE");\
    lua_pushnumber(L, GL_BYTE);\
    lua_setfield(L, -2, "BYTE");\
    lua_pushnumber(L, GL_C3F_V3F);\
    lua_setfield(L, -2, "C3F_V3F");\
    lua_pushnumber(L, GL_C4F_N3F_V3F);\
    lua_setfield(L, -2, "C4F_N3F_V3F");\
    lua_pushnumber(L, GL_C4UB_V2F);\
    lua_setfield(L, -2, "C4UB_V2F");\
    lua_pushnumber(L, GL_C4UB_V3F);\
    lua_setfield(L, -2, "C4UB_V3F");\
    lua_pushnumber(L, GL_CCW);\
    lua_setfield(L, -2, "CCW");\
    lua_pushnumber(L, GL_CLAMP);\
    lua_setfield(L, -2, "CLAMP");\
    lua_pushnumber(L, GL_CLEAR);\
    lua_setfield(L, -2, "CLEAR");\
    lua_pushnumber(L, GL_CLIENT_ALL_ATTRIB_BITS);\
    lua_setfield(L, -2, "CLIENT_ALL_ATTRIB_BITS");\
    lua_pushnumber(L, GL_CLIENT_ATTRIB_STACK_DEPTH);\
    lua_setfield(L, -2, "CLIENT_ATTRIB_STACK_DEPTH");\
    lua_pushnumber(L, GL_CLIENT_PIXEL_STORE_BIT);\
    lua_setfield(L, -2, "CLIENT_PIXEL_STORE_BIT");\
    lua_pushnumber(L, GL_CLIENT_VERTEX_ARRAY_BIT);\
    lua_setfield(L, -2, "CLIENT_VERTEX_ARRAY_BIT");\
    lua_pushnumber(L, GL_CLIP_PLANE0);\
    lua_setfield(L, -2, "CLIP_PLANE0");\
    lua_pushnumber(L, GL_CLIP_PLANE1);\
    lua_setfield(L, -2, "CLIP_PLANE1");\
    lua_pushnumber(L, GL_CLIP_PLANE2);\
    lua_setfield(L, -2, "CLIP_PLANE2");\
    lua_pushnumber(L, GL_CLIP_PLANE3);\
    lua_setfield(L, -2, "CLIP_PLANE3");\
    lua_pushnumber(L, GL_CLIP_PLANE4);\
    lua_setfield(L, -2, "CLIP_PLANE4");\
    lua_pushnumber(L, GL_CLIP_PLANE5);\
    lua_setfield(L, -2, "CLIP_PLANE5");\
    lua_pushnumber(L, GL_COEFF);\
    lua_setfield(L, -2, "COEFF");\
    lua_pushnumber(L, GL_COLOR);\
    lua_setfield(L, -2, "COLOR");\
    lua_pushnumber(L, GL_COLOR_ARRAY);\
    lua_setfield(L, -2, "COLOR_ARRAY");\
    lua_pushnumber(L, GL_COLOR_ARRAY_POINTER);\
    lua_setfield(L, -2, "COLOR_ARRAY_POINTER");\
    lua_pushnumber(L, GL_COLOR_ARRAY_SIZE);\
    lua_setfield(L, -2, "COLOR_ARRAY_SIZE");\
    lua_pushnumber(L, GL_COLOR_ARRAY_STRIDE);\
    lua_setfield(L, -2, "COLOR_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_COLOR_ARRAY_TYPE);\
    lua_setfield(L, -2, "COLOR_ARRAY_TYPE");\
    lua_pushnumber(L, GL_COLOR_BUFFER_BIT);\
    lua_setfield(L, -2, "COLOR_BUFFER_BIT");\
    lua_pushnumber(L, GL_COLOR_CLEAR_VALUE);\
    lua_setfield(L, -2, "COLOR_CLEAR_VALUE");\
    lua_pushnumber(L, GL_COLOR_INDEX);\
    lua_setfield(L, -2, "COLOR_INDEX");\
    lua_pushnumber(L, GL_COLOR_INDEXES);\
    lua_setfield(L, -2, "COLOR_INDEXES");\
    lua_pushnumber(L, GL_COLOR_LOGIC_OP);\
    lua_setfield(L, -2, "COLOR_LOGIC_OP");\
    lua_pushnumber(L, GL_COLOR_MATERIAL);\
    lua_setfield(L, -2, "COLOR_MATERIAL");\
    lua_pushnumber(L, GL_COLOR_MATERIAL_FACE);\
    lua_setfield(L, -2, "COLOR_MATERIAL_FACE");\
    lua_pushnumber(L, GL_COLOR_MATERIAL_PARAMETER);\
    lua_setfield(L, -2, "COLOR_MATERIAL_PARAMETER");\
    lua_pushnumber(L, GL_COLOR_WRITEMASK);\
    lua_setfield(L, -2, "COLOR_WRITEMASK");\
    lua_pushnumber(L, GL_COMPILE);\
    lua_setfield(L, -2, "COMPILE");\
    lua_pushnumber(L, GL_COMPILE_AND_EXECUTE);\
    lua_setfield(L, -2, "COMPILE_AND_EXECUTE");\
    lua_pushnumber(L, GL_CONSTANT_ATTENUATION);\
    lua_setfield(L, -2, "CONSTANT_ATTENUATION");\
    lua_pushnumber(L, GL_COPY);\
    lua_setfield(L, -2, "COPY");\
    lua_pushnumber(L, GL_COPY_INVERTED);\
    lua_setfield(L, -2, "COPY_INVERTED");\
    lua_pushnumber(L, GL_COPY_PIXEL_TOKEN);\
    lua_setfield(L, -2, "COPY_PIXEL_TOKEN");\
    lua_pushnumber(L, GL_CULL_FACE);\
    lua_setfield(L, -2, "CULL_FACE");\
    lua_pushnumber(L, GL_CULL_FACE_MODE);\
    lua_setfield(L, -2, "CULL_FACE_MODE");\
    lua_pushnumber(L, GL_CURRENT_BIT);\
    lua_setfield(L, -2, "CURRENT_BIT");\
    lua_pushnumber(L, GL_CURRENT_COLOR);\
    lua_setfield(L, -2, "CURRENT_COLOR");\
    lua_pushnumber(L, GL_CURRENT_INDEX);\
    lua_setfield(L, -2, "CURRENT_INDEX");\
    lua_pushnumber(L, GL_CURRENT_NORMAL);\
    lua_setfield(L, -2, "CURRENT_NORMAL");\
    lua_pushnumber(L, GL_CURRENT_RASTER_COLOR);\
    lua_setfield(L, -2, "CURRENT_RASTER_COLOR");\
    lua_pushnumber(L, GL_CURRENT_RASTER_DISTANCE);\
    lua_setfield(L, -2, "CURRENT_RASTER_DISTANCE");\
    lua_pushnumber(L, GL_CURRENT_RASTER_INDEX);\
    lua_setfield(L, -2, "CURRENT_RASTER_INDEX");\
    lua_pushnumber(L, GL_CURRENT_RASTER_POSITION);\
    lua_setfield(L, -2, "CURRENT_RASTER_POSITION");\
    lua_pushnumber(L, GL_CURRENT_RASTER_POSITION_VALID);\
    lua_setfield(L, -2, "CURRENT_RASTER_POSITION_VALID");\
    lua_pushnumber(L, GL_CURRENT_RASTER_TEXTURE_COORDS);\
    lua_setfield(L, -2, "CURRENT_RASTER_TEXTURE_COORDS");\
    lua_pushnumber(L, GL_CURRENT_TEXTURE_COORDS);\
    lua_setfield(L, -2, "CURRENT_TEXTURE_COORDS");\
    lua_pushnumber(L, GL_CW);\
    lua_setfield(L, -2, "CW");\
    lua_pushnumber(L, GL_DECAL);\
    lua_setfield(L, -2, "DECAL");\
    lua_pushnumber(L, GL_DECR);\
    lua_setfield(L, -2, "DECR");\
    lua_pushnumber(L, GL_DEPTH);\
    lua_setfield(L, -2, "DEPTH");\
    lua_pushnumber(L, GL_DEPTH_BIAS);\
    lua_setfield(L, -2, "DEPTH_BIAS");\
    lua_pushnumber(L, GL_DEPTH_BITS);\
    lua_setfield(L, -2, "DEPTH_BITS");\
    lua_pushnumber(L, GL_DEPTH_BUFFER_BIT);\
    lua_setfield(L, -2, "DEPTH_BUFFER_BIT");\
    lua_pushnumber(L, GL_DEPTH_CLEAR_VALUE);\
    lua_setfield(L, -2, "DEPTH_CLEAR_VALUE");\
    lua_pushnumber(L, GL_DEPTH_COMPONENT);\
    lua_setfield(L, -2, "DEPTH_COMPONENT");\
    lua_pushnumber(L, GL_DEPTH_FUNC);\
    lua_setfield(L, -2, "DEPTH_FUNC");\
    lua_pushnumber(L, GL_DEPTH_RANGE);\
    lua_setfield(L, -2, "DEPTH_RANGE");\
    lua_pushnumber(L, GL_DEPTH_SCALE);\
    lua_setfield(L, -2, "DEPTH_SCALE");\
    lua_pushnumber(L, GL_DEPTH_TEST);\
    lua_setfield(L, -2, "DEPTH_TEST");\
    lua_pushnumber(L, GL_DEPTH_WRITEMASK);\
    lua_setfield(L, -2, "DEPTH_WRITEMASK");\
    lua_pushnumber(L, GL_DIFFUSE);\
    lua_setfield(L, -2, "DIFFUSE");\
    lua_pushnumber(L, GL_DITHER);\
    lua_setfield(L, -2, "DITHER");\
    lua_pushnumber(L, GL_DOMAIN);\
    lua_setfield(L, -2, "DOMAIN");\
    lua_pushnumber(L, GL_DONT_CARE);\
    lua_setfield(L, -2, "DONT_CARE");\
    lua_pushnumber(L, GL_DOUBLE);\
    lua_setfield(L, -2, "DOUBLE");\
    lua_pushnumber(L, GL_DOUBLEBUFFER);\
    lua_setfield(L, -2, "DOUBLEBUFFER");\
    lua_pushnumber(L, GL_DRAW_BUFFER);\
    lua_setfield(L, -2, "DRAW_BUFFER");\
    lua_pushnumber(L, GL_DRAW_PIXEL_TOKEN);\
    lua_setfield(L, -2, "DRAW_PIXEL_TOKEN");\
    lua_pushnumber(L, GL_DST_ALPHA);\
    lua_setfield(L, -2, "DST_ALPHA");\
    lua_pushnumber(L, GL_DST_COLOR);\
    lua_setfield(L, -2, "DST_COLOR");\
    lua_pushnumber(L, GL_EDGE_FLAG);\
    lua_setfield(L, -2, "EDGE_FLAG");\
    lua_pushnumber(L, GL_EDGE_FLAG_ARRAY);\
    lua_setfield(L, -2, "EDGE_FLAG_ARRAY");\
    lua_pushnumber(L, GL_EDGE_FLAG_ARRAY_POINTER);\
    lua_setfield(L, -2, "EDGE_FLAG_ARRAY_POINTER");\
    lua_pushnumber(L, GL_EDGE_FLAG_ARRAY_STRIDE);\
    lua_setfield(L, -2, "EDGE_FLAG_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_EMISSION);\
    lua_setfield(L, -2, "EMISSION");\
    lua_pushnumber(L, GL_ENABLE_BIT);\
    lua_setfield(L, -2, "ENABLE_BIT");\
    lua_pushnumber(L, GL_EQUAL);\
    lua_setfield(L, -2, "EQUAL");\
    lua_pushnumber(L, GL_EQUIV);\
    lua_setfield(L, -2, "EQUIV");\
    lua_pushnumber(L, GL_EVAL_BIT);\
    lua_setfield(L, -2, "EVAL_BIT");\
    lua_pushnumber(L, GL_EXP);\
    lua_setfield(L, -2, "EXP");\
    lua_pushnumber(L, GL_EXP2);\
    lua_setfield(L, -2, "EXP2");\
    lua_pushnumber(L, GL_EXTENSIONS);\
    lua_setfield(L, -2, "EXTENSIONS");\
    lua_pushnumber(L, GL_EYE_LINEAR);\
    lua_setfield(L, -2, "EYE_LINEAR");\
    lua_pushnumber(L, GL_EYE_PLANE);\
    lua_setfield(L, -2, "EYE_PLANE");\
    lua_pushnumber(L, GL_FALSE);\
    lua_setfield(L, -2, "FALSE");\
    lua_pushnumber(L, GL_FASTEST);\
    lua_setfield(L, -2, "FASTEST");\
    lua_pushnumber(L, GL_FEEDBACK);\
    lua_setfield(L, -2, "FEEDBACK");\
    lua_pushnumber(L, GL_FEEDBACK_BUFFER_POINTER);\
    lua_setfield(L, -2, "FEEDBACK_BUFFER_POINTER");\
    lua_pushnumber(L, GL_FEEDBACK_BUFFER_SIZE);\
    lua_setfield(L, -2, "FEEDBACK_BUFFER_SIZE");\
    lua_pushnumber(L, GL_FEEDBACK_BUFFER_TYPE);\
    lua_setfield(L, -2, "FEEDBACK_BUFFER_TYPE");\
    lua_pushnumber(L, GL_FILL);\
    lua_setfield(L, -2, "FILL");\
    lua_pushnumber(L, GL_FLAT);\
    lua_setfield(L, -2, "FLAT");\
    lua_pushnumber(L, GL_FLOAT);\
    lua_setfield(L, -2, "FLOAT");\
    lua_pushnumber(L, GL_FOG);\
    lua_setfield(L, -2, "FOG");\
    lua_pushnumber(L, GL_FOG_BIT);\
    lua_setfield(L, -2, "FOG_BIT");\
    lua_pushnumber(L, GL_FOG_COLOR);\
    lua_setfield(L, -2, "FOG_COLOR");\
    lua_pushnumber(L, GL_FOG_DENSITY);\
    lua_setfield(L, -2, "FOG_DENSITY");\
    lua_pushnumber(L, GL_FOG_END);\
    lua_setfield(L, -2, "FOG_END");\
    lua_pushnumber(L, GL_FOG_HINT);\
    lua_setfield(L, -2, "FOG_HINT");\
    lua_pushnumber(L, GL_FOG_INDEX);\
    lua_setfield(L, -2, "FOG_INDEX");\
    lua_pushnumber(L, GL_FOG_MODE);\
    lua_setfield(L, -2, "FOG_MODE");\
    lua_pushnumber(L, GL_FOG_START);\
    lua_setfield(L, -2, "FOG_START");\
    lua_pushnumber(L, GL_FRONT);\
    lua_setfield(L, -2, "FRONT");\
    lua_pushnumber(L, GL_FRONT_AND_BACK);\
    lua_setfield(L, -2, "FRONT_AND_BACK");\
    lua_pushnumber(L, GL_FRONT_FACE);\
    lua_setfield(L, -2, "FRONT_FACE");\
    lua_pushnumber(L, GL_FRONT_LEFT);\
    lua_setfield(L, -2, "FRONT_LEFT");\
    lua_pushnumber(L, GL_FRONT_RIGHT);\
    lua_setfield(L, -2, "FRONT_RIGHT");\
    lua_pushnumber(L, GL_GEQUAL);\
    lua_setfield(L, -2, "GEQUAL");\
    lua_pushnumber(L, GL_GREATER);\
    lua_setfield(L, -2, "GREATER");\
    lua_pushnumber(L, GL_GREEN);\
    lua_setfield(L, -2, "GREEN");\
    lua_pushnumber(L, GL_GREEN_BIAS);\
    lua_setfield(L, -2, "GREEN_BIAS");\
    lua_pushnumber(L, GL_GREEN_BITS);\
    lua_setfield(L, -2, "GREEN_BITS");\
    lua_pushnumber(L, GL_GREEN_SCALE);\
    lua_setfield(L, -2, "GREEN_SCALE");\
    lua_pushnumber(L, GL_HINT_BIT);\
    lua_setfield(L, -2, "HINT_BIT");\
    lua_pushnumber(L, GL_INCR);\
    lua_setfield(L, -2, "INCR");\
    lua_pushnumber(L, GL_INDEX_ARRAY);\
    lua_setfield(L, -2, "INDEX_ARRAY");\
    lua_pushnumber(L, GL_INDEX_ARRAY_POINTER);\
    lua_setfield(L, -2, "INDEX_ARRAY_POINTER");\
    lua_pushnumber(L, GL_INDEX_ARRAY_STRIDE);\
    lua_setfield(L, -2, "INDEX_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_INDEX_ARRAY_TYPE);\
    lua_setfield(L, -2, "INDEX_ARRAY_TYPE");\
    lua_pushnumber(L, GL_INDEX_BITS);\
    lua_setfield(L, -2, "INDEX_BITS");\
    lua_pushnumber(L, GL_INDEX_CLEAR_VALUE);\
    lua_setfield(L, -2, "INDEX_CLEAR_VALUE");\
    lua_pushnumber(L, GL_INDEX_LOGIC_OP);\
    lua_setfield(L, -2, "INDEX_LOGIC_OP");\
    lua_pushnumber(L, GL_INDEX_MODE);\
    lua_setfield(L, -2, "INDEX_MODE");\
    lua_pushnumber(L, GL_INDEX_OFFSET);\
    lua_setfield(L, -2, "INDEX_OFFSET");\
    lua_pushnumber(L, GL_INDEX_SHIFT);\
    lua_setfield(L, -2, "INDEX_SHIFT");\
    lua_pushnumber(L, GL_INDEX_WRITEMASK);\
    lua_setfield(L, -2, "INDEX_WRITEMASK");\
    lua_pushnumber(L, GL_INT);\
    lua_setfield(L, -2, "INT");\
    lua_pushnumber(L, GL_INTENSITY);\
    lua_setfield(L, -2, "INTENSITY");\
    lua_pushnumber(L, GL_INTENSITY12);\
    lua_setfield(L, -2, "INTENSITY12");\
    lua_pushnumber(L, GL_INTENSITY16);\
    lua_setfield(L, -2, "INTENSITY16");\
    lua_pushnumber(L, GL_INTENSITY4);\
    lua_setfield(L, -2, "INTENSITY4");\
    lua_pushnumber(L, GL_INTENSITY8);\
    lua_setfield(L, -2, "INTENSITY8");\
    lua_pushnumber(L, GL_INVALID_ENUM);\
    lua_setfield(L, -2, "INVALID_ENUM");\
    lua_pushnumber(L, GL_INVALID_OPERATION);\
    lua_setfield(L, -2, "INVALID_OPERATION");\
    lua_pushnumber(L, GL_INVALID_VALUE);\
    lua_setfield(L, -2, "INVALID_VALUE");\
    lua_pushnumber(L, GL_INVERT);\
    lua_setfield(L, -2, "INVERT");\
    lua_pushnumber(L, GL_KEEP);\
    lua_setfield(L, -2, "KEEP");\
    lua_pushnumber(L, GL_LEFT);\
    lua_setfield(L, -2, "LEFT");\
    lua_pushnumber(L, GL_LEQUAL);\
    lua_setfield(L, -2, "LEQUAL");\
    lua_pushnumber(L, GL_LESS);\
    lua_setfield(L, -2, "LESS");\
    lua_pushnumber(L, GL_LIGHT0);\
    lua_setfield(L, -2, "LIGHT0");\
    lua_pushnumber(L, GL_LIGHT1);\
    lua_setfield(L, -2, "LIGHT1");\
    lua_pushnumber(L, GL_LIGHT2);\
    lua_setfield(L, -2, "LIGHT2");\
    lua_pushnumber(L, GL_LIGHT3);\
    lua_setfield(L, -2, "LIGHT3");\
    lua_pushnumber(L, GL_LIGHT4);\
    lua_setfield(L, -2, "LIGHT4");\
    lua_pushnumber(L, GL_LIGHT5);\
    lua_setfield(L, -2, "LIGHT5");\
    lua_pushnumber(L, GL_LIGHT6);\
    lua_setfield(L, -2, "LIGHT6");\
    lua_pushnumber(L, GL_LIGHT7);\
    lua_setfield(L, -2, "LIGHT7");\
    lua_pushnumber(L, GL_LIGHTING);\
    lua_setfield(L, -2, "LIGHTING");\
    lua_pushnumber(L, GL_LIGHTING_BIT);\
    lua_setfield(L, -2, "LIGHTING_BIT");\
    lua_pushnumber(L, GL_LIGHT_MODEL_AMBIENT);\
    lua_setfield(L, -2, "LIGHT_MODEL_AMBIENT");\
    lua_pushnumber(L, GL_LIGHT_MODEL_LOCAL_VIEWER);\
    lua_setfield(L, -2, "LIGHT_MODEL_LOCAL_VIEWER");\
    lua_pushnumber(L, GL_LIGHT_MODEL_TWO_SIDE);\
    lua_setfield(L, -2, "LIGHT_MODEL_TWO_SIDE");\
    lua_pushnumber(L, GL_LINE);\
    lua_setfield(L, -2, "LINE");\
    lua_pushnumber(L, GL_LINEAR);\
    lua_setfield(L, -2, "LINEAR");\
    lua_pushnumber(L, GL_LINEAR_ATTENUATION);\
    lua_setfield(L, -2, "LINEAR_ATTENUATION");\
    lua_pushnumber(L, GL_LINEAR_MIPMAP_LINEAR);\
    lua_setfield(L, -2, "LINEAR_MIPMAP_LINEAR");\
    lua_pushnumber(L, GL_LINEAR_MIPMAP_NEAREST);\
    lua_setfield(L, -2, "LINEAR_MIPMAP_NEAREST");\
    lua_pushnumber(L, GL_LINES);\
    lua_setfield(L, -2, "LINES");\
    lua_pushnumber(L, GL_LINE_BIT);\
    lua_setfield(L, -2, "LINE_BIT");\
    lua_pushnumber(L, GL_LINE_LOOP);\
    lua_setfield(L, -2, "LINE_LOOP");\
    lua_pushnumber(L, GL_LINE_RESET_TOKEN);\
    lua_setfield(L, -2, "LINE_RESET_TOKEN");\
    lua_pushnumber(L, GL_LINE_SMOOTH);\
    lua_setfield(L, -2, "LINE_SMOOTH");\
    lua_pushnumber(L, GL_LINE_SMOOTH_HINT);\
    lua_setfield(L, -2, "LINE_SMOOTH_HINT");\
    lua_pushnumber(L, GL_LINE_STIPPLE);\
    lua_setfield(L, -2, "LINE_STIPPLE");\
    lua_pushnumber(L, GL_LINE_STIPPLE_PATTERN);\
    lua_setfield(L, -2, "LINE_STIPPLE_PATTERN");\
    lua_pushnumber(L, GL_LINE_STIPPLE_REPEAT);\
    lua_setfield(L, -2, "LINE_STIPPLE_REPEAT");\
    lua_pushnumber(L, GL_LINE_STRIP);\
    lua_setfield(L, -2, "LINE_STRIP");\
    lua_pushnumber(L, GL_LINE_TOKEN);\
    lua_setfield(L, -2, "LINE_TOKEN");\
    lua_pushnumber(L, GL_LINE_WIDTH);\
    lua_setfield(L, -2, "LINE_WIDTH");\
    lua_pushnumber(L, GL_LINE_WIDTH_GRANULARITY);\
    lua_setfield(L, -2, "LINE_WIDTH_GRANULARITY");\
    lua_pushnumber(L, GL_LINE_WIDTH_RANGE);\
    lua_setfield(L, -2, "LINE_WIDTH_RANGE");\
    lua_pushnumber(L, GL_LIST_BASE);\
    lua_setfield(L, -2, "LIST_BASE");\
    lua_pushnumber(L, GL_LIST_BIT);\
    lua_setfield(L, -2, "LIST_BIT");\
    lua_pushnumber(L, GL_LIST_INDEX);\
    lua_setfield(L, -2, "LIST_INDEX");\
    lua_pushnumber(L, GL_LIST_MODE);\
    lua_setfield(L, -2, "LIST_MODE");\
    lua_pushnumber(L, GL_LOAD);\
    lua_setfield(L, -2, "LOAD");\
    lua_pushnumber(L, GL_LOGIC_OP);\
    lua_setfield(L, -2, "LOGIC_OP");\
    lua_pushnumber(L, GL_LOGIC_OP_MODE);\
    lua_setfield(L, -2, "LOGIC_OP_MODE");\
    lua_pushnumber(L, GL_LUMINANCE);\
    lua_setfield(L, -2, "LUMINANCE");\
    lua_pushnumber(L, GL_LUMINANCE12);\
    lua_setfield(L, -2, "LUMINANCE12");\
    lua_pushnumber(L, GL_LUMINANCE12_ALPHA12);\
    lua_setfield(L, -2, "LUMINANCE12_ALPHA12");\
    lua_pushnumber(L, GL_LUMINANCE12_ALPHA4);\
    lua_setfield(L, -2, "LUMINANCE12_ALPHA4");\
    lua_pushnumber(L, GL_LUMINANCE16);\
    lua_setfield(L, -2, "LUMINANCE16");\
    lua_pushnumber(L, GL_LUMINANCE16_ALPHA16);\
    lua_setfield(L, -2, "LUMINANCE16_ALPHA16");\
    lua_pushnumber(L, GL_LUMINANCE4);\
    lua_setfield(L, -2, "LUMINANCE4");\
    lua_pushnumber(L, GL_LUMINANCE4_ALPHA4);\
    lua_setfield(L, -2, "LUMINANCE4_ALPHA4");\
    lua_pushnumber(L, GL_LUMINANCE6_ALPHA2);\
    lua_setfield(L, -2, "LUMINANCE6_ALPHA2");\
    lua_pushnumber(L, GL_LUMINANCE8);\
    lua_setfield(L, -2, "LUMINANCE8");\
    lua_pushnumber(L, GL_LUMINANCE8_ALPHA8);\
    lua_setfield(L, -2, "LUMINANCE8_ALPHA8");\
    lua_pushnumber(L, GL_LUMINANCE_ALPHA);\
    lua_setfield(L, -2, "LUMINANCE_ALPHA");\
    lua_pushnumber(L, GL_MAP1_COLOR_4);\
    lua_setfield(L, -2, "MAP1_COLOR_4");\
    lua_pushnumber(L, GL_MAP1_GRID_DOMAIN);\
    lua_setfield(L, -2, "MAP1_GRID_DOMAIN");\
    lua_pushnumber(L, GL_MAP1_GRID_SEGMENTS);\
    lua_setfield(L, -2, "MAP1_GRID_SEGMENTS");\
    lua_pushnumber(L, GL_MAP1_INDEX);\
    lua_setfield(L, -2, "MAP1_INDEX");\
    lua_pushnumber(L, GL_MAP1_NORMAL);\
    lua_setfield(L, -2, "MAP1_NORMAL");\
    lua_pushnumber(L, GL_MAP1_TEXTURE_COORD_1);\
    lua_setfield(L, -2, "MAP1_TEXTURE_COORD_1");\
    lua_pushnumber(L, GL_MAP1_TEXTURE_COORD_2);\
    lua_setfield(L, -2, "MAP1_TEXTURE_COORD_2");\
    lua_pushnumber(L, GL_MAP1_TEXTURE_COORD_3);\
    lua_setfield(L, -2, "MAP1_TEXTURE_COORD_3");\
    lua_pushnumber(L, GL_MAP1_TEXTURE_COORD_4);\
    lua_setfield(L, -2, "MAP1_TEXTURE_COORD_4");\
    lua_pushnumber(L, GL_MAP1_VERTEX_3);\
    lua_setfield(L, -2, "MAP1_VERTEX_3");\
    lua_pushnumber(L, GL_MAP1_VERTEX_4);\
    lua_setfield(L, -2, "MAP1_VERTEX_4");\
    lua_pushnumber(L, GL_MAP2_COLOR_4);\
    lua_setfield(L, -2, "MAP2_COLOR_4");\
    lua_pushnumber(L, GL_MAP2_GRID_DOMAIN);\
    lua_setfield(L, -2, "MAP2_GRID_DOMAIN");\
    lua_pushnumber(L, GL_MAP2_GRID_SEGMENTS);\
    lua_setfield(L, -2, "MAP2_GRID_SEGMENTS");\
    lua_pushnumber(L, GL_MAP2_INDEX);\
    lua_setfield(L, -2, "MAP2_INDEX");\
    lua_pushnumber(L, GL_MAP2_NORMAL);\
    lua_setfield(L, -2, "MAP2_NORMAL");\
    lua_pushnumber(L, GL_MAP2_TEXTURE_COORD_1);\
    lua_setfield(L, -2, "MAP2_TEXTURE_COORD_1");\
    lua_pushnumber(L, GL_MAP2_TEXTURE_COORD_2);\
    lua_setfield(L, -2, "MAP2_TEXTURE_COORD_2");\
    lua_pushnumber(L, GL_MAP2_TEXTURE_COORD_3);\
    lua_setfield(L, -2, "MAP2_TEXTURE_COORD_3");\
    lua_pushnumber(L, GL_MAP2_TEXTURE_COORD_4);\
    lua_setfield(L, -2, "MAP2_TEXTURE_COORD_4");\
    lua_pushnumber(L, GL_MAP2_VERTEX_3);\
    lua_setfield(L, -2, "MAP2_VERTEX_3");\
    lua_pushnumber(L, GL_MAP2_VERTEX_4);\
    lua_setfield(L, -2, "MAP2_VERTEX_4");\
    lua_pushnumber(L, GL_MAP_COLOR);\
    lua_setfield(L, -2, "MAP_COLOR");\
    lua_pushnumber(L, GL_MAP_STENCIL);\
    lua_setfield(L, -2, "MAP_STENCIL");\
    lua_pushnumber(L, GL_MATRIX_MODE);\
    lua_setfield(L, -2, "MATRIX_MODE");\
    lua_pushnumber(L, GL_MAX_ATTRIB_STACK_DEPTH);\
    lua_setfield(L, -2, "MAX_ATTRIB_STACK_DEPTH");\
    lua_pushnumber(L, GL_MAX_CLIENT_ATTRIB_STACK_DEPTH);\
    lua_setfield(L, -2, "MAX_CLIENT_ATTRIB_STACK_DEPTH");\
    lua_pushnumber(L, GL_MAX_CLIP_PLANES);\
    lua_setfield(L, -2, "MAX_CLIP_PLANES");\
    lua_pushnumber(L, GL_MAX_EVAL_ORDER);\
    lua_setfield(L, -2, "MAX_EVAL_ORDER");\
    lua_pushnumber(L, GL_MAX_LIGHTS);\
    lua_setfield(L, -2, "MAX_LIGHTS");\
    lua_pushnumber(L, GL_MAX_LIST_NESTING);\
    lua_setfield(L, -2, "MAX_LIST_NESTING");\
    lua_pushnumber(L, GL_MAX_MODELVIEW_STACK_DEPTH);\
    lua_setfield(L, -2, "MAX_MODELVIEW_STACK_DEPTH");\
    lua_pushnumber(L, GL_MAX_NAME_STACK_DEPTH);\
    lua_setfield(L, -2, "MAX_NAME_STACK_DEPTH");\
    lua_pushnumber(L, GL_MAX_PIXEL_MAP_TABLE);\
    lua_setfield(L, -2, "MAX_PIXEL_MAP_TABLE");\
    lua_pushnumber(L, GL_MAX_PROJECTION_STACK_DEPTH);\
    lua_setfield(L, -2, "MAX_PROJECTION_STACK_DEPTH");\
    lua_pushnumber(L, GL_MAX_TEXTURE_SIZE);\
    lua_setfield(L, -2, "MAX_TEXTURE_SIZE");\
    lua_pushnumber(L, GL_MAX_TEXTURE_STACK_DEPTH);\
    lua_setfield(L, -2, "MAX_TEXTURE_STACK_DEPTH");\
    lua_pushnumber(L, GL_MAX_VIEWPORT_DIMS);\
    lua_setfield(L, -2, "MAX_VIEWPORT_DIMS");\
    lua_pushnumber(L, GL_MODELVIEW);\
    lua_setfield(L, -2, "MODELVIEW");\
    lua_pushnumber(L, GL_MODELVIEW_MATRIX);\
    lua_setfield(L, -2, "MODELVIEW_MATRIX");\
    lua_pushnumber(L, GL_MODELVIEW_STACK_DEPTH);\
    lua_setfield(L, -2, "MODELVIEW_STACK_DEPTH");\
    lua_pushnumber(L, GL_MODULATE);\
    lua_setfield(L, -2, "MODULATE");\
    lua_pushnumber(L, GL_MULT);\
    lua_setfield(L, -2, "MULT");\
    lua_pushnumber(L, GL_N3F_V3F);\
    lua_setfield(L, -2, "N3F_V3F");\
    lua_pushnumber(L, GL_NAME_STACK_DEPTH);\
    lua_setfield(L, -2, "NAME_STACK_DEPTH");\
    lua_pushnumber(L, GL_NAND);\
    lua_setfield(L, -2, "NAND");\
    lua_pushnumber(L, GL_NEAREST);\
    lua_setfield(L, -2, "NEAREST");\
    lua_pushnumber(L, GL_NEAREST_MIPMAP_LINEAR);\
    lua_setfield(L, -2, "NEAREST_MIPMAP_LINEAR");\
    lua_pushnumber(L, GL_NEAREST_MIPMAP_NEAREST);\
    lua_setfield(L, -2, "NEAREST_MIPMAP_NEAREST");\
    lua_pushnumber(L, GL_NEVER);\
    lua_setfield(L, -2, "NEVER");\
    lua_pushnumber(L, GL_NICEST);\
    lua_setfield(L, -2, "NICEST");\
    lua_pushnumber(L, GL_NONE);\
    lua_setfield(L, -2, "NONE");\
    lua_pushnumber(L, GL_NOOP);\
    lua_setfield(L, -2, "NOOP");\
    lua_pushnumber(L, GL_NOR);\
    lua_setfield(L, -2, "NOR");\
    lua_pushnumber(L, GL_NORMALIZE);\
    lua_setfield(L, -2, "NORMALIZE");\
    lua_pushnumber(L, GL_NORMAL_ARRAY);\
    lua_setfield(L, -2, "NORMAL_ARRAY");\
    lua_pushnumber(L, GL_NORMAL_ARRAY_POINTER);\
    lua_setfield(L, -2, "NORMAL_ARRAY_POINTER");\
    lua_pushnumber(L, GL_NORMAL_ARRAY_STRIDE);\
    lua_setfield(L, -2, "NORMAL_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_NORMAL_ARRAY_TYPE);\
    lua_setfield(L, -2, "NORMAL_ARRAY_TYPE");\
    lua_pushnumber(L, GL_NOTEQUAL);\
    lua_setfield(L, -2, "NOTEQUAL");\
    lua_pushnumber(L, GL_NO_ERROR);\
    lua_setfield(L, -2, "NO_ERROR");\
    lua_pushnumber(L, GL_OBJECT_LINEAR);\
    lua_setfield(L, -2, "OBJECT_LINEAR");\
    lua_pushnumber(L, GL_OBJECT_PLANE);\
    lua_setfield(L, -2, "OBJECT_PLANE");\
    lua_pushnumber(L, GL_ONE);\
    lua_setfield(L, -2, "ONE");\
    lua_pushnumber(L, GL_ONE_MINUS_DST_ALPHA);\
    lua_setfield(L, -2, "ONE_MINUS_DST_ALPHA");\
    lua_pushnumber(L, GL_ONE_MINUS_DST_COLOR);\
    lua_setfield(L, -2, "ONE_MINUS_DST_COLOR");\
    lua_pushnumber(L, GL_ONE_MINUS_SRC_ALPHA);\
    lua_setfield(L, -2, "ONE_MINUS_SRC_ALPHA");\
    lua_pushnumber(L, GL_ONE_MINUS_SRC_COLOR);\
    lua_setfield(L, -2, "ONE_MINUS_SRC_COLOR");\
    lua_pushnumber(L, GL_OR);\
    lua_setfield(L, -2, "OR");\
    lua_pushnumber(L, GL_ORDER);\
    lua_setfield(L, -2, "ORDER");\
    lua_pushnumber(L, GL_OR_INVERTED);\
    lua_setfield(L, -2, "OR_INVERTED");\
    lua_pushnumber(L, GL_OR_REVERSE);\
    lua_setfield(L, -2, "OR_REVERSE");\
    lua_pushnumber(L, GL_OUT_OF_MEMORY);\
    lua_setfield(L, -2, "OUT_OF_MEMORY");\
    lua_pushnumber(L, GL_PACK_ALIGNMENT);\
    lua_setfield(L, -2, "PACK_ALIGNMENT");\
    lua_pushnumber(L, GL_PACK_LSB_FIRST);\
    lua_setfield(L, -2, "PACK_LSB_FIRST");\
    lua_pushnumber(L, GL_PACK_ROW_LENGTH);\
    lua_setfield(L, -2, "PACK_ROW_LENGTH");\
    lua_pushnumber(L, GL_PACK_SKIP_PIXELS);\
    lua_setfield(L, -2, "PACK_SKIP_PIXELS");\
    lua_pushnumber(L, GL_PACK_SKIP_ROWS);\
    lua_setfield(L, -2, "PACK_SKIP_ROWS");\
    lua_pushnumber(L, GL_PACK_SWAP_BYTES);\
    lua_setfield(L, -2, "PACK_SWAP_BYTES");\
    lua_pushnumber(L, GL_PASS_THROUGH_TOKEN);\
    lua_setfield(L, -2, "PASS_THROUGH_TOKEN");\
    lua_pushnumber(L, GL_PERSPECTIVE_CORRECTION_HINT);\
    lua_setfield(L, -2, "PERSPECTIVE_CORRECTION_HINT");\
    lua_pushnumber(L, GL_PIXEL_MAP_A_TO_A);\
    lua_setfield(L, -2, "PIXEL_MAP_A_TO_A");\
    lua_pushnumber(L, GL_PIXEL_MAP_A_TO_A_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_A_TO_A_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_B_TO_B);\
    lua_setfield(L, -2, "PIXEL_MAP_B_TO_B");\
    lua_pushnumber(L, GL_PIXEL_MAP_B_TO_B_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_B_TO_B_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_G_TO_G);\
    lua_setfield(L, -2, "PIXEL_MAP_G_TO_G");\
    lua_pushnumber(L, GL_PIXEL_MAP_G_TO_G_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_G_TO_G_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_A);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_A");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_A_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_A_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_B);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_B");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_B_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_B_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_G);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_G");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_G_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_G_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_I);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_I");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_I_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_I_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_R);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_R");\
    lua_pushnumber(L, GL_PIXEL_MAP_I_TO_R_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_I_TO_R_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_R_TO_R);\
    lua_setfield(L, -2, "PIXEL_MAP_R_TO_R");\
    lua_pushnumber(L, GL_PIXEL_MAP_R_TO_R_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_R_TO_R_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MAP_S_TO_S);\
    lua_setfield(L, -2, "PIXEL_MAP_S_TO_S");\
    lua_pushnumber(L, GL_PIXEL_MAP_S_TO_S_SIZE);\
    lua_setfield(L, -2, "PIXEL_MAP_S_TO_S_SIZE");\
    lua_pushnumber(L, GL_PIXEL_MODE_BIT);\
    lua_setfield(L, -2, "PIXEL_MODE_BIT");\
    lua_pushnumber(L, GL_POINT);\
    lua_setfield(L, -2, "POINT");\
    lua_pushnumber(L, GL_POINTS);\
    lua_setfield(L, -2, "POINTS");\
    lua_pushnumber(L, GL_POINT_BIT);\
    lua_setfield(L, -2, "POINT_BIT");\
    lua_pushnumber(L, GL_POINT_SIZE);\
    lua_setfield(L, -2, "POINT_SIZE");\
    lua_pushnumber(L, GL_POINT_SIZE_GRANULARITY);\
    lua_setfield(L, -2, "POINT_SIZE_GRANULARITY");\
    lua_pushnumber(L, GL_POINT_SIZE_RANGE);\
    lua_setfield(L, -2, "POINT_SIZE_RANGE");\
    lua_pushnumber(L, GL_POINT_SMOOTH);\
    lua_setfield(L, -2, "POINT_SMOOTH");\
    lua_pushnumber(L, GL_POINT_SMOOTH_HINT);\
    lua_setfield(L, -2, "POINT_SMOOTH_HINT");\
    lua_pushnumber(L, GL_POINT_TOKEN);\
    lua_setfield(L, -2, "POINT_TOKEN");\
    lua_pushnumber(L, GL_POLYGON);\
    lua_setfield(L, -2, "POLYGON");\
    lua_pushnumber(L, GL_POLYGON_BIT);\
    lua_setfield(L, -2, "POLYGON_BIT");\
    lua_pushnumber(L, GL_POLYGON_MODE);\
    lua_setfield(L, -2, "POLYGON_MODE");\
    lua_pushnumber(L, GL_POLYGON_OFFSET_FACTOR);\
    lua_setfield(L, -2, "POLYGON_OFFSET_FACTOR");\
    lua_pushnumber(L, GL_POLYGON_OFFSET_FILL);\
    lua_setfield(L, -2, "POLYGON_OFFSET_FILL");\
    lua_pushnumber(L, GL_POLYGON_OFFSET_LINE);\
    lua_setfield(L, -2, "POLYGON_OFFSET_LINE");\
    lua_pushnumber(L, GL_POLYGON_OFFSET_POINT);\
    lua_setfield(L, -2, "POLYGON_OFFSET_POINT");\
    lua_pushnumber(L, GL_POLYGON_OFFSET_UNITS);\
    lua_setfield(L, -2, "POLYGON_OFFSET_UNITS");\
    lua_pushnumber(L, GL_POLYGON_SMOOTH);\
    lua_setfield(L, -2, "POLYGON_SMOOTH");\
    lua_pushnumber(L, GL_POLYGON_SMOOTH_HINT);\
    lua_setfield(L, -2, "POLYGON_SMOOTH_HINT");\
    lua_pushnumber(L, GL_POLYGON_STIPPLE);\
    lua_setfield(L, -2, "POLYGON_STIPPLE");\
    lua_pushnumber(L, GL_POLYGON_STIPPLE_BIT);\
    lua_setfield(L, -2, "POLYGON_STIPPLE_BIT");\
    lua_pushnumber(L, GL_POLYGON_TOKEN);\
    lua_setfield(L, -2, "POLYGON_TOKEN");\
    lua_pushnumber(L, GL_POSITION);\
    lua_setfield(L, -2, "POSITION");\
    lua_pushnumber(L, GL_PROJECTION);\
    lua_setfield(L, -2, "PROJECTION");\
    lua_pushnumber(L, GL_PROJECTION_MATRIX);\
    lua_setfield(L, -2, "PROJECTION_MATRIX");\
    lua_pushnumber(L, GL_PROJECTION_STACK_DEPTH);\
    lua_setfield(L, -2, "PROJECTION_STACK_DEPTH");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_1D);\
    lua_setfield(L, -2, "PROXY_TEXTURE_1D");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_2D);\
    lua_setfield(L, -2, "PROXY_TEXTURE_2D");\
    lua_pushnumber(L, GL_Q);\
    lua_setfield(L, -2, "Q");\
    lua_pushnumber(L, GL_QUADRATIC_ATTENUATION);\
    lua_setfield(L, -2, "QUADRATIC_ATTENUATION");\
    lua_pushnumber(L, GL_QUADS);\
    lua_setfield(L, -2, "QUADS");\
    lua_pushnumber(L, GL_QUAD_STRIP);\
    lua_setfield(L, -2, "QUAD_STRIP");\
    lua_pushnumber(L, GL_R);\
    lua_setfield(L, -2, "R");\
    lua_pushnumber(L, GL_R3_G3_B2);\
    lua_setfield(L, -2, "R3_G3_B2");\
    lua_pushnumber(L, GL_READ_BUFFER);\
    lua_setfield(L, -2, "READ_BUFFER");\
    lua_pushnumber(L, GL_RED);\
    lua_setfield(L, -2, "RED");\
    lua_pushnumber(L, GL_RED_BIAS);\
    lua_setfield(L, -2, "RED_BIAS");\
    lua_pushnumber(L, GL_RED_BITS);\
    lua_setfield(L, -2, "RED_BITS");\
    lua_pushnumber(L, GL_RED_SCALE);\
    lua_setfield(L, -2, "RED_SCALE");\
    lua_pushnumber(L, GL_RENDER);\
    lua_setfield(L, -2, "RENDER");\
    lua_pushnumber(L, GL_RENDERER);\
    lua_setfield(L, -2, "RENDERER");\
    lua_pushnumber(L, GL_RENDER_MODE);\
    lua_setfield(L, -2, "RENDER_MODE");\
    lua_pushnumber(L, GL_REPEAT);\
    lua_setfield(L, -2, "REPEAT");\
    lua_pushnumber(L, GL_REPLACE);\
    lua_setfield(L, -2, "REPLACE");\
    lua_pushnumber(L, GL_RETURN);\
    lua_setfield(L, -2, "RETURN");\
    lua_pushnumber(L, GL_RGB);\
    lua_setfield(L, -2, "RGB");\
    lua_pushnumber(L, GL_RGB10);\
    lua_setfield(L, -2, "RGB10");\
    lua_pushnumber(L, GL_RGB10_A2);\
    lua_setfield(L, -2, "RGB10_A2");\
    lua_pushnumber(L, GL_RGB12);\
    lua_setfield(L, -2, "RGB12");\
    lua_pushnumber(L, GL_RGB16);\
    lua_setfield(L, -2, "RGB16");\
    lua_pushnumber(L, GL_RGB4);\
    lua_setfield(L, -2, "RGB4");\
    lua_pushnumber(L, GL_RGB5);\
    lua_setfield(L, -2, "RGB5");\
    lua_pushnumber(L, GL_RGB5_A1);\
    lua_setfield(L, -2, "RGB5_A1");\
    lua_pushnumber(L, GL_RGB8);\
    lua_setfield(L, -2, "RGB8");\
    lua_pushnumber(L, GL_RGBA);\
    lua_setfield(L, -2, "RGBA");\
    lua_pushnumber(L, GL_RGBA12);\
    lua_setfield(L, -2, "RGBA12");\
    lua_pushnumber(L, GL_RGBA16);\
    lua_setfield(L, -2, "RGBA16");\
    lua_pushnumber(L, GL_RGBA2);\
    lua_setfield(L, -2, "RGBA2");\
    lua_pushnumber(L, GL_RGBA4);\
    lua_setfield(L, -2, "RGBA4");\
    lua_pushnumber(L, GL_RGBA8);\
    lua_setfield(L, -2, "RGBA8");\
    lua_pushnumber(L, GL_RGBA_MODE);\
    lua_setfield(L, -2, "RGBA_MODE");\
    lua_pushnumber(L, GL_RIGHT);\
    lua_setfield(L, -2, "RIGHT");\
    lua_pushnumber(L, GL_S);\
    lua_setfield(L, -2, "S");\
    lua_pushnumber(L, GL_SCISSOR_BIT);\
    lua_setfield(L, -2, "SCISSOR_BIT");\
    lua_pushnumber(L, GL_SCISSOR_BOX);\
    lua_setfield(L, -2, "SCISSOR_BOX");\
    lua_pushnumber(L, GL_SCISSOR_TEST);\
    lua_setfield(L, -2, "SCISSOR_TEST");\
    lua_pushnumber(L, GL_SELECT);\
    lua_setfield(L, -2, "SELECT");\
    lua_pushnumber(L, GL_SELECTION_BUFFER_POINTER);\
    lua_setfield(L, -2, "SELECTION_BUFFER_POINTER");\
    lua_pushnumber(L, GL_SELECTION_BUFFER_SIZE);\
    lua_setfield(L, -2, "SELECTION_BUFFER_SIZE");\
    lua_pushnumber(L, GL_SET);\
    lua_setfield(L, -2, "SET");\
    lua_pushnumber(L, GL_SHADE_MODEL);\
    lua_setfield(L, -2, "SHADE_MODEL");\
    lua_pushnumber(L, GL_SHININESS);\
    lua_setfield(L, -2, "SHININESS");\
    lua_pushnumber(L, GL_SHORT);\
    lua_setfield(L, -2, "SHORT");\
    lua_pushnumber(L, GL_SMOOTH);\
    lua_setfield(L, -2, "SMOOTH");\
    lua_pushnumber(L, GL_SPECULAR);\
    lua_setfield(L, -2, "SPECULAR");\
    lua_pushnumber(L, GL_SPHERE_MAP);\
    lua_setfield(L, -2, "SPHERE_MAP");\
    lua_pushnumber(L, GL_SPOT_CUTOFF);\
    lua_setfield(L, -2, "SPOT_CUTOFF");\
    lua_pushnumber(L, GL_SPOT_DIRECTION);\
    lua_setfield(L, -2, "SPOT_DIRECTION");\
    lua_pushnumber(L, GL_SPOT_EXPONENT);\
    lua_setfield(L, -2, "SPOT_EXPONENT");\
    lua_pushnumber(L, GL_SRC_ALPHA);\
    lua_setfield(L, -2, "SRC_ALPHA");\
    lua_pushnumber(L, GL_SRC_ALPHA_SATURATE);\
    lua_setfield(L, -2, "SRC_ALPHA_SATURATE");\
    lua_pushnumber(L, GL_SRC_COLOR);\
    lua_setfield(L, -2, "SRC_COLOR");\
    lua_pushnumber(L, GL_STACK_OVERFLOW);\
    lua_setfield(L, -2, "STACK_OVERFLOW");\
    lua_pushnumber(L, GL_STACK_UNDERFLOW);\
    lua_setfield(L, -2, "STACK_UNDERFLOW");\
    lua_pushnumber(L, GL_STENCIL);\
    lua_setfield(L, -2, "STENCIL");\
    lua_pushnumber(L, GL_STENCIL_BITS);\
    lua_setfield(L, -2, "STENCIL_BITS");\
    lua_pushnumber(L, GL_STENCIL_BUFFER_BIT);\
    lua_setfield(L, -2, "STENCIL_BUFFER_BIT");\
    lua_pushnumber(L, GL_STENCIL_CLEAR_VALUE);\
    lua_setfield(L, -2, "STENCIL_CLEAR_VALUE");\
    lua_pushnumber(L, GL_STENCIL_FAIL);\
    lua_setfield(L, -2, "STENCIL_FAIL");\
    lua_pushnumber(L, GL_STENCIL_FUNC);\
    lua_setfield(L, -2, "STENCIL_FUNC");\
    lua_pushnumber(L, GL_STENCIL_INDEX);\
    lua_setfield(L, -2, "STENCIL_INDEX");\
    lua_pushnumber(L, GL_STENCIL_PASS_DEPTH_FAIL);\
    lua_setfield(L, -2, "STENCIL_PASS_DEPTH_FAIL");\
    lua_pushnumber(L, GL_STENCIL_PASS_DEPTH_PASS);\
    lua_setfield(L, -2, "STENCIL_PASS_DEPTH_PASS");\
    lua_pushnumber(L, GL_STENCIL_REF);\
    lua_setfield(L, -2, "STENCIL_REF");\
    lua_pushnumber(L, GL_STENCIL_TEST);\
    lua_setfield(L, -2, "STENCIL_TEST");\
    lua_pushnumber(L, GL_STENCIL_VALUE_MASK);\
    lua_setfield(L, -2, "STENCIL_VALUE_MASK");\
    lua_pushnumber(L, GL_STENCIL_WRITEMASK);\
    lua_setfield(L, -2, "STENCIL_WRITEMASK");\
    lua_pushnumber(L, GL_STEREO);\
    lua_setfield(L, -2, "STEREO");\
    lua_pushnumber(L, GL_SUBPIXEL_BITS);\
    lua_setfield(L, -2, "SUBPIXEL_BITS");\
    lua_pushnumber(L, GL_T);\
    lua_setfield(L, -2, "T");\
    lua_pushnumber(L, GL_T2F_C3F_V3F);\
    lua_setfield(L, -2, "T2F_C3F_V3F");\
    lua_pushnumber(L, GL_T2F_C4F_N3F_V3F);\
    lua_setfield(L, -2, "T2F_C4F_N3F_V3F");\
    lua_pushnumber(L, GL_T2F_C4UB_V3F);\
    lua_setfield(L, -2, "T2F_C4UB_V3F");\
    lua_pushnumber(L, GL_T2F_N3F_V3F);\
    lua_setfield(L, -2, "T2F_N3F_V3F");\
    lua_pushnumber(L, GL_T2F_V3F);\
    lua_setfield(L, -2, "T2F_V3F");\
    lua_pushnumber(L, GL_T4F_C4F_N3F_V4F);\
    lua_setfield(L, -2, "T4F_C4F_N3F_V4F");\
    lua_pushnumber(L, GL_T4F_V4F);\
    lua_setfield(L, -2, "T4F_V4F");\
    lua_pushnumber(L, GL_TEXTURE);\
    lua_setfield(L, -2, "TEXTURE");\
    lua_pushnumber(L, GL_TEXTURE_1D);\
    lua_setfield(L, -2, "TEXTURE_1D");\
    lua_pushnumber(L, GL_TEXTURE_2D);\
    lua_setfield(L, -2, "TEXTURE_2D");\
    lua_pushnumber(L, GL_TEXTURE_ALPHA_SIZE);\
    lua_setfield(L, -2, "TEXTURE_ALPHA_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_1D);\
    lua_setfield(L, -2, "TEXTURE_BINDING_1D");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_2D);\
    lua_setfield(L, -2, "TEXTURE_BINDING_2D");\
    lua_pushnumber(L, GL_TEXTURE_BIT);\
    lua_setfield(L, -2, "TEXTURE_BIT");\
    lua_pushnumber(L, GL_TEXTURE_BLUE_SIZE);\
    lua_setfield(L, -2, "TEXTURE_BLUE_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_BORDER);\
    lua_setfield(L, -2, "TEXTURE_BORDER");\
    lua_pushnumber(L, GL_TEXTURE_BORDER_COLOR);\
    lua_setfield(L, -2, "TEXTURE_BORDER_COLOR");\
    lua_pushnumber(L, GL_TEXTURE_COMPONENTS);\
    lua_setfield(L, -2, "TEXTURE_COMPONENTS");\
    lua_pushnumber(L, GL_TEXTURE_COORD_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_COORD_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_COORD_ARRAY_POINTER);\
    lua_setfield(L, -2, "TEXTURE_COORD_ARRAY_POINTER");\
    lua_pushnumber(L, GL_TEXTURE_COORD_ARRAY_SIZE);\
    lua_setfield(L, -2, "TEXTURE_COORD_ARRAY_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_COORD_ARRAY_STRIDE);\
    lua_setfield(L, -2, "TEXTURE_COORD_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_TEXTURE_COORD_ARRAY_TYPE);\
    lua_setfield(L, -2, "TEXTURE_COORD_ARRAY_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_ENV);\
    lua_setfield(L, -2, "TEXTURE_ENV");\
    lua_pushnumber(L, GL_TEXTURE_ENV_COLOR);\
    lua_setfield(L, -2, "TEXTURE_ENV_COLOR");\
    lua_pushnumber(L, GL_TEXTURE_ENV_MODE);\
    lua_setfield(L, -2, "TEXTURE_ENV_MODE");\
    lua_pushnumber(L, GL_TEXTURE_GEN_MODE);\
    lua_setfield(L, -2, "TEXTURE_GEN_MODE");\
    lua_pushnumber(L, GL_TEXTURE_GEN_Q);\
    lua_setfield(L, -2, "TEXTURE_GEN_Q");\
    lua_pushnumber(L, GL_TEXTURE_GEN_R);\
    lua_setfield(L, -2, "TEXTURE_GEN_R");\
    lua_pushnumber(L, GL_TEXTURE_GEN_S);\
    lua_setfield(L, -2, "TEXTURE_GEN_S");\
    lua_pushnumber(L, GL_TEXTURE_GEN_T);\
    lua_setfield(L, -2, "TEXTURE_GEN_T");\
    lua_pushnumber(L, GL_TEXTURE_GREEN_SIZE);\
    lua_setfield(L, -2, "TEXTURE_GREEN_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_HEIGHT);\
    lua_setfield(L, -2, "TEXTURE_HEIGHT");\
    lua_pushnumber(L, GL_TEXTURE_INTENSITY_SIZE);\
    lua_setfield(L, -2, "TEXTURE_INTENSITY_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_INTERNAL_FORMAT);\
    lua_setfield(L, -2, "TEXTURE_INTERNAL_FORMAT");\
    lua_pushnumber(L, GL_TEXTURE_LUMINANCE_SIZE);\
    lua_setfield(L, -2, "TEXTURE_LUMINANCE_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_MAG_FILTER);\
    lua_setfield(L, -2, "TEXTURE_MAG_FILTER");\
    lua_pushnumber(L, GL_TEXTURE_MATRIX);\
    lua_setfield(L, -2, "TEXTURE_MATRIX");\
    lua_pushnumber(L, GL_TEXTURE_MIN_FILTER);\
    lua_setfield(L, -2, "TEXTURE_MIN_FILTER");\
    lua_pushnumber(L, GL_TEXTURE_PRIORITY);\
    lua_setfield(L, -2, "TEXTURE_PRIORITY");\
    lua_pushnumber(L, GL_TEXTURE_RED_SIZE);\
    lua_setfield(L, -2, "TEXTURE_RED_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_RESIDENT);\
    lua_setfield(L, -2, "TEXTURE_RESIDENT");\
    lua_pushnumber(L, GL_TEXTURE_STACK_DEPTH);\
    lua_setfield(L, -2, "TEXTURE_STACK_DEPTH");\
    lua_pushnumber(L, GL_TEXTURE_WIDTH);\
    lua_setfield(L, -2, "TEXTURE_WIDTH");\
    lua_pushnumber(L, GL_TEXTURE_WRAP_S);\
    lua_setfield(L, -2, "TEXTURE_WRAP_S");\
    lua_pushnumber(L, GL_TEXTURE_WRAP_T);\
    lua_setfield(L, -2, "TEXTURE_WRAP_T");\
    lua_pushnumber(L, GL_TRANSFORM_BIT);\
    lua_setfield(L, -2, "TRANSFORM_BIT");\
    lua_pushnumber(L, GL_TRIANGLES);\
    lua_setfield(L, -2, "TRIANGLES");\
    lua_pushnumber(L, GL_TRIANGLE_FAN);\
    lua_setfield(L, -2, "TRIANGLE_FAN");\
    lua_pushnumber(L, GL_TRIANGLE_STRIP);\
    lua_setfield(L, -2, "TRIANGLE_STRIP");\
    lua_pushnumber(L, GL_TRUE);\
    lua_setfield(L, -2, "TRUE");\
    lua_pushnumber(L, GL_UNPACK_ALIGNMENT);\
    lua_setfield(L, -2, "UNPACK_ALIGNMENT");\
    lua_pushnumber(L, GL_UNPACK_LSB_FIRST);\
    lua_setfield(L, -2, "UNPACK_LSB_FIRST");\
    lua_pushnumber(L, GL_UNPACK_ROW_LENGTH);\
    lua_setfield(L, -2, "UNPACK_ROW_LENGTH");\
    lua_pushnumber(L, GL_UNPACK_SKIP_PIXELS);\
    lua_setfield(L, -2, "UNPACK_SKIP_PIXELS");\
    lua_pushnumber(L, GL_UNPACK_SKIP_ROWS);\
    lua_setfield(L, -2, "UNPACK_SKIP_ROWS");\
    lua_pushnumber(L, GL_UNPACK_SWAP_BYTES);\
    lua_setfield(L, -2, "UNPACK_SWAP_BYTES");\
    lua_pushnumber(L, GL_UNSIGNED_BYTE);\
    lua_setfield(L, -2, "UNSIGNED_BYTE");\
    lua_pushnumber(L, GL_UNSIGNED_INT);\
    lua_setfield(L, -2, "UNSIGNED_INT");\
    lua_pushnumber(L, GL_UNSIGNED_SHORT);\
    lua_setfield(L, -2, "UNSIGNED_SHORT");\
    lua_pushnumber(L, GL_V2F);\
    lua_setfield(L, -2, "V2F");\
    lua_pushnumber(L, GL_V3F);\
    lua_setfield(L, -2, "V3F");\
    lua_pushnumber(L, GL_VENDOR);\
    lua_setfield(L, -2, "VENDOR");\
    lua_pushnumber(L, GL_VERSION);\
    lua_setfield(L, -2, "VERSION");\
    lua_pushnumber(L, GL_VERTEX_ARRAY);\
    lua_setfield(L, -2, "VERTEX_ARRAY");\
    lua_pushnumber(L, GL_VERTEX_ARRAY_POINTER);\
    lua_setfield(L, -2, "VERTEX_ARRAY_POINTER");\
    lua_pushnumber(L, GL_VERTEX_ARRAY_SIZE);\
    lua_setfield(L, -2, "VERTEX_ARRAY_SIZE");\
    lua_pushnumber(L, GL_VERTEX_ARRAY_STRIDE);\
    lua_setfield(L, -2, "VERTEX_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_VERTEX_ARRAY_TYPE);\
    lua_setfield(L, -2, "VERTEX_ARRAY_TYPE");\
    lua_pushnumber(L, GL_VIEWPORT);\
    lua_setfield(L, -2, "VIEWPORT");\
    lua_pushnumber(L, GL_VIEWPORT_BIT);\
    lua_setfield(L, -2, "VIEWPORT_BIT");\
    lua_pushnumber(L, GL_XOR);\
    lua_setfield(L, -2, "XOR");\
    lua_pushnumber(L, GL_ZERO);\
    lua_setfield(L, -2, "ZERO");\
    lua_pushnumber(L, GL_ZOOM_X);\
    lua_setfield(L, -2, "ZOOM_X");\
    lua_pushnumber(L, GL_ZOOM_Y);\
    lua_setfield(L, -2, "ZOOM_Y");\
    lua_pushnumber(L, GL_ALIASED_LINE_WIDTH_RANGE);\
    lua_setfield(L, -2, "ALIASED_LINE_WIDTH_RANGE");\
    lua_pushnumber(L, GL_ALIASED_POINT_SIZE_RANGE);\
    lua_setfield(L, -2, "ALIASED_POINT_SIZE_RANGE");\
    lua_pushnumber(L, GL_BGR);\
    lua_setfield(L, -2, "BGR");\
    lua_pushnumber(L, GL_BGRA);\
    lua_setfield(L, -2, "BGRA");\
    lua_pushnumber(L, GL_CLAMP_TO_EDGE);\
    lua_setfield(L, -2, "CLAMP_TO_EDGE");\
    lua_pushnumber(L, GL_LIGHT_MODEL_COLOR_CONTROL);\
    lua_setfield(L, -2, "LIGHT_MODEL_COLOR_CONTROL");\
    lua_pushnumber(L, GL_MAX_3D_TEXTURE_SIZE);\
    lua_setfield(L, -2, "MAX_3D_TEXTURE_SIZE");\
    lua_pushnumber(L, GL_MAX_ELEMENTS_INDICES);\
    lua_setfield(L, -2, "MAX_ELEMENTS_INDICES");\
    lua_pushnumber(L, GL_MAX_ELEMENTS_VERTICES);\
    lua_setfield(L, -2, "MAX_ELEMENTS_VERTICES");\
    lua_pushnumber(L, GL_PACK_IMAGE_HEIGHT);\
    lua_setfield(L, -2, "PACK_IMAGE_HEIGHT");\
    lua_pushnumber(L, GL_PACK_SKIP_IMAGES);\
    lua_setfield(L, -2, "PACK_SKIP_IMAGES");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_3D);\
    lua_setfield(L, -2, "PROXY_TEXTURE_3D");\
    lua_pushnumber(L, GL_RESCALE_NORMAL);\
    lua_setfield(L, -2, "RESCALE_NORMAL");\
    lua_pushnumber(L, GL_SEPARATE_SPECULAR_COLOR);\
    lua_setfield(L, -2, "SEPARATE_SPECULAR_COLOR");\
    lua_pushnumber(L, GL_SINGLE_COLOR);\
    lua_setfield(L, -2, "SINGLE_COLOR");\
    lua_pushnumber(L, GL_SMOOTH_LINE_WIDTH_GRANULARITY);\
    lua_setfield(L, -2, "SMOOTH_LINE_WIDTH_GRANULARITY");\
    lua_pushnumber(L, GL_SMOOTH_LINE_WIDTH_RANGE);\
    lua_setfield(L, -2, "SMOOTH_LINE_WIDTH_RANGE");\
    lua_pushnumber(L, GL_SMOOTH_POINT_SIZE_GRANULARITY);\
    lua_setfield(L, -2, "SMOOTH_POINT_SIZE_GRANULARITY");\
    lua_pushnumber(L, GL_SMOOTH_POINT_SIZE_RANGE);\
    lua_setfield(L, -2, "SMOOTH_POINT_SIZE_RANGE");\
    lua_pushnumber(L, GL_TEXTURE_3D);\
    lua_setfield(L, -2, "TEXTURE_3D");\
    lua_pushnumber(L, GL_TEXTURE_BASE_LEVEL);\
    lua_setfield(L, -2, "TEXTURE_BASE_LEVEL");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_3D);\
    lua_setfield(L, -2, "TEXTURE_BINDING_3D");\
    lua_pushnumber(L, GL_TEXTURE_DEPTH);\
    lua_setfield(L, -2, "TEXTURE_DEPTH");\
    lua_pushnumber(L, GL_TEXTURE_MAX_LEVEL);\
    lua_setfield(L, -2, "TEXTURE_MAX_LEVEL");\
    lua_pushnumber(L, GL_TEXTURE_MAX_LOD);\
    lua_setfield(L, -2, "TEXTURE_MAX_LOD");\
    lua_pushnumber(L, GL_TEXTURE_MIN_LOD);\
    lua_setfield(L, -2, "TEXTURE_MIN_LOD");\
    lua_pushnumber(L, GL_TEXTURE_WRAP_R);\
    lua_setfield(L, -2, "TEXTURE_WRAP_R");\
    lua_pushnumber(L, GL_UNPACK_IMAGE_HEIGHT);\
    lua_setfield(L, -2, "UNPACK_IMAGE_HEIGHT");\
    lua_pushnumber(L, GL_UNPACK_SKIP_IMAGES);\
    lua_setfield(L, -2, "UNPACK_SKIP_IMAGES");\
    lua_pushnumber(L, GL_UNSIGNED_BYTE_2_3_3_REV);\
    lua_setfield(L, -2, "UNSIGNED_BYTE_2_3_3_REV");\
    lua_pushnumber(L, GL_UNSIGNED_BYTE_3_3_2);\
    lua_setfield(L, -2, "UNSIGNED_BYTE_3_3_2");\
    lua_pushnumber(L, GL_UNSIGNED_INT_10_10_10_2);\
    lua_setfield(L, -2, "UNSIGNED_INT_10_10_10_2");\
    lua_pushnumber(L, GL_UNSIGNED_INT_2_10_10_10_REV);\
    lua_setfield(L, -2, "UNSIGNED_INT_2_10_10_10_REV");\
    lua_pushnumber(L, GL_UNSIGNED_INT_8_8_8_8);\
    lua_setfield(L, -2, "UNSIGNED_INT_8_8_8_8");\
    lua_pushnumber(L, GL_UNSIGNED_INT_8_8_8_8_REV);\
    lua_setfield(L, -2, "UNSIGNED_INT_8_8_8_8_REV");\
    lua_pushnumber(L, GL_UNSIGNED_SHORT_1_5_5_5_REV);\
    lua_setfield(L, -2, "UNSIGNED_SHORT_1_5_5_5_REV");\
    lua_pushnumber(L, GL_UNSIGNED_SHORT_4_4_4_4);\
    lua_setfield(L, -2, "UNSIGNED_SHORT_4_4_4_4");\
    lua_pushnumber(L, GL_UNSIGNED_SHORT_4_4_4_4_REV);\
    lua_setfield(L, -2, "UNSIGNED_SHORT_4_4_4_4_REV");\
    lua_pushnumber(L, GL_UNSIGNED_SHORT_5_5_5_1);\
    lua_setfield(L, -2, "UNSIGNED_SHORT_5_5_5_1");\
    lua_pushnumber(L, GL_UNSIGNED_SHORT_5_6_5);\
    lua_setfield(L, -2, "UNSIGNED_SHORT_5_6_5");\
    lua_pushnumber(L, GL_UNSIGNED_SHORT_5_6_5_REV);\
    lua_setfield(L, -2, "UNSIGNED_SHORT_5_6_5_REV");\
    lua_pushnumber(L, GL_ACTIVE_TEXTURE);\
    lua_setfield(L, -2, "ACTIVE_TEXTURE");\
    lua_pushnumber(L, GL_ADD_SIGNED);\
    lua_setfield(L, -2, "ADD_SIGNED");\
    lua_pushnumber(L, GL_CLAMP_TO_BORDER);\
    lua_setfield(L, -2, "CLAMP_TO_BORDER");\
    lua_pushnumber(L, GL_CLIENT_ACTIVE_TEXTURE);\
    lua_setfield(L, -2, "CLIENT_ACTIVE_TEXTURE");\
    lua_pushnumber(L, GL_COMBINE);\
    lua_setfield(L, -2, "COMBINE");\
    lua_pushnumber(L, GL_COMBINE_ALPHA);\
    lua_setfield(L, -2, "COMBINE_ALPHA");\
    lua_pushnumber(L, GL_COMBINE_RGB);\
    lua_setfield(L, -2, "COMBINE_RGB");\
    lua_pushnumber(L, GL_COMPRESSED_ALPHA);\
    lua_setfield(L, -2, "COMPRESSED_ALPHA");\
    lua_pushnumber(L, GL_COMPRESSED_INTENSITY);\
    lua_setfield(L, -2, "COMPRESSED_INTENSITY");\
    lua_pushnumber(L, GL_COMPRESSED_LUMINANCE);\
    lua_setfield(L, -2, "COMPRESSED_LUMINANCE");\
    lua_pushnumber(L, GL_COMPRESSED_LUMINANCE_ALPHA);\
    lua_setfield(L, -2, "COMPRESSED_LUMINANCE_ALPHA");\
    lua_pushnumber(L, GL_COMPRESSED_RGB);\
    lua_setfield(L, -2, "COMPRESSED_RGB");\
    lua_pushnumber(L, GL_COMPRESSED_RGBA);\
    lua_setfield(L, -2, "COMPRESSED_RGBA");\
    lua_pushnumber(L, GL_COMPRESSED_TEXTURE_FORMATS);\
    lua_setfield(L, -2, "COMPRESSED_TEXTURE_FORMATS");\
    lua_pushnumber(L, GL_CONSTANT);\
    lua_setfield(L, -2, "CONSTANT");\
    lua_pushnumber(L, GL_DOT3_RGB);\
    lua_setfield(L, -2, "DOT3_RGB");\
    lua_pushnumber(L, GL_DOT3_RGBA);\
    lua_setfield(L, -2, "DOT3_RGBA");\
    lua_pushnumber(L, GL_INTERPOLATE);\
    lua_setfield(L, -2, "INTERPOLATE");\
    lua_pushnumber(L, GL_MAX_CUBE_MAP_TEXTURE_SIZE);\
    lua_setfield(L, -2, "MAX_CUBE_MAP_TEXTURE_SIZE");\
    lua_pushnumber(L, GL_MAX_TEXTURE_UNITS);\
    lua_setfield(L, -2, "MAX_TEXTURE_UNITS");\
    lua_pushnumber(L, GL_MULTISAMPLE);\
    lua_setfield(L, -2, "MULTISAMPLE");\
    lua_pushnumber(L, GL_MULTISAMPLE_BIT);\
    lua_setfield(L, -2, "MULTISAMPLE_BIT");\
    lua_pushnumber(L, GL_NORMAL_MAP);\
    lua_setfield(L, -2, "NORMAL_MAP");\
    lua_pushnumber(L, GL_NUM_COMPRESSED_TEXTURE_FORMATS);\
    lua_setfield(L, -2, "NUM_COMPRESSED_TEXTURE_FORMATS");\
    lua_pushnumber(L, GL_OPERAND0_ALPHA);\
    lua_setfield(L, -2, "OPERAND0_ALPHA");\
    lua_pushnumber(L, GL_OPERAND0_RGB);\
    lua_setfield(L, -2, "OPERAND0_RGB");\
    lua_pushnumber(L, GL_OPERAND1_ALPHA);\
    lua_setfield(L, -2, "OPERAND1_ALPHA");\
    lua_pushnumber(L, GL_OPERAND1_RGB);\
    lua_setfield(L, -2, "OPERAND1_RGB");\
    lua_pushnumber(L, GL_OPERAND2_ALPHA);\
    lua_setfield(L, -2, "OPERAND2_ALPHA");\
    lua_pushnumber(L, GL_OPERAND2_RGB);\
    lua_setfield(L, -2, "OPERAND2_RGB");\
    lua_pushnumber(L, GL_PREVIOUS);\
    lua_setfield(L, -2, "PREVIOUS");\
    lua_pushnumber(L, GL_PRIMARY_COLOR);\
    lua_setfield(L, -2, "PRIMARY_COLOR");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_CUBE_MAP);\
    lua_setfield(L, -2, "PROXY_TEXTURE_CUBE_MAP");\
    lua_pushnumber(L, GL_REFLECTION_MAP);\
    lua_setfield(L, -2, "REFLECTION_MAP");\
    lua_pushnumber(L, GL_RGB_SCALE);\
    lua_setfield(L, -2, "RGB_SCALE");\
    lua_pushnumber(L, GL_SAMPLES);\
    lua_setfield(L, -2, "SAMPLES");\
    lua_pushnumber(L, GL_SAMPLE_ALPHA_TO_COVERAGE);\
    lua_setfield(L, -2, "SAMPLE_ALPHA_TO_COVERAGE");\
    lua_pushnumber(L, GL_SAMPLE_ALPHA_TO_ONE);\
    lua_setfield(L, -2, "SAMPLE_ALPHA_TO_ONE");\
    lua_pushnumber(L, GL_SAMPLE_BUFFERS);\
    lua_setfield(L, -2, "SAMPLE_BUFFERS");\
    lua_pushnumber(L, GL_SAMPLE_COVERAGE);\
    lua_setfield(L, -2, "SAMPLE_COVERAGE");\
    lua_pushnumber(L, GL_SAMPLE_COVERAGE_INVERT);\
    lua_setfield(L, -2, "SAMPLE_COVERAGE_INVERT");\
    lua_pushnumber(L, GL_SAMPLE_COVERAGE_VALUE);\
    lua_setfield(L, -2, "SAMPLE_COVERAGE_VALUE");\
    lua_pushnumber(L, GL_SOURCE0_ALPHA);\
    lua_setfield(L, -2, "SOURCE0_ALPHA");\
    lua_pushnumber(L, GL_SOURCE0_RGB);\
    lua_setfield(L, -2, "SOURCE0_RGB");\
    lua_pushnumber(L, GL_SOURCE1_ALPHA);\
    lua_setfield(L, -2, "SOURCE1_ALPHA");\
    lua_pushnumber(L, GL_SOURCE1_RGB);\
    lua_setfield(L, -2, "SOURCE1_RGB");\
    lua_pushnumber(L, GL_SOURCE2_ALPHA);\
    lua_setfield(L, -2, "SOURCE2_ALPHA");\
    lua_pushnumber(L, GL_SOURCE2_RGB);\
    lua_setfield(L, -2, "SOURCE2_RGB");\
    lua_pushnumber(L, GL_SUBTRACT);\
    lua_setfield(L, -2, "SUBTRACT");\
    lua_pushnumber(L, GL_TEXTURE0);\
    lua_setfield(L, -2, "TEXTURE0");\
    lua_pushnumber(L, GL_TEXTURE1);\
    lua_setfield(L, -2, "TEXTURE1");\
    lua_pushnumber(L, GL_TEXTURE10);\
    lua_setfield(L, -2, "TEXTURE10");\
    lua_pushnumber(L, GL_TEXTURE11);\
    lua_setfield(L, -2, "TEXTURE11");\
    lua_pushnumber(L, GL_TEXTURE12);\
    lua_setfield(L, -2, "TEXTURE12");\
    lua_pushnumber(L, GL_TEXTURE13);\
    lua_setfield(L, -2, "TEXTURE13");\
    lua_pushnumber(L, GL_TEXTURE14);\
    lua_setfield(L, -2, "TEXTURE14");\
    lua_pushnumber(L, GL_TEXTURE15);\
    lua_setfield(L, -2, "TEXTURE15");\
    lua_pushnumber(L, GL_TEXTURE16);\
    lua_setfield(L, -2, "TEXTURE16");\
    lua_pushnumber(L, GL_TEXTURE17);\
    lua_setfield(L, -2, "TEXTURE17");\
    lua_pushnumber(L, GL_TEXTURE18);\
    lua_setfield(L, -2, "TEXTURE18");\
    lua_pushnumber(L, GL_TEXTURE19);\
    lua_setfield(L, -2, "TEXTURE19");\
    lua_pushnumber(L, GL_TEXTURE2);\
    lua_setfield(L, -2, "TEXTURE2");\
    lua_pushnumber(L, GL_TEXTURE20);\
    lua_setfield(L, -2, "TEXTURE20");\
    lua_pushnumber(L, GL_TEXTURE21);\
    lua_setfield(L, -2, "TEXTURE21");\
    lua_pushnumber(L, GL_TEXTURE22);\
    lua_setfield(L, -2, "TEXTURE22");\
    lua_pushnumber(L, GL_TEXTURE23);\
    lua_setfield(L, -2, "TEXTURE23");\
    lua_pushnumber(L, GL_TEXTURE24);\
    lua_setfield(L, -2, "TEXTURE24");\
    lua_pushnumber(L, GL_TEXTURE25);\
    lua_setfield(L, -2, "TEXTURE25");\
    lua_pushnumber(L, GL_TEXTURE26);\
    lua_setfield(L, -2, "TEXTURE26");\
    lua_pushnumber(L, GL_TEXTURE27);\
    lua_setfield(L, -2, "TEXTURE27");\
    lua_pushnumber(L, GL_TEXTURE28);\
    lua_setfield(L, -2, "TEXTURE28");\
    lua_pushnumber(L, GL_TEXTURE29);\
    lua_setfield(L, -2, "TEXTURE29");\
    lua_pushnumber(L, GL_TEXTURE3);\
    lua_setfield(L, -2, "TEXTURE3");\
    lua_pushnumber(L, GL_TEXTURE30);\
    lua_setfield(L, -2, "TEXTURE30");\
    lua_pushnumber(L, GL_TEXTURE31);\
    lua_setfield(L, -2, "TEXTURE31");\
    lua_pushnumber(L, GL_TEXTURE4);\
    lua_setfield(L, -2, "TEXTURE4");\
    lua_pushnumber(L, GL_TEXTURE5);\
    lua_setfield(L, -2, "TEXTURE5");\
    lua_pushnumber(L, GL_TEXTURE6);\
    lua_setfield(L, -2, "TEXTURE6");\
    lua_pushnumber(L, GL_TEXTURE7);\
    lua_setfield(L, -2, "TEXTURE7");\
    lua_pushnumber(L, GL_TEXTURE8);\
    lua_setfield(L, -2, "TEXTURE8");\
    lua_pushnumber(L, GL_TEXTURE9);\
    lua_setfield(L, -2, "TEXTURE9");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_CUBE_MAP);\
    lua_setfield(L, -2, "TEXTURE_BINDING_CUBE_MAP");\
    lua_pushnumber(L, GL_TEXTURE_COMPRESSED);\
    lua_setfield(L, -2, "TEXTURE_COMPRESSED");\
    lua_pushnumber(L, GL_TEXTURE_COMPRESSED_IMAGE_SIZE);\
    lua_setfield(L, -2, "TEXTURE_COMPRESSED_IMAGE_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_COMPRESSION_HINT);\
    lua_setfield(L, -2, "TEXTURE_COMPRESSION_HINT");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_NEGATIVE_X);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_NEGATIVE_X");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_NEGATIVE_Y");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_NEGATIVE_Z");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_POSITIVE_X);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_POSITIVE_X");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_POSITIVE_Y);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_POSITIVE_Y");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_POSITIVE_Z);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_POSITIVE_Z");\
    lua_pushnumber(L, GL_TRANSPOSE_COLOR_MATRIX);\
    lua_setfield(L, -2, "TRANSPOSE_COLOR_MATRIX");\
    lua_pushnumber(L, GL_TRANSPOSE_MODELVIEW_MATRIX);\
    lua_setfield(L, -2, "TRANSPOSE_MODELVIEW_MATRIX");\
    lua_pushnumber(L, GL_TRANSPOSE_PROJECTION_MATRIX);\
    lua_setfield(L, -2, "TRANSPOSE_PROJECTION_MATRIX");\
    lua_pushnumber(L, GL_TRANSPOSE_TEXTURE_MATRIX);\
    lua_setfield(L, -2, "TRANSPOSE_TEXTURE_MATRIX");\
    lua_pushnumber(L, GL_BLEND_COLOR);\
    lua_setfield(L, -2, "BLEND_COLOR");\
    lua_pushnumber(L, GL_BLEND_DST_ALPHA);\
    lua_setfield(L, -2, "BLEND_DST_ALPHA");\
    lua_pushnumber(L, GL_BLEND_DST_RGB);\
    lua_setfield(L, -2, "BLEND_DST_RGB");\
    lua_pushnumber(L, GL_BLEND_SRC_ALPHA);\
    lua_setfield(L, -2, "BLEND_SRC_ALPHA");\
    lua_pushnumber(L, GL_BLEND_SRC_RGB);\
    lua_setfield(L, -2, "BLEND_SRC_RGB");\
    lua_pushnumber(L, GL_COLOR_SUM);\
    lua_setfield(L, -2, "COLOR_SUM");\
    lua_pushnumber(L, GL_COMPARE_R_TO_TEXTURE);\
    lua_setfield(L, -2, "COMPARE_R_TO_TEXTURE");\
    lua_pushnumber(L, GL_CONSTANT_ALPHA);\
    lua_setfield(L, -2, "CONSTANT_ALPHA");\
    lua_pushnumber(L, GL_CONSTANT_COLOR);\
    lua_setfield(L, -2, "CONSTANT_COLOR");\
    lua_pushnumber(L, GL_CURRENT_FOG_COORDINATE);\
    lua_setfield(L, -2, "CURRENT_FOG_COORDINATE");\
    lua_pushnumber(L, GL_CURRENT_SECONDARY_COLOR);\
    lua_setfield(L, -2, "CURRENT_SECONDARY_COLOR");\
    lua_pushnumber(L, GL_DECR_WRAP);\
    lua_setfield(L, -2, "DECR_WRAP");\
    lua_pushnumber(L, GL_DEPTH_COMPONENT16);\
    lua_setfield(L, -2, "DEPTH_COMPONENT16");\
    lua_pushnumber(L, GL_DEPTH_COMPONENT24);\
    lua_setfield(L, -2, "DEPTH_COMPONENT24");\
    lua_pushnumber(L, GL_DEPTH_COMPONENT32);\
    lua_setfield(L, -2, "DEPTH_COMPONENT32");\
    lua_pushnumber(L, GL_DEPTH_TEXTURE_MODE);\
    lua_setfield(L, -2, "DEPTH_TEXTURE_MODE");\
    lua_pushnumber(L, GL_FOG_COORDINATE);\
    lua_setfield(L, -2, "FOG_COORDINATE");\
    lua_pushnumber(L, GL_FOG_COORDINATE_ARRAY);\
    lua_setfield(L, -2, "FOG_COORDINATE_ARRAY");\
    lua_pushnumber(L, GL_FOG_COORDINATE_ARRAY_POINTER);\
    lua_setfield(L, -2, "FOG_COORDINATE_ARRAY_POINTER");\
    lua_pushnumber(L, GL_FOG_COORDINATE_ARRAY_STRIDE);\
    lua_setfield(L, -2, "FOG_COORDINATE_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_FOG_COORDINATE_ARRAY_TYPE);\
    lua_setfield(L, -2, "FOG_COORDINATE_ARRAY_TYPE");\
    lua_pushnumber(L, GL_FOG_COORDINATE_SOURCE);\
    lua_setfield(L, -2, "FOG_COORDINATE_SOURCE");\
    lua_pushnumber(L, GL_FRAGMENT_DEPTH);\
    lua_setfield(L, -2, "FRAGMENT_DEPTH");\
    lua_pushnumber(L, GL_FUNC_ADD);\
    lua_setfield(L, -2, "FUNC_ADD");\
    lua_pushnumber(L, GL_FUNC_REVERSE_SUBTRACT);\
    lua_setfield(L, -2, "FUNC_REVERSE_SUBTRACT");\
    lua_pushnumber(L, GL_FUNC_SUBTRACT);\
    lua_setfield(L, -2, "FUNC_SUBTRACT");\
    lua_pushnumber(L, GL_GENERATE_MIPMAP);\
    lua_setfield(L, -2, "GENERATE_MIPMAP");\
    lua_pushnumber(L, GL_GENERATE_MIPMAP_HINT);\
    lua_setfield(L, -2, "GENERATE_MIPMAP_HINT");\
    lua_pushnumber(L, GL_INCR_WRAP);\
    lua_setfield(L, -2, "INCR_WRAP");\
    lua_pushnumber(L, GL_MAX);\
    lua_setfield(L, -2, "MAX");\
    lua_pushnumber(L, GL_MAX_TEXTURE_LOD_BIAS);\
    lua_setfield(L, -2, "MAX_TEXTURE_LOD_BIAS");\
    lua_pushnumber(L, GL_MIN);\
    lua_setfield(L, -2, "MIN");\
    lua_pushnumber(L, GL_MIRRORED_REPEAT);\
    lua_setfield(L, -2, "MIRRORED_REPEAT");\
    lua_pushnumber(L, GL_ONE_MINUS_CONSTANT_ALPHA);\
    lua_setfield(L, -2, "ONE_MINUS_CONSTANT_ALPHA");\
    lua_pushnumber(L, GL_ONE_MINUS_CONSTANT_COLOR);\
    lua_setfield(L, -2, "ONE_MINUS_CONSTANT_COLOR");\
    lua_pushnumber(L, GL_POINT_DISTANCE_ATTENUATION);\
    lua_setfield(L, -2, "POINT_DISTANCE_ATTENUATION");\
    lua_pushnumber(L, GL_POINT_FADE_THRESHOLD_SIZE);\
    lua_setfield(L, -2, "POINT_FADE_THRESHOLD_SIZE");\
    lua_pushnumber(L, GL_POINT_SIZE_MAX);\
    lua_setfield(L, -2, "POINT_SIZE_MAX");\
    lua_pushnumber(L, GL_POINT_SIZE_MIN);\
    lua_setfield(L, -2, "POINT_SIZE_MIN");\
    lua_pushnumber(L, GL_SECONDARY_COLOR_ARRAY);\
    lua_setfield(L, -2, "SECONDARY_COLOR_ARRAY");\
    lua_pushnumber(L, GL_SECONDARY_COLOR_ARRAY_POINTER);\
    lua_setfield(L, -2, "SECONDARY_COLOR_ARRAY_POINTER");\
    lua_pushnumber(L, GL_SECONDARY_COLOR_ARRAY_SIZE);\
    lua_setfield(L, -2, "SECONDARY_COLOR_ARRAY_SIZE");\
    lua_pushnumber(L, GL_SECONDARY_COLOR_ARRAY_STRIDE);\
    lua_setfield(L, -2, "SECONDARY_COLOR_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_SECONDARY_COLOR_ARRAY_TYPE);\
    lua_setfield(L, -2, "SECONDARY_COLOR_ARRAY_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_COMPARE_FUNC);\
    lua_setfield(L, -2, "TEXTURE_COMPARE_FUNC");\
    lua_pushnumber(L, GL_TEXTURE_COMPARE_MODE);\
    lua_setfield(L, -2, "TEXTURE_COMPARE_MODE");\
    lua_pushnumber(L, GL_TEXTURE_DEPTH_SIZE);\
    lua_setfield(L, -2, "TEXTURE_DEPTH_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_FILTER_CONTROL);\
    lua_setfield(L, -2, "TEXTURE_FILTER_CONTROL");\
    lua_pushnumber(L, GL_TEXTURE_LOD_BIAS);\
    lua_setfield(L, -2, "TEXTURE_LOD_BIAS");\
    lua_pushnumber(L, GL_ARRAY_BUFFER);\
    lua_setfield(L, -2, "ARRAY_BUFFER");\
    lua_pushnumber(L, GL_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_BUFFER_ACCESS);\
    lua_setfield(L, -2, "BUFFER_ACCESS");\
    lua_pushnumber(L, GL_BUFFER_MAPPED);\
    lua_setfield(L, -2, "BUFFER_MAPPED");\
    lua_pushnumber(L, GL_BUFFER_MAP_POINTER);\
    lua_setfield(L, -2, "BUFFER_MAP_POINTER");\
    lua_pushnumber(L, GL_BUFFER_SIZE);\
    lua_setfield(L, -2, "BUFFER_SIZE");\
    lua_pushnumber(L, GL_BUFFER_USAGE);\
    lua_setfield(L, -2, "BUFFER_USAGE");\
    lua_pushnumber(L, GL_COLOR_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "COLOR_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_CURRENT_FOG_COORD);\
    lua_setfield(L, -2, "CURRENT_FOG_COORD");\
    lua_pushnumber(L, GL_CURRENT_QUERY);\
    lua_setfield(L, -2, "CURRENT_QUERY");\
    lua_pushnumber(L, GL_DYNAMIC_COPY);\
    lua_setfield(L, -2, "DYNAMIC_COPY");\
    lua_pushnumber(L, GL_DYNAMIC_DRAW);\
    lua_setfield(L, -2, "DYNAMIC_DRAW");\
    lua_pushnumber(L, GL_DYNAMIC_READ);\
    lua_setfield(L, -2, "DYNAMIC_READ");\
    lua_pushnumber(L, GL_EDGE_FLAG_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "EDGE_FLAG_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_ELEMENT_ARRAY_BUFFER);\
    lua_setfield(L, -2, "ELEMENT_ARRAY_BUFFER");\
    lua_pushnumber(L, GL_ELEMENT_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "ELEMENT_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_FOG_COORD);\
    lua_setfield(L, -2, "FOG_COORD");\
    lua_pushnumber(L, GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "FOG_COORDINATE_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_FOG_COORD_ARRAY);\
    lua_setfield(L, -2, "FOG_COORD_ARRAY");\
    lua_pushnumber(L, GL_FOG_COORD_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "FOG_COORD_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_FOG_COORD_ARRAY_POINTER);\
    lua_setfield(L, -2, "FOG_COORD_ARRAY_POINTER");\
    lua_pushnumber(L, GL_FOG_COORD_ARRAY_STRIDE);\
    lua_setfield(L, -2, "FOG_COORD_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_FOG_COORD_ARRAY_TYPE);\
    lua_setfield(L, -2, "FOG_COORD_ARRAY_TYPE");\
    lua_pushnumber(L, GL_FOG_COORD_SRC);\
    lua_setfield(L, -2, "FOG_COORD_SRC");\
    lua_pushnumber(L, GL_INDEX_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "INDEX_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_NORMAL_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "NORMAL_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_QUERY_COUNTER_BITS);\
    lua_setfield(L, -2, "QUERY_COUNTER_BITS");\
    lua_pushnumber(L, GL_QUERY_RESULT);\
    lua_setfield(L, -2, "QUERY_RESULT");\
    lua_pushnumber(L, GL_QUERY_RESULT_AVAILABLE);\
    lua_setfield(L, -2, "QUERY_RESULT_AVAILABLE");\
    lua_pushnumber(L, GL_READ_ONLY);\
    lua_setfield(L, -2, "READ_ONLY");\
    lua_pushnumber(L, GL_READ_WRITE);\
    lua_setfield(L, -2, "READ_WRITE");\
    lua_pushnumber(L, GL_SAMPLES_PASSED);\
    lua_setfield(L, -2, "SAMPLES_PASSED");\
    lua_pushnumber(L, GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "SECONDARY_COLOR_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_SRC0_ALPHA);\
    lua_setfield(L, -2, "SRC0_ALPHA");\
    lua_pushnumber(L, GL_SRC0_RGB);\
    lua_setfield(L, -2, "SRC0_RGB");\
    lua_pushnumber(L, GL_SRC1_ALPHA);\
    lua_setfield(L, -2, "SRC1_ALPHA");\
    lua_pushnumber(L, GL_SRC1_RGB);\
    lua_setfield(L, -2, "SRC1_RGB");\
    lua_pushnumber(L, GL_SRC2_ALPHA);\
    lua_setfield(L, -2, "SRC2_ALPHA");\
    lua_pushnumber(L, GL_SRC2_RGB);\
    lua_setfield(L, -2, "SRC2_RGB");\
    lua_pushnumber(L, GL_STATIC_COPY);\
    lua_setfield(L, -2, "STATIC_COPY");\
    lua_pushnumber(L, GL_STATIC_DRAW);\
    lua_setfield(L, -2, "STATIC_DRAW");\
    lua_pushnumber(L, GL_STATIC_READ);\
    lua_setfield(L, -2, "STATIC_READ");\
    lua_pushnumber(L, GL_STREAM_COPY);\
    lua_setfield(L, -2, "STREAM_COPY");\
    lua_pushnumber(L, GL_STREAM_DRAW);\
    lua_setfield(L, -2, "STREAM_DRAW");\
    lua_pushnumber(L, GL_STREAM_READ);\
    lua_setfield(L, -2, "STREAM_READ");\
    lua_pushnumber(L, GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "TEXTURE_COORD_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_VERTEX_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "VERTEX_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_WEIGHT_ARRAY_BUFFER_BINDING);\
    lua_setfield(L, -2, "WEIGHT_ARRAY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_WRITE_ONLY);\
    lua_setfield(L, -2, "WRITE_ONLY");\
    lua_pushnumber(L, GL_ACTIVE_ATTRIBUTES);\
    lua_setfield(L, -2, "ACTIVE_ATTRIBUTES");\
    lua_pushnumber(L, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH);\
    lua_setfield(L, -2, "ACTIVE_ATTRIBUTE_MAX_LENGTH");\
    lua_pushnumber(L, GL_ACTIVE_UNIFORMS);\
    lua_setfield(L, -2, "ACTIVE_UNIFORMS");\
    lua_pushnumber(L, GL_ACTIVE_UNIFORM_MAX_LENGTH);\
    lua_setfield(L, -2, "ACTIVE_UNIFORM_MAX_LENGTH");\
    lua_pushnumber(L, GL_ATTACHED_SHADERS);\
    lua_setfield(L, -2, "ATTACHED_SHADERS");\
    lua_pushnumber(L, GL_BLEND_EQUATION_ALPHA);\
    lua_setfield(L, -2, "BLEND_EQUATION_ALPHA");\
    lua_pushnumber(L, GL_BLEND_EQUATION_RGB);\
    lua_setfield(L, -2, "BLEND_EQUATION_RGB");\
    lua_pushnumber(L, GL_BOOL);\
    lua_setfield(L, -2, "BOOL");\
    lua_pushnumber(L, GL_BOOL_VEC2);\
    lua_setfield(L, -2, "BOOL_VEC2");\
    lua_pushnumber(L, GL_BOOL_VEC3);\
    lua_setfield(L, -2, "BOOL_VEC3");\
    lua_pushnumber(L, GL_BOOL_VEC4);\
    lua_setfield(L, -2, "BOOL_VEC4");\
    lua_pushnumber(L, GL_COMPILE_STATUS);\
    lua_setfield(L, -2, "COMPILE_STATUS");\
    lua_pushnumber(L, GL_COORD_REPLACE);\
    lua_setfield(L, -2, "COORD_REPLACE");\
    lua_pushnumber(L, GL_CURRENT_PROGRAM);\
    lua_setfield(L, -2, "CURRENT_PROGRAM");\
    lua_pushnumber(L, GL_CURRENT_VERTEX_ATTRIB);\
    lua_setfield(L, -2, "CURRENT_VERTEX_ATTRIB");\
    lua_pushnumber(L, GL_DELETE_STATUS);\
    lua_setfield(L, -2, "DELETE_STATUS");\
    lua_pushnumber(L, GL_DRAW_BUFFER0);\
    lua_setfield(L, -2, "DRAW_BUFFER0");\
    lua_pushnumber(L, GL_DRAW_BUFFER1);\
    lua_setfield(L, -2, "DRAW_BUFFER1");\
    lua_pushnumber(L, GL_DRAW_BUFFER10);\
    lua_setfield(L, -2, "DRAW_BUFFER10");\
    lua_pushnumber(L, GL_DRAW_BUFFER11);\
    lua_setfield(L, -2, "DRAW_BUFFER11");\
    lua_pushnumber(L, GL_DRAW_BUFFER12);\
    lua_setfield(L, -2, "DRAW_BUFFER12");\
    lua_pushnumber(L, GL_DRAW_BUFFER13);\
    lua_setfield(L, -2, "DRAW_BUFFER13");\
    lua_pushnumber(L, GL_DRAW_BUFFER14);\
    lua_setfield(L, -2, "DRAW_BUFFER14");\
    lua_pushnumber(L, GL_DRAW_BUFFER15);\
    lua_setfield(L, -2, "DRAW_BUFFER15");\
    lua_pushnumber(L, GL_DRAW_BUFFER2);\
    lua_setfield(L, -2, "DRAW_BUFFER2");\
    lua_pushnumber(L, GL_DRAW_BUFFER3);\
    lua_setfield(L, -2, "DRAW_BUFFER3");\
    lua_pushnumber(L, GL_DRAW_BUFFER4);\
    lua_setfield(L, -2, "DRAW_BUFFER4");\
    lua_pushnumber(L, GL_DRAW_BUFFER5);\
    lua_setfield(L, -2, "DRAW_BUFFER5");\
    lua_pushnumber(L, GL_DRAW_BUFFER6);\
    lua_setfield(L, -2, "DRAW_BUFFER6");\
    lua_pushnumber(L, GL_DRAW_BUFFER7);\
    lua_setfield(L, -2, "DRAW_BUFFER7");\
    lua_pushnumber(L, GL_DRAW_BUFFER8);\
    lua_setfield(L, -2, "DRAW_BUFFER8");\
    lua_pushnumber(L, GL_DRAW_BUFFER9);\
    lua_setfield(L, -2, "DRAW_BUFFER9");\
    lua_pushnumber(L, GL_FLOAT_MAT2);\
    lua_setfield(L, -2, "FLOAT_MAT2");\
    lua_pushnumber(L, GL_FLOAT_MAT3);\
    lua_setfield(L, -2, "FLOAT_MAT3");\
    lua_pushnumber(L, GL_FLOAT_MAT4);\
    lua_setfield(L, -2, "FLOAT_MAT4");\
    lua_pushnumber(L, GL_FLOAT_VEC2);\
    lua_setfield(L, -2, "FLOAT_VEC2");\
    lua_pushnumber(L, GL_FLOAT_VEC3);\
    lua_setfield(L, -2, "FLOAT_VEC3");\
    lua_pushnumber(L, GL_FLOAT_VEC4);\
    lua_setfield(L, -2, "FLOAT_VEC4");\
    lua_pushnumber(L, GL_FRAGMENT_SHADER);\
    lua_setfield(L, -2, "FRAGMENT_SHADER");\
    lua_pushnumber(L, GL_FRAGMENT_SHADER_DERIVATIVE_HINT);\
    lua_setfield(L, -2, "FRAGMENT_SHADER_DERIVATIVE_HINT");\
    lua_pushnumber(L, GL_INFO_LOG_LENGTH);\
    lua_setfield(L, -2, "INFO_LOG_LENGTH");\
    lua_pushnumber(L, GL_INT_VEC2);\
    lua_setfield(L, -2, "INT_VEC2");\
    lua_pushnumber(L, GL_INT_VEC3);\
    lua_setfield(L, -2, "INT_VEC3");\
    lua_pushnumber(L, GL_INT_VEC4);\
    lua_setfield(L, -2, "INT_VEC4");\
    lua_pushnumber(L, GL_LINK_STATUS);\
    lua_setfield(L, -2, "LINK_STATUS");\
    lua_pushnumber(L, GL_LOWER_LEFT);\
    lua_setfield(L, -2, "LOWER_LEFT");\
    lua_pushnumber(L, GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_COMBINED_TEXTURE_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_DRAW_BUFFERS);\
    lua_setfield(L, -2, "MAX_DRAW_BUFFERS");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TEXTURE_COORDS);\
    lua_setfield(L, -2, "MAX_TEXTURE_COORDS");\
    lua_pushnumber(L, GL_MAX_TEXTURE_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_TEXTURE_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_VARYING_FLOATS);\
    lua_setfield(L, -2, "MAX_VARYING_FLOATS");\
    lua_pushnumber(L, GL_MAX_VERTEX_ATTRIBS);\
    lua_setfield(L, -2, "MAX_VERTEX_ATTRIBS");\
    lua_pushnumber(L, GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_VERTEX_TEXTURE_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_VERTEX_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_VERTEX_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_POINT_SPRITE);\
    lua_setfield(L, -2, "POINT_SPRITE");\
    lua_pushnumber(L, GL_POINT_SPRITE_COORD_ORIGIN);\
    lua_setfield(L, -2, "POINT_SPRITE_COORD_ORIGIN");\
    lua_pushnumber(L, GL_SAMPLER_1D);\
    lua_setfield(L, -2, "SAMPLER_1D");\
    lua_pushnumber(L, GL_SAMPLER_1D_SHADOW);\
    lua_setfield(L, -2, "SAMPLER_1D_SHADOW");\
    lua_pushnumber(L, GL_SAMPLER_2D);\
    lua_setfield(L, -2, "SAMPLER_2D");\
    lua_pushnumber(L, GL_SAMPLER_2D_SHADOW);\
    lua_setfield(L, -2, "SAMPLER_2D_SHADOW");\
    lua_pushnumber(L, GL_SAMPLER_3D);\
    lua_setfield(L, -2, "SAMPLER_3D");\
    lua_pushnumber(L, GL_SAMPLER_CUBE);\
    lua_setfield(L, -2, "SAMPLER_CUBE");\
    lua_pushnumber(L, GL_SHADER_SOURCE_LENGTH);\
    lua_setfield(L, -2, "SHADER_SOURCE_LENGTH");\
    lua_pushnumber(L, GL_SHADER_TYPE);\
    lua_setfield(L, -2, "SHADER_TYPE");\
    lua_pushnumber(L, GL_SHADING_LANGUAGE_VERSION);\
    lua_setfield(L, -2, "SHADING_LANGUAGE_VERSION");\
    lua_pushnumber(L, GL_STENCIL_BACK_FAIL);\
    lua_setfield(L, -2, "STENCIL_BACK_FAIL");\
    lua_pushnumber(L, GL_STENCIL_BACK_FUNC);\
    lua_setfield(L, -2, "STENCIL_BACK_FUNC");\
    lua_pushnumber(L, GL_STENCIL_BACK_PASS_DEPTH_FAIL);\
    lua_setfield(L, -2, "STENCIL_BACK_PASS_DEPTH_FAIL");\
    lua_pushnumber(L, GL_STENCIL_BACK_PASS_DEPTH_PASS);\
    lua_setfield(L, -2, "STENCIL_BACK_PASS_DEPTH_PASS");\
    lua_pushnumber(L, GL_STENCIL_BACK_REF);\
    lua_setfield(L, -2, "STENCIL_BACK_REF");\
    lua_pushnumber(L, GL_STENCIL_BACK_VALUE_MASK);\
    lua_setfield(L, -2, "STENCIL_BACK_VALUE_MASK");\
    lua_pushnumber(L, GL_STENCIL_BACK_WRITEMASK);\
    lua_setfield(L, -2, "STENCIL_BACK_WRITEMASK");\
    lua_pushnumber(L, GL_UPPER_LEFT);\
    lua_setfield(L, -2, "UPPER_LEFT");\
    lua_pushnumber(L, GL_VALIDATE_STATUS);\
    lua_setfield(L, -2, "VALIDATE_STATUS");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_ENABLED);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_ENABLED");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_NORMALIZED);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_NORMALIZED");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_POINTER);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_POINTER");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_SIZE);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_SIZE");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_STRIDE);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_TYPE);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_TYPE");\
    lua_pushnumber(L, GL_VERTEX_PROGRAM_POINT_SIZE);\
    lua_setfield(L, -2, "VERTEX_PROGRAM_POINT_SIZE");\
    lua_pushnumber(L, GL_VERTEX_PROGRAM_TWO_SIDE);\
    lua_setfield(L, -2, "VERTEX_PROGRAM_TWO_SIDE");\
    lua_pushnumber(L, GL_VERTEX_SHADER);\
    lua_setfield(L, -2, "VERTEX_SHADER");\
    lua_pushnumber(L, GL_COMPRESSED_SLUMINANCE);\
    lua_setfield(L, -2, "COMPRESSED_SLUMINANCE");\
    lua_pushnumber(L, GL_COMPRESSED_SLUMINANCE_ALPHA);\
    lua_setfield(L, -2, "COMPRESSED_SLUMINANCE_ALPHA");\
    lua_pushnumber(L, GL_COMPRESSED_SRGB);\
    lua_setfield(L, -2, "COMPRESSED_SRGB");\
    lua_pushnumber(L, GL_COMPRESSED_SRGB_ALPHA);\
    lua_setfield(L, -2, "COMPRESSED_SRGB_ALPHA");\
    lua_pushnumber(L, GL_CURRENT_RASTER_SECONDARY_COLOR);\
    lua_setfield(L, -2, "CURRENT_RASTER_SECONDARY_COLOR");\
    lua_pushnumber(L, GL_FLOAT_MAT2x3);\
    lua_setfield(L, -2, "FLOAT_MAT2x3");\
    lua_pushnumber(L, GL_FLOAT_MAT2x4);\
    lua_setfield(L, -2, "FLOAT_MAT2x4");\
    lua_pushnumber(L, GL_FLOAT_MAT3x2);\
    lua_setfield(L, -2, "FLOAT_MAT3x2");\
    lua_pushnumber(L, GL_FLOAT_MAT3x4);\
    lua_setfield(L, -2, "FLOAT_MAT3x4");\
    lua_pushnumber(L, GL_FLOAT_MAT4x2);\
    lua_setfield(L, -2, "FLOAT_MAT4x2");\
    lua_pushnumber(L, GL_FLOAT_MAT4x3);\
    lua_setfield(L, -2, "FLOAT_MAT4x3");\
    lua_pushnumber(L, GL_PIXEL_PACK_BUFFER);\
    lua_setfield(L, -2, "PIXEL_PACK_BUFFER");\
    lua_pushnumber(L, GL_PIXEL_PACK_BUFFER_BINDING);\
    lua_setfield(L, -2, "PIXEL_PACK_BUFFER_BINDING");\
    lua_pushnumber(L, GL_PIXEL_UNPACK_BUFFER);\
    lua_setfield(L, -2, "PIXEL_UNPACK_BUFFER");\
    lua_pushnumber(L, GL_PIXEL_UNPACK_BUFFER_BINDING);\
    lua_setfield(L, -2, "PIXEL_UNPACK_BUFFER_BINDING");\
    lua_pushnumber(L, GL_SLUMINANCE);\
    lua_setfield(L, -2, "SLUMINANCE");\
    lua_pushnumber(L, GL_SLUMINANCE8);\
    lua_setfield(L, -2, "SLUMINANCE8");\
    lua_pushnumber(L, GL_SLUMINANCE8_ALPHA8);\
    lua_setfield(L, -2, "SLUMINANCE8_ALPHA8");\
    lua_pushnumber(L, GL_SLUMINANCE_ALPHA);\
    lua_setfield(L, -2, "SLUMINANCE_ALPHA");\
    lua_pushnumber(L, GL_SRGB);\
    lua_setfield(L, -2, "SRGB");\
    lua_pushnumber(L, GL_SRGB8);\
    lua_setfield(L, -2, "SRGB8");\
    lua_pushnumber(L, GL_SRGB8_ALPHA8);\
    lua_setfield(L, -2, "SRGB8_ALPHA8");\
    lua_pushnumber(L, GL_SRGB_ALPHA);\
    lua_setfield(L, -2, "SRGB_ALPHA");\
    lua_pushnumber(L, GL_ALPHA_INTEGER);\
    lua_setfield(L, -2, "ALPHA_INTEGER");\
    lua_pushnumber(L, GL_BGRA_INTEGER);\
    lua_setfield(L, -2, "BGRA_INTEGER");\
    lua_pushnumber(L, GL_BGR_INTEGER);\
    lua_setfield(L, -2, "BGR_INTEGER");\
    lua_pushnumber(L, GL_BLUE_INTEGER);\
    lua_setfield(L, -2, "BLUE_INTEGER");\
    lua_pushnumber(L, GL_BUFFER_ACCESS_FLAGS);\
    lua_setfield(L, -2, "BUFFER_ACCESS_FLAGS");\
    lua_pushnumber(L, GL_BUFFER_MAP_LENGTH);\
    lua_setfield(L, -2, "BUFFER_MAP_LENGTH");\
    lua_pushnumber(L, GL_BUFFER_MAP_OFFSET);\
    lua_setfield(L, -2, "BUFFER_MAP_OFFSET");\
    lua_pushnumber(L, GL_CLAMP_FRAGMENT_COLOR);\
    lua_setfield(L, -2, "CLAMP_FRAGMENT_COLOR");\
    lua_pushnumber(L, GL_CLAMP_READ_COLOR);\
    lua_setfield(L, -2, "CLAMP_READ_COLOR");\
    lua_pushnumber(L, GL_CLAMP_VERTEX_COLOR);\
    lua_setfield(L, -2, "CLAMP_VERTEX_COLOR");\
    lua_pushnumber(L, GL_CLIP_DISTANCE0);\
    lua_setfield(L, -2, "CLIP_DISTANCE0");\
    lua_pushnumber(L, GL_CLIP_DISTANCE1);\
    lua_setfield(L, -2, "CLIP_DISTANCE1");\
    lua_pushnumber(L, GL_CLIP_DISTANCE2);\
    lua_setfield(L, -2, "CLIP_DISTANCE2");\
    lua_pushnumber(L, GL_CLIP_DISTANCE3);\
    lua_setfield(L, -2, "CLIP_DISTANCE3");\
    lua_pushnumber(L, GL_CLIP_DISTANCE4);\
    lua_setfield(L, -2, "CLIP_DISTANCE4");\
    lua_pushnumber(L, GL_CLIP_DISTANCE5);\
    lua_setfield(L, -2, "CLIP_DISTANCE5");\
    lua_pushnumber(L, GL_CLIP_DISTANCE6);\
    lua_setfield(L, -2, "CLIP_DISTANCE6");\
    lua_pushnumber(L, GL_CLIP_DISTANCE7);\
    lua_setfield(L, -2, "CLIP_DISTANCE7");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT0);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT0");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT1);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT1");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT10);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT10");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT11);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT11");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT12);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT12");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT13);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT13");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT14);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT14");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT15);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT15");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT16);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT16");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT17);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT17");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT18);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT18");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT19);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT19");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT2);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT2");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT20);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT20");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT21);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT21");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT22);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT22");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT23);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT23");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT24);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT24");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT25);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT25");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT26);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT26");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT27);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT27");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT28);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT28");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT29);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT29");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT3);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT3");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT30);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT30");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT31);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT31");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT4);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT4");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT5);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT5");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT6);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT6");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT7);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT7");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT8);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT8");\
    lua_pushnumber(L, GL_COLOR_ATTACHMENT9);\
    lua_setfield(L, -2, "COLOR_ATTACHMENT9");\
    lua_pushnumber(L, GL_COMPARE_REF_TO_TEXTURE);\
    lua_setfield(L, -2, "COMPARE_REF_TO_TEXTURE");\
    lua_pushnumber(L, GL_COMPRESSED_RED);\
    lua_setfield(L, -2, "COMPRESSED_RED");\
    lua_pushnumber(L, GL_COMPRESSED_RED_RGTC1);\
    lua_setfield(L, -2, "COMPRESSED_RED_RGTC1");\
    lua_pushnumber(L, GL_COMPRESSED_RG);\
    lua_setfield(L, -2, "COMPRESSED_RG");\
    lua_pushnumber(L, GL_COMPRESSED_RG_RGTC2);\
    lua_setfield(L, -2, "COMPRESSED_RG_RGTC2");\
    lua_pushnumber(L, GL_COMPRESSED_SIGNED_RED_RGTC1);\
    lua_setfield(L, -2, "COMPRESSED_SIGNED_RED_RGTC1");\
    lua_pushnumber(L, GL_COMPRESSED_SIGNED_RG_RGTC2);\
    lua_setfield(L, -2, "COMPRESSED_SIGNED_RG_RGTC2");\
    lua_pushnumber(L, GL_CONTEXT_FLAGS);\
    lua_setfield(L, -2, "CONTEXT_FLAGS");\
    lua_pushnumber(L, GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT);\
    lua_setfield(L, -2, "CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT");\
    lua_pushnumber(L, GL_DEPTH24_STENCIL8);\
    lua_setfield(L, -2, "DEPTH24_STENCIL8");\
    lua_pushnumber(L, GL_DEPTH32F_STENCIL8);\
    lua_setfield(L, -2, "DEPTH32F_STENCIL8");\
    lua_pushnumber(L, GL_DEPTH_ATTACHMENT);\
    lua_setfield(L, -2, "DEPTH_ATTACHMENT");\
    lua_pushnumber(L, GL_DEPTH_COMPONENT32F);\
    lua_setfield(L, -2, "DEPTH_COMPONENT32F");\
    lua_pushnumber(L, GL_DEPTH_STENCIL);\
    lua_setfield(L, -2, "DEPTH_STENCIL");\
    lua_pushnumber(L, GL_DEPTH_STENCIL_ATTACHMENT);\
    lua_setfield(L, -2, "DEPTH_STENCIL_ATTACHMENT");\
    lua_pushnumber(L, GL_DRAW_FRAMEBUFFER);\
    lua_setfield(L, -2, "DRAW_FRAMEBUFFER");\
    lua_pushnumber(L, GL_DRAW_FRAMEBUFFER_BINDING);\
    lua_setfield(L, -2, "DRAW_FRAMEBUFFER_BINDING");\
    lua_pushnumber(L, GL_FIXED_ONLY);\
    lua_setfield(L, -2, "FIXED_ONLY");\
    lua_pushnumber(L, GL_FLOAT_32_UNSIGNED_INT_24_8_REV);\
    lua_setfield(L, -2, "FLOAT_32_UNSIGNED_INT_24_8_REV");\
    lua_pushnumber(L, GL_FRAMEBUFFER);\
    lua_setfield(L, -2, "FRAMEBUFFER");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_RED_SIZE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL");\
    lua_pushnumber(L, GL_FRAMEBUFFER_BINDING);\
    lua_setfield(L, -2, "FRAMEBUFFER_BINDING");\
    lua_pushnumber(L, GL_FRAMEBUFFER_COMPLETE);\
    lua_setfield(L, -2, "FRAMEBUFFER_COMPLETE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_DEFAULT);\
    lua_setfield(L, -2, "FRAMEBUFFER_DEFAULT");\
    lua_pushnumber(L, GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT);\
    lua_setfield(L, -2, "FRAMEBUFFER_INCOMPLETE_ATTACHMENT");\
    lua_pushnumber(L, GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER);\
    lua_setfield(L, -2, "FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER");\
    lua_pushnumber(L, GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT);\
    lua_setfield(L, -2, "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");\
    lua_pushnumber(L, GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE);\
    lua_setfield(L, -2, "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER);\
    lua_setfield(L, -2, "FRAMEBUFFER_INCOMPLETE_READ_BUFFER");\
    lua_pushnumber(L, GL_FRAMEBUFFER_SRGB);\
    lua_setfield(L, -2, "FRAMEBUFFER_SRGB");\
    lua_pushnumber(L, GL_FRAMEBUFFER_UNDEFINED);\
    lua_setfield(L, -2, "FRAMEBUFFER_UNDEFINED");\
    lua_pushnumber(L, GL_FRAMEBUFFER_UNSUPPORTED);\
    lua_setfield(L, -2, "FRAMEBUFFER_UNSUPPORTED");\
    lua_pushnumber(L, GL_GREEN_INTEGER);\
    lua_setfield(L, -2, "GREEN_INTEGER");\
    lua_pushnumber(L, GL_HALF_FLOAT);\
    lua_setfield(L, -2, "HALF_FLOAT");\
    lua_pushnumber(L, GL_INTERLEAVED_ATTRIBS);\
    lua_setfield(L, -2, "INTERLEAVED_ATTRIBS");\
    lua_pushnumber(L, GL_INT_SAMPLER_1D);\
    lua_setfield(L, -2, "INT_SAMPLER_1D");\
    lua_pushnumber(L, GL_INT_SAMPLER_1D_ARRAY);\
    lua_setfield(L, -2, "INT_SAMPLER_1D_ARRAY");\
    lua_pushnumber(L, GL_INT_SAMPLER_2D);\
    lua_setfield(L, -2, "INT_SAMPLER_2D");\
    lua_pushnumber(L, GL_INT_SAMPLER_2D_ARRAY);\
    lua_setfield(L, -2, "INT_SAMPLER_2D_ARRAY");\
    lua_pushnumber(L, GL_INT_SAMPLER_3D);\
    lua_setfield(L, -2, "INT_SAMPLER_3D");\
    lua_pushnumber(L, GL_INT_SAMPLER_CUBE);\
    lua_setfield(L, -2, "INT_SAMPLER_CUBE");\
    lua_pushnumber(L, GL_INVALID_FRAMEBUFFER_OPERATION);\
    lua_setfield(L, -2, "INVALID_FRAMEBUFFER_OPERATION");\
    lua_pushnumber(L, GL_MAJOR_VERSION);\
    lua_setfield(L, -2, "MAJOR_VERSION");\
    lua_pushnumber(L, GL_MAP_FLUSH_EXPLICIT_BIT);\
    lua_setfield(L, -2, "MAP_FLUSH_EXPLICIT_BIT");\
    lua_pushnumber(L, GL_MAP_INVALIDATE_BUFFER_BIT);\
    lua_setfield(L, -2, "MAP_INVALIDATE_BUFFER_BIT");\
    lua_pushnumber(L, GL_MAP_INVALIDATE_RANGE_BIT);\
    lua_setfield(L, -2, "MAP_INVALIDATE_RANGE_BIT");\
    lua_pushnumber(L, GL_MAP_READ_BIT);\
    lua_setfield(L, -2, "MAP_READ_BIT");\
    lua_pushnumber(L, GL_MAP_UNSYNCHRONIZED_BIT);\
    lua_setfield(L, -2, "MAP_UNSYNCHRONIZED_BIT");\
    lua_pushnumber(L, GL_MAP_WRITE_BIT);\
    lua_setfield(L, -2, "MAP_WRITE_BIT");\
    lua_pushnumber(L, GL_MAX_ARRAY_TEXTURE_LAYERS);\
    lua_setfield(L, -2, "MAX_ARRAY_TEXTURE_LAYERS");\
    lua_pushnumber(L, GL_MAX_CLIP_DISTANCES);\
    lua_setfield(L, -2, "MAX_CLIP_DISTANCES");\
    lua_pushnumber(L, GL_MAX_COLOR_ATTACHMENTS);\
    lua_setfield(L, -2, "MAX_COLOR_ATTACHMENTS");\
    lua_pushnumber(L, GL_MAX_PROGRAM_TEXEL_OFFSET);\
    lua_setfield(L, -2, "MAX_PROGRAM_TEXEL_OFFSET");\
    lua_pushnumber(L, GL_MAX_RENDERBUFFER_SIZE);\
    lua_setfield(L, -2, "MAX_RENDERBUFFER_SIZE");\
    lua_pushnumber(L, GL_MAX_SAMPLES);\
    lua_setfield(L, -2, "MAX_SAMPLES");\
    lua_pushnumber(L, GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS);\
    lua_setfield(L, -2, "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS");\
    lua_pushnumber(L, GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_VARYING_COMPONENTS);\
    lua_setfield(L, -2, "MAX_VARYING_COMPONENTS");\
    lua_pushnumber(L, GL_MINOR_VERSION);\
    lua_setfield(L, -2, "MINOR_VERSION");\
    lua_pushnumber(L, GL_MIN_PROGRAM_TEXEL_OFFSET);\
    lua_setfield(L, -2, "MIN_PROGRAM_TEXEL_OFFSET");\
    lua_pushnumber(L, GL_NUM_EXTENSIONS);\
    lua_setfield(L, -2, "NUM_EXTENSIONS");\
    lua_pushnumber(L, GL_PRIMITIVES_GENERATED);\
    lua_setfield(L, -2, "PRIMITIVES_GENERATED");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_1D_ARRAY);\
    lua_setfield(L, -2, "PROXY_TEXTURE_1D_ARRAY");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_2D_ARRAY);\
    lua_setfield(L, -2, "PROXY_TEXTURE_2D_ARRAY");\
    lua_pushnumber(L, GL_QUERY_BY_REGION_NO_WAIT);\
    lua_setfield(L, -2, "QUERY_BY_REGION_NO_WAIT");\
    lua_pushnumber(L, GL_QUERY_BY_REGION_WAIT);\
    lua_setfield(L, -2, "QUERY_BY_REGION_WAIT");\
    lua_pushnumber(L, GL_QUERY_NO_WAIT);\
    lua_setfield(L, -2, "QUERY_NO_WAIT");\
    lua_pushnumber(L, GL_QUERY_WAIT);\
    lua_setfield(L, -2, "QUERY_WAIT");\
    lua_pushnumber(L, GL_R11F_G11F_B10F);\
    lua_setfield(L, -2, "R11F_G11F_B10F");\
    lua_pushnumber(L, GL_R16);\
    lua_setfield(L, -2, "R16");\
    lua_pushnumber(L, GL_R16F);\
    lua_setfield(L, -2, "R16F");\
    lua_pushnumber(L, GL_R16I);\
    lua_setfield(L, -2, "R16I");\
    lua_pushnumber(L, GL_R16UI);\
    lua_setfield(L, -2, "R16UI");\
    lua_pushnumber(L, GL_R32F);\
    lua_setfield(L, -2, "R32F");\
    lua_pushnumber(L, GL_R32I);\
    lua_setfield(L, -2, "R32I");\
    lua_pushnumber(L, GL_R32UI);\
    lua_setfield(L, -2, "R32UI");\
    lua_pushnumber(L, GL_R8);\
    lua_setfield(L, -2, "R8");\
    lua_pushnumber(L, GL_R8I);\
    lua_setfield(L, -2, "R8I");\
    lua_pushnumber(L, GL_R8UI);\
    lua_setfield(L, -2, "R8UI");\
    lua_pushnumber(L, GL_RASTERIZER_DISCARD);\
    lua_setfield(L, -2, "RASTERIZER_DISCARD");\
    lua_pushnumber(L, GL_READ_FRAMEBUFFER);\
    lua_setfield(L, -2, "READ_FRAMEBUFFER");\
    lua_pushnumber(L, GL_READ_FRAMEBUFFER_BINDING);\
    lua_setfield(L, -2, "READ_FRAMEBUFFER_BINDING");\
    lua_pushnumber(L, GL_RED_INTEGER);\
    lua_setfield(L, -2, "RED_INTEGER");\
    lua_pushnumber(L, GL_RENDERBUFFER);\
    lua_setfield(L, -2, "RENDERBUFFER");\
    lua_pushnumber(L, GL_RENDERBUFFER_ALPHA_SIZE);\
    lua_setfield(L, -2, "RENDERBUFFER_ALPHA_SIZE");\
    lua_pushnumber(L, GL_RENDERBUFFER_BINDING);\
    lua_setfield(L, -2, "RENDERBUFFER_BINDING");\
    lua_pushnumber(L, GL_RENDERBUFFER_BLUE_SIZE);\
    lua_setfield(L, -2, "RENDERBUFFER_BLUE_SIZE");\
    lua_pushnumber(L, GL_RENDERBUFFER_DEPTH_SIZE);\
    lua_setfield(L, -2, "RENDERBUFFER_DEPTH_SIZE");\
    lua_pushnumber(L, GL_RENDERBUFFER_GREEN_SIZE);\
    lua_setfield(L, -2, "RENDERBUFFER_GREEN_SIZE");\
    lua_pushnumber(L, GL_RENDERBUFFER_HEIGHT);\
    lua_setfield(L, -2, "RENDERBUFFER_HEIGHT");\
    lua_pushnumber(L, GL_RENDERBUFFER_INTERNAL_FORMAT);\
    lua_setfield(L, -2, "RENDERBUFFER_INTERNAL_FORMAT");\
    lua_pushnumber(L, GL_RENDERBUFFER_RED_SIZE);\
    lua_setfield(L, -2, "RENDERBUFFER_RED_SIZE");\
    lua_pushnumber(L, GL_RENDERBUFFER_SAMPLES);\
    lua_setfield(L, -2, "RENDERBUFFER_SAMPLES");\
    lua_pushnumber(L, GL_RENDERBUFFER_STENCIL_SIZE);\
    lua_setfield(L, -2, "RENDERBUFFER_STENCIL_SIZE");\
    lua_pushnumber(L, GL_RENDERBUFFER_WIDTH);\
    lua_setfield(L, -2, "RENDERBUFFER_WIDTH");\
    lua_pushnumber(L, GL_RG);\
    lua_setfield(L, -2, "RG");\
    lua_pushnumber(L, GL_RG16);\
    lua_setfield(L, -2, "RG16");\
    lua_pushnumber(L, GL_RG16F);\
    lua_setfield(L, -2, "RG16F");\
    lua_pushnumber(L, GL_RG16I);\
    lua_setfield(L, -2, "RG16I");\
    lua_pushnumber(L, GL_RG16UI);\
    lua_setfield(L, -2, "RG16UI");\
    lua_pushnumber(L, GL_RG32F);\
    lua_setfield(L, -2, "RG32F");\
    lua_pushnumber(L, GL_RG32I);\
    lua_setfield(L, -2, "RG32I");\
    lua_pushnumber(L, GL_RG32UI);\
    lua_setfield(L, -2, "RG32UI");\
    lua_pushnumber(L, GL_RG8);\
    lua_setfield(L, -2, "RG8");\
    lua_pushnumber(L, GL_RG8I);\
    lua_setfield(L, -2, "RG8I");\
    lua_pushnumber(L, GL_RG8UI);\
    lua_setfield(L, -2, "RG8UI");\
    lua_pushnumber(L, GL_RGB16F);\
    lua_setfield(L, -2, "RGB16F");\
    lua_pushnumber(L, GL_RGB16I);\
    lua_setfield(L, -2, "RGB16I");\
    lua_pushnumber(L, GL_RGB16UI);\
    lua_setfield(L, -2, "RGB16UI");\
    lua_pushnumber(L, GL_RGB32F);\
    lua_setfield(L, -2, "RGB32F");\
    lua_pushnumber(L, GL_RGB32I);\
    lua_setfield(L, -2, "RGB32I");\
    lua_pushnumber(L, GL_RGB32UI);\
    lua_setfield(L, -2, "RGB32UI");\
    lua_pushnumber(L, GL_RGB8I);\
    lua_setfield(L, -2, "RGB8I");\
    lua_pushnumber(L, GL_RGB8UI);\
    lua_setfield(L, -2, "RGB8UI");\
    lua_pushnumber(L, GL_RGB9_E5);\
    lua_setfield(L, -2, "RGB9_E5");\
    lua_pushnumber(L, GL_RGBA16F);\
    lua_setfield(L, -2, "RGBA16F");\
    lua_pushnumber(L, GL_RGBA16I);\
    lua_setfield(L, -2, "RGBA16I");\
    lua_pushnumber(L, GL_RGBA16UI);\
    lua_setfield(L, -2, "RGBA16UI");\
    lua_pushnumber(L, GL_RGBA32F);\
    lua_setfield(L, -2, "RGBA32F");\
    lua_pushnumber(L, GL_RGBA32I);\
    lua_setfield(L, -2, "RGBA32I");\
    lua_pushnumber(L, GL_RGBA32UI);\
    lua_setfield(L, -2, "RGBA32UI");\
    lua_pushnumber(L, GL_RGBA8I);\
    lua_setfield(L, -2, "RGBA8I");\
    lua_pushnumber(L, GL_RGBA8UI);\
    lua_setfield(L, -2, "RGBA8UI");\
    lua_pushnumber(L, GL_RGBA_INTEGER);\
    lua_setfield(L, -2, "RGBA_INTEGER");\
    lua_pushnumber(L, GL_RGB_INTEGER);\
    lua_setfield(L, -2, "RGB_INTEGER");\
    lua_pushnumber(L, GL_RG_INTEGER);\
    lua_setfield(L, -2, "RG_INTEGER");\
    lua_pushnumber(L, GL_SAMPLER_1D_ARRAY);\
    lua_setfield(L, -2, "SAMPLER_1D_ARRAY");\
    lua_pushnumber(L, GL_SAMPLER_1D_ARRAY_SHADOW);\
    lua_setfield(L, -2, "SAMPLER_1D_ARRAY_SHADOW");\
    lua_pushnumber(L, GL_SAMPLER_2D_ARRAY);\
    lua_setfield(L, -2, "SAMPLER_2D_ARRAY");\
    lua_pushnumber(L, GL_SAMPLER_2D_ARRAY_SHADOW);\
    lua_setfield(L, -2, "SAMPLER_2D_ARRAY_SHADOW");\
    lua_pushnumber(L, GL_SAMPLER_CUBE_SHADOW);\
    lua_setfield(L, -2, "SAMPLER_CUBE_SHADOW");\
    lua_pushnumber(L, GL_SEPARATE_ATTRIBS);\
    lua_setfield(L, -2, "SEPARATE_ATTRIBS");\
    lua_pushnumber(L, GL_STENCIL_ATTACHMENT);\
    lua_setfield(L, -2, "STENCIL_ATTACHMENT");\
    lua_pushnumber(L, GL_STENCIL_INDEX1);\
    lua_setfield(L, -2, "STENCIL_INDEX1");\
    lua_pushnumber(L, GL_STENCIL_INDEX16);\
    lua_setfield(L, -2, "STENCIL_INDEX16");\
    lua_pushnumber(L, GL_STENCIL_INDEX4);\
    lua_setfield(L, -2, "STENCIL_INDEX4");\
    lua_pushnumber(L, GL_STENCIL_INDEX8);\
    lua_setfield(L, -2, "STENCIL_INDEX8");\
    lua_pushnumber(L, GL_TEXTURE_1D_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_1D_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_2D_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_2D_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_ALPHA_TYPE);\
    lua_setfield(L, -2, "TEXTURE_ALPHA_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_1D_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_BINDING_1D_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_2D_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_BINDING_2D_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_BLUE_TYPE);\
    lua_setfield(L, -2, "TEXTURE_BLUE_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_DEPTH_TYPE);\
    lua_setfield(L, -2, "TEXTURE_DEPTH_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_GREEN_TYPE);\
    lua_setfield(L, -2, "TEXTURE_GREEN_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_RED_TYPE);\
    lua_setfield(L, -2, "TEXTURE_RED_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_SHARED_SIZE);\
    lua_setfield(L, -2, "TEXTURE_SHARED_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_STENCIL_SIZE);\
    lua_setfield(L, -2, "TEXTURE_STENCIL_SIZE");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_BINDING);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_BINDING");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_MODE);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_MODE");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_SIZE);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_SIZE");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_START);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_START");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_VARYINGS);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_VARYINGS");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH");\
    lua_pushnumber(L, GL_UNSIGNED_INT_10F_11F_11F_REV);\
    lua_setfield(L, -2, "UNSIGNED_INT_10F_11F_11F_REV");\
    lua_pushnumber(L, GL_UNSIGNED_INT_24_8);\
    lua_setfield(L, -2, "UNSIGNED_INT_24_8");\
    lua_pushnumber(L, GL_UNSIGNED_INT_5_9_9_9_REV);\
    lua_setfield(L, -2, "UNSIGNED_INT_5_9_9_9_REV");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_1D);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_1D");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_1D_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_1D_ARRAY");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_2D);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_2D");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_2D_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_2D_ARRAY");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_3D);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_3D");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_CUBE);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_CUBE");\
    lua_pushnumber(L, GL_UNSIGNED_INT_VEC2);\
    lua_setfield(L, -2, "UNSIGNED_INT_VEC2");\
    lua_pushnumber(L, GL_UNSIGNED_INT_VEC3);\
    lua_setfield(L, -2, "UNSIGNED_INT_VEC3");\
    lua_pushnumber(L, GL_UNSIGNED_INT_VEC4);\
    lua_setfield(L, -2, "UNSIGNED_INT_VEC4");\
    lua_pushnumber(L, GL_UNSIGNED_NORMALIZED);\
    lua_setfield(L, -2, "UNSIGNED_NORMALIZED");\
    lua_pushnumber(L, GL_VERTEX_ARRAY_BINDING);\
    lua_setfield(L, -2, "VERTEX_ARRAY_BINDING");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_INTEGER);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_INTEGER");\
    lua_pushnumber(L, GL_ACTIVE_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "ACTIVE_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH);\
    lua_setfield(L, -2, "ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH");\
    lua_pushnumber(L, GL_COPY_READ_BUFFER);\
    lua_setfield(L, -2, "COPY_READ_BUFFER");\
    lua_pushnumber(L, GL_COPY_WRITE_BUFFER);\
    lua_setfield(L, -2, "COPY_WRITE_BUFFER");\
    lua_pushnumber(L, GL_INT_SAMPLER_2D_RECT);\
    lua_setfield(L, -2, "INT_SAMPLER_2D_RECT");\
    lua_pushnumber(L, GL_INT_SAMPLER_BUFFER);\
    lua_setfield(L, -2, "INT_SAMPLER_BUFFER");\
    lua_pushnumber(L, GL_INVALID_INDEX);\
    lua_setfield(L, -2, "INVALID_INDEX");\
    lua_pushnumber(L, GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_COMBINED_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "MAX_COMBINED_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_MAX_RECTANGLE_TEXTURE_SIZE);\
    lua_setfield(L, -2, "MAX_RECTANGLE_TEXTURE_SIZE");\
    lua_pushnumber(L, GL_MAX_TEXTURE_BUFFER_SIZE);\
    lua_setfield(L, -2, "MAX_TEXTURE_BUFFER_SIZE");\
    lua_pushnumber(L, GL_MAX_UNIFORM_BLOCK_SIZE);\
    lua_setfield(L, -2, "MAX_UNIFORM_BLOCK_SIZE");\
    lua_pushnumber(L, GL_MAX_UNIFORM_BUFFER_BINDINGS);\
    lua_setfield(L, -2, "MAX_UNIFORM_BUFFER_BINDINGS");\
    lua_pushnumber(L, GL_MAX_VERTEX_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "MAX_VERTEX_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_PRIMITIVE_RESTART);\
    lua_setfield(L, -2, "PRIMITIVE_RESTART");\
    lua_pushnumber(L, GL_PRIMITIVE_RESTART_INDEX);\
    lua_setfield(L, -2, "PRIMITIVE_RESTART_INDEX");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_RECTANGLE);\
    lua_setfield(L, -2, "PROXY_TEXTURE_RECTANGLE");\
    lua_pushnumber(L, GL_R16_SNORM);\
    lua_setfield(L, -2, "R16_SNORM");\
    lua_pushnumber(L, GL_R8_SNORM);\
    lua_setfield(L, -2, "R8_SNORM");\
    lua_pushnumber(L, GL_RG16_SNORM);\
    lua_setfield(L, -2, "RG16_SNORM");\
    lua_pushnumber(L, GL_RG8_SNORM);\
    lua_setfield(L, -2, "RG8_SNORM");\
    lua_pushnumber(L, GL_RGB16_SNORM);\
    lua_setfield(L, -2, "RGB16_SNORM");\
    lua_pushnumber(L, GL_RGB8_SNORM);\
    lua_setfield(L, -2, "RGB8_SNORM");\
    lua_pushnumber(L, GL_RGBA16_SNORM);\
    lua_setfield(L, -2, "RGBA16_SNORM");\
    lua_pushnumber(L, GL_RGBA8_SNORM);\
    lua_setfield(L, -2, "RGBA8_SNORM");\
    lua_pushnumber(L, GL_SAMPLER_2D_RECT);\
    lua_setfield(L, -2, "SAMPLER_2D_RECT");\
    lua_pushnumber(L, GL_SAMPLER_2D_RECT_SHADOW);\
    lua_setfield(L, -2, "SAMPLER_2D_RECT_SHADOW");\
    lua_pushnumber(L, GL_SAMPLER_BUFFER);\
    lua_setfield(L, -2, "SAMPLER_BUFFER");\
    lua_pushnumber(L, GL_SIGNED_NORMALIZED);\
    lua_setfield(L, -2, "SIGNED_NORMALIZED");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_BUFFER);\
    lua_setfield(L, -2, "TEXTURE_BINDING_BUFFER");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_RECTANGLE);\
    lua_setfield(L, -2, "TEXTURE_BINDING_RECTANGLE");\
    lua_pushnumber(L, GL_TEXTURE_BUFFER);\
    lua_setfield(L, -2, "TEXTURE_BUFFER");\
    lua_pushnumber(L, GL_TEXTURE_BUFFER_DATA_STORE_BINDING);\
    lua_setfield(L, -2, "TEXTURE_BUFFER_DATA_STORE_BINDING");\
    lua_pushnumber(L, GL_TEXTURE_RECTANGLE);\
    lua_setfield(L, -2, "TEXTURE_RECTANGLE");\
    lua_pushnumber(L, GL_UNIFORM_ARRAY_STRIDE);\
    lua_setfield(L, -2, "UNIFORM_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_ACTIVE_UNIFORMS");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_BINDING);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_BINDING");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_DATA_SIZE);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_DATA_SIZE");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_INDEX);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_INDEX");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_NAME_LENGTH);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_NAME_LENGTH");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER");\
    lua_pushnumber(L, GL_UNIFORM_BUFFER);\
    lua_setfield(L, -2, "UNIFORM_BUFFER");\
    lua_pushnumber(L, GL_UNIFORM_BUFFER_BINDING);\
    lua_setfield(L, -2, "UNIFORM_BUFFER_BINDING");\
    lua_pushnumber(L, GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT);\
    lua_setfield(L, -2, "UNIFORM_BUFFER_OFFSET_ALIGNMENT");\
    lua_pushnumber(L, GL_UNIFORM_BUFFER_SIZE);\
    lua_setfield(L, -2, "UNIFORM_BUFFER_SIZE");\
    lua_pushnumber(L, GL_UNIFORM_BUFFER_START);\
    lua_setfield(L, -2, "UNIFORM_BUFFER_START");\
    lua_pushnumber(L, GL_UNIFORM_IS_ROW_MAJOR);\
    lua_setfield(L, -2, "UNIFORM_IS_ROW_MAJOR");\
    lua_pushnumber(L, GL_UNIFORM_MATRIX_STRIDE);\
    lua_setfield(L, -2, "UNIFORM_MATRIX_STRIDE");\
    lua_pushnumber(L, GL_UNIFORM_NAME_LENGTH);\
    lua_setfield(L, -2, "UNIFORM_NAME_LENGTH");\
    lua_pushnumber(L, GL_UNIFORM_OFFSET);\
    lua_setfield(L, -2, "UNIFORM_OFFSET");\
    lua_pushnumber(L, GL_UNIFORM_SIZE);\
    lua_setfield(L, -2, "UNIFORM_SIZE");\
    lua_pushnumber(L, GL_UNIFORM_TYPE);\
    lua_setfield(L, -2, "UNIFORM_TYPE");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_2D_RECT);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_2D_RECT");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_BUFFER);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_BUFFER");\
    lua_pushnumber(L, GL_ALREADY_SIGNALED);\
    lua_setfield(L, -2, "ALREADY_SIGNALED");\
    lua_pushnumber(L, GL_CONDITION_SATISFIED);\
    lua_setfield(L, -2, "CONDITION_SATISFIED");\
    lua_pushnumber(L, GL_CONTEXT_COMPATIBILITY_PROFILE_BIT);\
    lua_setfield(L, -2, "CONTEXT_COMPATIBILITY_PROFILE_BIT");\
    lua_pushnumber(L, GL_CONTEXT_CORE_PROFILE_BIT);\
    lua_setfield(L, -2, "CONTEXT_CORE_PROFILE_BIT");\
    lua_pushnumber(L, GL_CONTEXT_PROFILE_MASK);\
    lua_setfield(L, -2, "CONTEXT_PROFILE_MASK");\
    lua_pushnumber(L, GL_DEPTH_CLAMP);\
    lua_setfield(L, -2, "DEPTH_CLAMP");\
    lua_pushnumber(L, GL_FIRST_VERTEX_CONVENTION);\
    lua_setfield(L, -2, "FIRST_VERTEX_CONVENTION");\
    lua_pushnumber(L, GL_FRAMEBUFFER_ATTACHMENT_LAYERED);\
    lua_setfield(L, -2, "FRAMEBUFFER_ATTACHMENT_LAYERED");\
    lua_pushnumber(L, GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS);\
    lua_setfield(L, -2, "FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS");\
    lua_pushnumber(L, GL_GEOMETRY_INPUT_TYPE);\
    lua_setfield(L, -2, "GEOMETRY_INPUT_TYPE");\
    lua_pushnumber(L, GL_GEOMETRY_OUTPUT_TYPE);\
    lua_setfield(L, -2, "GEOMETRY_OUTPUT_TYPE");\
    lua_pushnumber(L, GL_GEOMETRY_SHADER);\
    lua_setfield(L, -2, "GEOMETRY_SHADER");\
    lua_pushnumber(L, GL_GEOMETRY_VERTICES_OUT);\
    lua_setfield(L, -2, "GEOMETRY_VERTICES_OUT");\
    lua_pushnumber(L, GL_INT_SAMPLER_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "INT_SAMPLER_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "INT_SAMPLER_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_LAST_VERTEX_CONVENTION);\
    lua_setfield(L, -2, "LAST_VERTEX_CONVENTION");\
    lua_pushnumber(L, GL_LINES_ADJACENCY);\
    lua_setfield(L, -2, "LINES_ADJACENCY");\
    lua_pushnumber(L, GL_LINE_STRIP_ADJACENCY);\
    lua_setfield(L, -2, "LINE_STRIP_ADJACENCY");\
    lua_pushnumber(L, GL_MAX_COLOR_TEXTURE_SAMPLES);\
    lua_setfield(L, -2, "MAX_COLOR_TEXTURE_SAMPLES");\
    lua_pushnumber(L, GL_MAX_DEPTH_TEXTURE_SAMPLES);\
    lua_setfield(L, -2, "MAX_DEPTH_TEXTURE_SAMPLES");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_INPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_INPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_INPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_INPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_OUTPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_OUTPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_OUTPUT_VERTICES);\
    lua_setfield(L, -2, "MAX_GEOMETRY_OUTPUT_VERTICES");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_TEXTURE_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_INTEGER_SAMPLES);\
    lua_setfield(L, -2, "MAX_INTEGER_SAMPLES");\
    lua_pushnumber(L, GL_MAX_SAMPLE_MASK_WORDS);\
    lua_setfield(L, -2, "MAX_SAMPLE_MASK_WORDS");\
    lua_pushnumber(L, GL_MAX_SERVER_WAIT_TIMEOUT);\
    lua_setfield(L, -2, "MAX_SERVER_WAIT_TIMEOUT");\
    lua_pushnumber(L, GL_MAX_VERTEX_OUTPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_VERTEX_OUTPUT_COMPONENTS");\
    lua_pushnumber(L, GL_OBJECT_TYPE);\
    lua_setfield(L, -2, "OBJECT_TYPE");\
    lua_pushnumber(L, GL_PROGRAM_POINT_SIZE);\
    lua_setfield(L, -2, "PROGRAM_POINT_SIZE");\
    lua_pushnumber(L, GL_PROVOKING_VERTEX);\
    lua_setfield(L, -2, "PROVOKING_VERTEX");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "PROXY_TEXTURE_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION);\
    lua_setfield(L, -2, "QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION");\
    lua_pushnumber(L, GL_SAMPLER_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "SAMPLER_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_SAMPLER_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "SAMPLER_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_SAMPLE_MASK);\
    lua_setfield(L, -2, "SAMPLE_MASK");\
    lua_pushnumber(L, GL_SAMPLE_MASK_VALUE);\
    lua_setfield(L, -2, "SAMPLE_MASK_VALUE");\
    lua_pushnumber(L, GL_SAMPLE_POSITION);\
    lua_setfield(L, -2, "SAMPLE_POSITION");\
    lua_pushnumber(L, GL_SIGNALED);\
    lua_setfield(L, -2, "SIGNALED");\
    lua_pushnumber(L, GL_SYNC_CONDITION);\
    lua_setfield(L, -2, "SYNC_CONDITION");\
    lua_pushnumber(L, GL_SYNC_FENCE);\
    lua_setfield(L, -2, "SYNC_FENCE");\
    lua_pushnumber(L, GL_SYNC_FLAGS);\
    lua_setfield(L, -2, "SYNC_FLAGS");\
    lua_pushnumber(L, GL_SYNC_FLUSH_COMMANDS_BIT);\
    lua_setfield(L, -2, "SYNC_FLUSH_COMMANDS_BIT");\
    lua_pushnumber(L, GL_SYNC_GPU_COMMANDS_COMPLETE);\
    lua_setfield(L, -2, "SYNC_GPU_COMMANDS_COMPLETE");\
    lua_pushnumber(L, GL_SYNC_STATUS);\
    lua_setfield(L, -2, "SYNC_STATUS");\
    lua_pushnumber(L, GL_TEXTURE_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "TEXTURE_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_TEXTURE_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "TEXTURE_BINDING_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_SEAMLESS);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_SEAMLESS");\
    lua_pushnumber(L, GL_TEXTURE_FIXED_SAMPLE_LOCATIONS);\
    lua_setfield(L, -2, "TEXTURE_FIXED_SAMPLE_LOCATIONS");\
    lua_pushnumber(L, GL_TEXTURE_SAMPLES);\
    lua_setfield(L, -2, "TEXTURE_SAMPLES");\
    lua_pushnumber(L, GL_TIMEOUT_EXPIRED);\
    lua_setfield(L, -2, "TIMEOUT_EXPIRED");\
    lua_pushnumber(L, GL_TIMEOUT_IGNORED);\
    lua_setfield(L, -2, "TIMEOUT_IGNORED");\
    lua_pushnumber(L, GL_TRIANGLES_ADJACENCY);\
    lua_setfield(L, -2, "TRIANGLES_ADJACENCY");\
    lua_pushnumber(L, GL_TRIANGLE_STRIP_ADJACENCY);\
    lua_setfield(L, -2, "TRIANGLE_STRIP_ADJACENCY");\
    lua_pushnumber(L, GL_UNSIGNALED);\
    lua_setfield(L, -2, "UNSIGNALED");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_WAIT_FAILED);\
    lua_setfield(L, -2, "WAIT_FAILED");\
    lua_pushnumber(L, GL_ANY_SAMPLES_PASSED);\
    lua_setfield(L, -2, "ANY_SAMPLES_PASSED");\
    lua_pushnumber(L, GL_INT_2_10_10_10_REV);\
    lua_setfield(L, -2, "INT_2_10_10_10_REV");\
    lua_pushnumber(L, GL_MAX_DUAL_SOURCE_DRAW_BUFFERS);\
    lua_setfield(L, -2, "MAX_DUAL_SOURCE_DRAW_BUFFERS");\
    lua_pushnumber(L, GL_ONE_MINUS_SRC1_ALPHA);\
    lua_setfield(L, -2, "ONE_MINUS_SRC1_ALPHA");\
    lua_pushnumber(L, GL_ONE_MINUS_SRC1_COLOR);\
    lua_setfield(L, -2, "ONE_MINUS_SRC1_COLOR");\
    lua_pushnumber(L, GL_RGB10_A2UI);\
    lua_setfield(L, -2, "RGB10_A2UI");\
    lua_pushnumber(L, GL_SAMPLER_BINDING);\
    lua_setfield(L, -2, "SAMPLER_BINDING");\
    lua_pushnumber(L, GL_SRC1_COLOR);\
    lua_setfield(L, -2, "SRC1_COLOR");\
    lua_pushnumber(L, GL_TEXTURE_SWIZZLE_A);\
    lua_setfield(L, -2, "TEXTURE_SWIZZLE_A");\
    lua_pushnumber(L, GL_TEXTURE_SWIZZLE_B);\
    lua_setfield(L, -2, "TEXTURE_SWIZZLE_B");\
    lua_pushnumber(L, GL_TEXTURE_SWIZZLE_G);\
    lua_setfield(L, -2, "TEXTURE_SWIZZLE_G");\
    lua_pushnumber(L, GL_TEXTURE_SWIZZLE_R);\
    lua_setfield(L, -2, "TEXTURE_SWIZZLE_R");\
    lua_pushnumber(L, GL_TEXTURE_SWIZZLE_RGBA);\
    lua_setfield(L, -2, "TEXTURE_SWIZZLE_RGBA");\
    lua_pushnumber(L, GL_TIMESTAMP);\
    lua_setfield(L, -2, "TIMESTAMP");\
    lua_pushnumber(L, GL_TIME_ELAPSED);\
    lua_setfield(L, -2, "TIME_ELAPSED");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_DIVISOR);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_DIVISOR");\
    lua_pushnumber(L, GL_ACTIVE_SUBROUTINES);\
    lua_setfield(L, -2, "ACTIVE_SUBROUTINES");\
    lua_pushnumber(L, GL_ACTIVE_SUBROUTINE_MAX_LENGTH);\
    lua_setfield(L, -2, "ACTIVE_SUBROUTINE_MAX_LENGTH");\
    lua_pushnumber(L, GL_ACTIVE_SUBROUTINE_UNIFORMS);\
    lua_setfield(L, -2, "ACTIVE_SUBROUTINE_UNIFORMS");\
    lua_pushnumber(L, GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS);\
    lua_setfield(L, -2, "ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS");\
    lua_pushnumber(L, GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH);\
    lua_setfield(L, -2, "ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH");\
    lua_pushnumber(L, GL_COMPATIBLE_SUBROUTINES);\
    lua_setfield(L, -2, "COMPATIBLE_SUBROUTINES");\
    lua_pushnumber(L, GL_DOUBLE_MAT2);\
    lua_setfield(L, -2, "DOUBLE_MAT2");\
    lua_pushnumber(L, GL_DOUBLE_MAT2x3);\
    lua_setfield(L, -2, "DOUBLE_MAT2x3");\
    lua_pushnumber(L, GL_DOUBLE_MAT2x4);\
    lua_setfield(L, -2, "DOUBLE_MAT2x4");\
    lua_pushnumber(L, GL_DOUBLE_MAT3);\
    lua_setfield(L, -2, "DOUBLE_MAT3");\
    lua_pushnumber(L, GL_DOUBLE_MAT3x2);\
    lua_setfield(L, -2, "DOUBLE_MAT3x2");\
    lua_pushnumber(L, GL_DOUBLE_MAT3x4);\
    lua_setfield(L, -2, "DOUBLE_MAT3x4");\
    lua_pushnumber(L, GL_DOUBLE_MAT4);\
    lua_setfield(L, -2, "DOUBLE_MAT4");\
    lua_pushnumber(L, GL_DOUBLE_MAT4x2);\
    lua_setfield(L, -2, "DOUBLE_MAT4x2");\
    lua_pushnumber(L, GL_DOUBLE_MAT4x3);\
    lua_setfield(L, -2, "DOUBLE_MAT4x3");\
    lua_pushnumber(L, GL_DOUBLE_VEC2);\
    lua_setfield(L, -2, "DOUBLE_VEC2");\
    lua_pushnumber(L, GL_DOUBLE_VEC3);\
    lua_setfield(L, -2, "DOUBLE_VEC3");\
    lua_pushnumber(L, GL_DOUBLE_VEC4);\
    lua_setfield(L, -2, "DOUBLE_VEC4");\
    lua_pushnumber(L, GL_DRAW_INDIRECT_BUFFER);\
    lua_setfield(L, -2, "DRAW_INDIRECT_BUFFER");\
    lua_pushnumber(L, GL_DRAW_INDIRECT_BUFFER_BINDING);\
    lua_setfield(L, -2, "DRAW_INDIRECT_BUFFER_BINDING");\
    lua_pushnumber(L, GL_FRACTIONAL_EVEN);\
    lua_setfield(L, -2, "FRACTIONAL_EVEN");\
    lua_pushnumber(L, GL_FRACTIONAL_ODD);\
    lua_setfield(L, -2, "FRACTIONAL_ODD");\
    lua_pushnumber(L, GL_FRAGMENT_INTERPOLATION_OFFSET_BITS);\
    lua_setfield(L, -2, "FRAGMENT_INTERPOLATION_OFFSET_BITS");\
    lua_pushnumber(L, GL_GEOMETRY_SHADER_INVOCATIONS);\
    lua_setfield(L, -2, "GEOMETRY_SHADER_INVOCATIONS");\
    lua_pushnumber(L, GL_INT_SAMPLER_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "INT_SAMPLER_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_ISOLINES);\
    lua_setfield(L, -2, "ISOLINES");\
    lua_pushnumber(L, GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_INTERPOLATION_OFFSET);\
    lua_setfield(L, -2, "MAX_FRAGMENT_INTERPOLATION_OFFSET");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_SHADER_INVOCATIONS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_SHADER_INVOCATIONS");\
    lua_pushnumber(L, GL_MAX_PATCH_VERTICES);\
    lua_setfield(L, -2, "MAX_PATCH_VERTICES");\
    lua_pushnumber(L, GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET);\
    lua_setfield(L, -2, "MAX_PROGRAM_TEXTURE_GATHER_OFFSET");\
    lua_pushnumber(L, GL_MAX_SUBROUTINES);\
    lua_setfield(L, -2, "MAX_SUBROUTINES");\
    lua_pushnumber(L, GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS);\
    lua_setfield(L, -2, "MAX_SUBROUTINE_UNIFORM_LOCATIONS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_INPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_INPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_OUTPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_INPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_OUTPUT_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TESS_GEN_LEVEL);\
    lua_setfield(L, -2, "MAX_TESS_GEN_LEVEL");\
    lua_pushnumber(L, GL_MAX_TESS_PATCH_COMPONENTS);\
    lua_setfield(L, -2, "MAX_TESS_PATCH_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_TRANSFORM_FEEDBACK_BUFFERS);\
    lua_setfield(L, -2, "MAX_TRANSFORM_FEEDBACK_BUFFERS");\
    lua_pushnumber(L, GL_MAX_VERTEX_STREAMS);\
    lua_setfield(L, -2, "MAX_VERTEX_STREAMS");\
    lua_pushnumber(L, GL_MIN_FRAGMENT_INTERPOLATION_OFFSET);\
    lua_setfield(L, -2, "MIN_FRAGMENT_INTERPOLATION_OFFSET");\
    lua_pushnumber(L, GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET);\
    lua_setfield(L, -2, "MIN_PROGRAM_TEXTURE_GATHER_OFFSET");\
    lua_pushnumber(L, GL_MIN_SAMPLE_SHADING_VALUE);\
    lua_setfield(L, -2, "MIN_SAMPLE_SHADING_VALUE");\
    lua_pushnumber(L, GL_NUM_COMPATIBLE_SUBROUTINES);\
    lua_setfield(L, -2, "NUM_COMPATIBLE_SUBROUTINES");\
    lua_pushnumber(L, GL_PATCHES);\
    lua_setfield(L, -2, "PATCHES");\
    lua_pushnumber(L, GL_PATCH_DEFAULT_INNER_LEVEL);\
    lua_setfield(L, -2, "PATCH_DEFAULT_INNER_LEVEL");\
    lua_pushnumber(L, GL_PATCH_DEFAULT_OUTER_LEVEL);\
    lua_setfield(L, -2, "PATCH_DEFAULT_OUTER_LEVEL");\
    lua_pushnumber(L, GL_PATCH_VERTICES);\
    lua_setfield(L, -2, "PATCH_VERTICES");\
    lua_pushnumber(L, GL_PROXY_TEXTURE_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "PROXY_TEXTURE_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_SAMPLER_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "SAMPLER_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW);\
    lua_setfield(L, -2, "SAMPLER_CUBE_MAP_ARRAY_SHADOW");\
    lua_pushnumber(L, GL_SAMPLE_SHADING);\
    lua_setfield(L, -2, "SAMPLE_SHADING");\
    lua_pushnumber(L, GL_TESS_CONTROL_OUTPUT_VERTICES);\
    lua_setfield(L, -2, "TESS_CONTROL_OUTPUT_VERTICES");\
    lua_pushnumber(L, GL_TESS_CONTROL_SHADER);\
    lua_setfield(L, -2, "TESS_CONTROL_SHADER");\
    lua_pushnumber(L, GL_TESS_EVALUATION_SHADER);\
    lua_setfield(L, -2, "TESS_EVALUATION_SHADER");\
    lua_pushnumber(L, GL_TESS_GEN_MODE);\
    lua_setfield(L, -2, "TESS_GEN_MODE");\
    lua_pushnumber(L, GL_TESS_GEN_POINT_MODE);\
    lua_setfield(L, -2, "TESS_GEN_POINT_MODE");\
    lua_pushnumber(L, GL_TESS_GEN_SPACING);\
    lua_setfield(L, -2, "TESS_GEN_SPACING");\
    lua_pushnumber(L, GL_TESS_GEN_VERTEX_ORDER);\
    lua_setfield(L, -2, "TESS_GEN_VERTEX_ORDER");\
    lua_pushnumber(L, GL_TEXTURE_BINDING_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_BINDING_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_TEXTURE_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "TEXTURE_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BINDING);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BINDING");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_ACTIVE");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_PAUSED");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER");\
    lua_pushnumber(L, GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_ACTIVE_PROGRAM);\
    lua_setfield(L, -2, "ACTIVE_PROGRAM");\
    lua_pushnumber(L, GL_ALL_SHADER_BITS);\
    lua_setfield(L, -2, "ALL_SHADER_BITS");\
    lua_pushnumber(L, GL_FIXED);\
    lua_setfield(L, -2, "FIXED");\
    lua_pushnumber(L, GL_FRAGMENT_SHADER_BIT);\
    lua_setfield(L, -2, "FRAGMENT_SHADER_BIT");\
    lua_pushnumber(L, GL_GEOMETRY_SHADER_BIT);\
    lua_setfield(L, -2, "GEOMETRY_SHADER_BIT");\
    lua_pushnumber(L, GL_HIGH_FLOAT);\
    lua_setfield(L, -2, "HIGH_FLOAT");\
    lua_pushnumber(L, GL_HIGH_INT);\
    lua_setfield(L, -2, "HIGH_INT");\
    lua_pushnumber(L, GL_IMPLEMENTATION_COLOR_READ_FORMAT);\
    lua_setfield(L, -2, "IMPLEMENTATION_COLOR_READ_FORMAT");\
    lua_pushnumber(L, GL_IMPLEMENTATION_COLOR_READ_TYPE);\
    lua_setfield(L, -2, "IMPLEMENTATION_COLOR_READ_TYPE");\
    lua_pushnumber(L, GL_LAYER_PROVOKING_VERTEX);\
    lua_setfield(L, -2, "LAYER_PROVOKING_VERTEX");\
    lua_pushnumber(L, GL_LOW_FLOAT);\
    lua_setfield(L, -2, "LOW_FLOAT");\
    lua_pushnumber(L, GL_LOW_INT);\
    lua_setfield(L, -2, "LOW_INT");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_UNIFORM_VECTORS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_UNIFORM_VECTORS");\
    lua_pushnumber(L, GL_MAX_VARYING_VECTORS);\
    lua_setfield(L, -2, "MAX_VARYING_VECTORS");\
    lua_pushnumber(L, GL_MAX_VERTEX_UNIFORM_VECTORS);\
    lua_setfield(L, -2, "MAX_VERTEX_UNIFORM_VECTORS");\
    lua_pushnumber(L, GL_MAX_VIEWPORTS);\
    lua_setfield(L, -2, "MAX_VIEWPORTS");\
    lua_pushnumber(L, GL_MEDIUM_FLOAT);\
    lua_setfield(L, -2, "MEDIUM_FLOAT");\
    lua_pushnumber(L, GL_MEDIUM_INT);\
    lua_setfield(L, -2, "MEDIUM_INT");\
    lua_pushnumber(L, GL_NUM_PROGRAM_BINARY_FORMATS);\
    lua_setfield(L, -2, "NUM_PROGRAM_BINARY_FORMATS");\
    lua_pushnumber(L, GL_NUM_SHADER_BINARY_FORMATS);\
    lua_setfield(L, -2, "NUM_SHADER_BINARY_FORMATS");\
    lua_pushnumber(L, GL_PROGRAM_BINARY_FORMATS);\
    lua_setfield(L, -2, "PROGRAM_BINARY_FORMATS");\
    lua_pushnumber(L, GL_PROGRAM_BINARY_LENGTH);\
    lua_setfield(L, -2, "PROGRAM_BINARY_LENGTH");\
    lua_pushnumber(L, GL_PROGRAM_BINARY_RETRIEVABLE_HINT);\
    lua_setfield(L, -2, "PROGRAM_BINARY_RETRIEVABLE_HINT");\
    lua_pushnumber(L, GL_PROGRAM_PIPELINE_BINDING);\
    lua_setfield(L, -2, "PROGRAM_PIPELINE_BINDING");\
    lua_pushnumber(L, GL_PROGRAM_SEPARABLE);\
    lua_setfield(L, -2, "PROGRAM_SEPARABLE");\
    lua_pushnumber(L, GL_RGB565);\
    lua_setfield(L, -2, "RGB565");\
    lua_pushnumber(L, GL_SHADER_BINARY_FORMATS);\
    lua_setfield(L, -2, "SHADER_BINARY_FORMATS");\
    lua_pushnumber(L, GL_SHADER_COMPILER);\
    lua_setfield(L, -2, "SHADER_COMPILER");\
    lua_pushnumber(L, GL_TESS_CONTROL_SHADER_BIT);\
    lua_setfield(L, -2, "TESS_CONTROL_SHADER_BIT");\
    lua_pushnumber(L, GL_TESS_EVALUATION_SHADER_BIT);\
    lua_setfield(L, -2, "TESS_EVALUATION_SHADER_BIT");\
    lua_pushnumber(L, GL_UNDEFINED_VERTEX);\
    lua_setfield(L, -2, "UNDEFINED_VERTEX");\
    lua_pushnumber(L, GL_VERTEX_SHADER_BIT);\
    lua_setfield(L, -2, "VERTEX_SHADER_BIT");\
    lua_pushnumber(L, GL_VIEWPORT_BOUNDS_RANGE);\
    lua_setfield(L, -2, "VIEWPORT_BOUNDS_RANGE");\
    lua_pushnumber(L, GL_VIEWPORT_INDEX_PROVOKING_VERTEX);\
    lua_setfield(L, -2, "VIEWPORT_INDEX_PROVOKING_VERTEX");\
    lua_pushnumber(L, GL_VIEWPORT_SUBPIXEL_BITS);\
    lua_setfield(L, -2, "VIEWPORT_SUBPIXEL_BITS");\
    lua_pushnumber(L, GL_ACTIVE_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "ACTIVE_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_ALL_BARRIER_BITS);\
    lua_setfield(L, -2, "ALL_BARRIER_BITS");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BARRIER_BIT);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BARRIER_BIT");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_BINDING);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_BINDING");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_DATA_SIZE");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_SIZE);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_SIZE");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_START);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_START");\
    lua_pushnumber(L, GL_BUFFER_UPDATE_BARRIER_BIT);\
    lua_setfield(L, -2, "BUFFER_UPDATE_BARRIER_BIT");\
    lua_pushnumber(L, GL_COMMAND_BARRIER_BIT);\
    lua_setfield(L, -2, "COMMAND_BARRIER_BIT");\
    lua_pushnumber(L, GL_COMPRESSED_RGBA_BPTC_UNORM);\
    lua_setfield(L, -2, "COMPRESSED_RGBA_BPTC_UNORM");\
    lua_pushnumber(L, GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT);\
    lua_setfield(L, -2, "COMPRESSED_RGB_BPTC_SIGNED_FLOAT");\
    lua_pushnumber(L, GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT);\
    lua_setfield(L, -2, "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT");\
    lua_pushnumber(L, GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM);\
    lua_setfield(L, -2, "COMPRESSED_SRGB_ALPHA_BPTC_UNORM");\
    lua_pushnumber(L, GL_COPY_READ_BUFFER_BINDING);\
    lua_setfield(L, -2, "COPY_READ_BUFFER_BINDING");\
    lua_pushnumber(L, GL_COPY_WRITE_BUFFER_BINDING);\
    lua_setfield(L, -2, "COPY_WRITE_BUFFER_BINDING");\
    lua_pushnumber(L, GL_ELEMENT_ARRAY_BARRIER_BIT);\
    lua_setfield(L, -2, "ELEMENT_ARRAY_BARRIER_BIT");\
    lua_pushnumber(L, GL_FRAMEBUFFER_BARRIER_BIT);\
    lua_setfield(L, -2, "FRAMEBUFFER_BARRIER_BIT");\
    lua_pushnumber(L, GL_IMAGE_1D);\
    lua_setfield(L, -2, "IMAGE_1D");\
    lua_pushnumber(L, GL_IMAGE_1D_ARRAY);\
    lua_setfield(L, -2, "IMAGE_1D_ARRAY");\
    lua_pushnumber(L, GL_IMAGE_2D);\
    lua_setfield(L, -2, "IMAGE_2D");\
    lua_pushnumber(L, GL_IMAGE_2D_ARRAY);\
    lua_setfield(L, -2, "IMAGE_2D_ARRAY");\
    lua_pushnumber(L, GL_IMAGE_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "IMAGE_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_IMAGE_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "IMAGE_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_IMAGE_2D_RECT);\
    lua_setfield(L, -2, "IMAGE_2D_RECT");\
    lua_pushnumber(L, GL_IMAGE_3D);\
    lua_setfield(L, -2, "IMAGE_3D");\
    lua_pushnumber(L, GL_IMAGE_BINDING_ACCESS);\
    lua_setfield(L, -2, "IMAGE_BINDING_ACCESS");\
    lua_pushnumber(L, GL_IMAGE_BINDING_FORMAT);\
    lua_setfield(L, -2, "IMAGE_BINDING_FORMAT");\
    lua_pushnumber(L, GL_IMAGE_BINDING_LAYER);\
    lua_setfield(L, -2, "IMAGE_BINDING_LAYER");\
    lua_pushnumber(L, GL_IMAGE_BINDING_LAYERED);\
    lua_setfield(L, -2, "IMAGE_BINDING_LAYERED");\
    lua_pushnumber(L, GL_IMAGE_BINDING_LEVEL);\
    lua_setfield(L, -2, "IMAGE_BINDING_LEVEL");\
    lua_pushnumber(L, GL_IMAGE_BINDING_NAME);\
    lua_setfield(L, -2, "IMAGE_BINDING_NAME");\
    lua_pushnumber(L, GL_IMAGE_BUFFER);\
    lua_setfield(L, -2, "IMAGE_BUFFER");\
    lua_pushnumber(L, GL_IMAGE_CUBE);\
    lua_setfield(L, -2, "IMAGE_CUBE");\
    lua_pushnumber(L, GL_IMAGE_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "IMAGE_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS);\
    lua_setfield(L, -2, "IMAGE_FORMAT_COMPATIBILITY_BY_CLASS");\
    lua_pushnumber(L, GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE);\
    lua_setfield(L, -2, "IMAGE_FORMAT_COMPATIBILITY_BY_SIZE");\
    lua_pushnumber(L, GL_IMAGE_FORMAT_COMPATIBILITY_TYPE);\
    lua_setfield(L, -2, "IMAGE_FORMAT_COMPATIBILITY_TYPE");\
    lua_pushnumber(L, GL_INT_IMAGE_1D);\
    lua_setfield(L, -2, "INT_IMAGE_1D");\
    lua_pushnumber(L, GL_INT_IMAGE_1D_ARRAY);\
    lua_setfield(L, -2, "INT_IMAGE_1D_ARRAY");\
    lua_pushnumber(L, GL_INT_IMAGE_2D);\
    lua_setfield(L, -2, "INT_IMAGE_2D");\
    lua_pushnumber(L, GL_INT_IMAGE_2D_ARRAY);\
    lua_setfield(L, -2, "INT_IMAGE_2D_ARRAY");\
    lua_pushnumber(L, GL_INT_IMAGE_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "INT_IMAGE_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "INT_IMAGE_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_INT_IMAGE_2D_RECT);\
    lua_setfield(L, -2, "INT_IMAGE_2D_RECT");\
    lua_pushnumber(L, GL_INT_IMAGE_3D);\
    lua_setfield(L, -2, "INT_IMAGE_3D");\
    lua_pushnumber(L, GL_INT_IMAGE_BUFFER);\
    lua_setfield(L, -2, "INT_IMAGE_BUFFER");\
    lua_pushnumber(L, GL_INT_IMAGE_CUBE);\
    lua_setfield(L, -2, "INT_IMAGE_CUBE");\
    lua_pushnumber(L, GL_INT_IMAGE_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "INT_IMAGE_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS);\
    lua_setfield(L, -2, "MAX_ATOMIC_COUNTER_BUFFER_BINDINGS");\
    lua_pushnumber(L, GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE);\
    lua_setfield(L, -2, "MAX_ATOMIC_COUNTER_BUFFER_SIZE");\
    lua_pushnumber(L, GL_MAX_COMBINED_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "MAX_COMBINED_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "MAX_COMBINED_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_MAX_COMBINED_IMAGE_UNIFORMS);\
    lua_setfield(L, -2, "MAX_COMBINED_IMAGE_UNIFORMS");\
    lua_pushnumber(L, GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS);\
    lua_setfield(L, -2, "MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_IMAGE_UNIFORMS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_IMAGE_UNIFORMS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_IMAGE_UNIFORMS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_IMAGE_UNIFORMS");\
    lua_pushnumber(L, GL_MAX_IMAGE_SAMPLES);\
    lua_setfield(L, -2, "MAX_IMAGE_SAMPLES");\
    lua_pushnumber(L, GL_MAX_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_IMAGE_UNIFORMS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_IMAGE_UNIFORMS");\
    lua_pushnumber(L, GL_MAX_VERTEX_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "MAX_VERTEX_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "MAX_VERTEX_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_MAX_VERTEX_IMAGE_UNIFORMS);\
    lua_setfield(L, -2, "MAX_VERTEX_IMAGE_UNIFORMS");\
    lua_pushnumber(L, GL_MIN_MAP_BUFFER_ALIGNMENT);\
    lua_setfield(L, -2, "MIN_MAP_BUFFER_ALIGNMENT");\
    lua_pushnumber(L, GL_NUM_SAMPLE_COUNTS);\
    lua_setfield(L, -2, "NUM_SAMPLE_COUNTS");\
    lua_pushnumber(L, GL_PACK_COMPRESSED_BLOCK_DEPTH);\
    lua_setfield(L, -2, "PACK_COMPRESSED_BLOCK_DEPTH");\
    lua_pushnumber(L, GL_PACK_COMPRESSED_BLOCK_HEIGHT);\
    lua_setfield(L, -2, "PACK_COMPRESSED_BLOCK_HEIGHT");\
    lua_pushnumber(L, GL_PACK_COMPRESSED_BLOCK_SIZE);\
    lua_setfield(L, -2, "PACK_COMPRESSED_BLOCK_SIZE");\
    lua_pushnumber(L, GL_PACK_COMPRESSED_BLOCK_WIDTH);\
    lua_setfield(L, -2, "PACK_COMPRESSED_BLOCK_WIDTH");\
    lua_pushnumber(L, GL_PIXEL_BUFFER_BARRIER_BIT);\
    lua_setfield(L, -2, "PIXEL_BUFFER_BARRIER_BIT");\
    lua_pushnumber(L, GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);\
    lua_setfield(L, -2, "SHADER_IMAGE_ACCESS_BARRIER_BIT");\
    lua_pushnumber(L, GL_TEXTURE_FETCH_BARRIER_BIT);\
    lua_setfield(L, -2, "TEXTURE_FETCH_BARRIER_BIT");\
    lua_pushnumber(L, GL_TEXTURE_IMMUTABLE_FORMAT);\
    lua_setfield(L, -2, "TEXTURE_IMMUTABLE_FORMAT");\
    lua_pushnumber(L, GL_TEXTURE_UPDATE_BARRIER_BIT);\
    lua_setfield(L, -2, "TEXTURE_UPDATE_BARRIER_BIT");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_ACTIVE);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_ACTIVE");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BARRIER_BIT);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BARRIER_BIT");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_PAUSED);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_PAUSED");\
    lua_pushnumber(L, GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX);\
    lua_setfield(L, -2, "UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX");\
    lua_pushnumber(L, GL_UNIFORM_BARRIER_BIT);\
    lua_setfield(L, -2, "UNIFORM_BARRIER_BIT");\
    lua_pushnumber(L, GL_UNPACK_COMPRESSED_BLOCK_DEPTH);\
    lua_setfield(L, -2, "UNPACK_COMPRESSED_BLOCK_DEPTH");\
    lua_pushnumber(L, GL_UNPACK_COMPRESSED_BLOCK_HEIGHT);\
    lua_setfield(L, -2, "UNPACK_COMPRESSED_BLOCK_HEIGHT");\
    lua_pushnumber(L, GL_UNPACK_COMPRESSED_BLOCK_SIZE);\
    lua_setfield(L, -2, "UNPACK_COMPRESSED_BLOCK_SIZE");\
    lua_pushnumber(L, GL_UNPACK_COMPRESSED_BLOCK_WIDTH);\
    lua_setfield(L, -2, "UNPACK_COMPRESSED_BLOCK_WIDTH");\
    lua_pushnumber(L, GL_UNSIGNED_INT_ATOMIC_COUNTER);\
    lua_setfield(L, -2, "UNSIGNED_INT_ATOMIC_COUNTER");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_1D);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_1D");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_1D_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_1D_ARRAY");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_2D);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_2D");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_2D_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_2D_ARRAY");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_2D_MULTISAMPLE");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_2D_RECT);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_2D_RECT");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_3D);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_3D");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_BUFFER);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_BUFFER");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_CUBE);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_CUBE");\
    lua_pushnumber(L, GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY);\
    lua_setfield(L, -2, "UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_BARRIER_BIT");\
    lua_pushnumber(L, GL_ACTIVE_RESOURCES);\
    lua_setfield(L, -2, "ACTIVE_RESOURCES");\
    lua_pushnumber(L, GL_ACTIVE_VARIABLES);\
    lua_setfield(L, -2, "ACTIVE_VARIABLES");\
    lua_pushnumber(L, GL_ANY_SAMPLES_PASSED_CONSERVATIVE);\
    lua_setfield(L, -2, "ANY_SAMPLES_PASSED_CONSERVATIVE");\
    lua_pushnumber(L, GL_ARRAY_SIZE);\
    lua_setfield(L, -2, "ARRAY_SIZE");\
    lua_pushnumber(L, GL_ARRAY_STRIDE);\
    lua_setfield(L, -2, "ARRAY_STRIDE");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_INDEX);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_INDEX");\
    lua_pushnumber(L, GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER);\
    lua_setfield(L, -2, "ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER");\
    lua_pushnumber(L, GL_AUTO_GENERATE_MIPMAP);\
    lua_setfield(L, -2, "AUTO_GENERATE_MIPMAP");\
    lua_pushnumber(L, GL_BLOCK_INDEX);\
    lua_setfield(L, -2, "BLOCK_INDEX");\
    lua_pushnumber(L, GL_BUFFER);\
    lua_setfield(L, -2, "BUFFER");\
    lua_pushnumber(L, GL_BUFFER_BINDING);\
    lua_setfield(L, -2, "BUFFER_BINDING");\
    lua_pushnumber(L, GL_BUFFER_DATA_SIZE);\
    lua_setfield(L, -2, "BUFFER_DATA_SIZE");\
    lua_pushnumber(L, GL_BUFFER_VARIABLE);\
    lua_setfield(L, -2, "BUFFER_VARIABLE");\
    lua_pushnumber(L, GL_CAVEAT_SUPPORT);\
    lua_setfield(L, -2, "CAVEAT_SUPPORT");\
    lua_pushnumber(L, GL_CLEAR_BUFFER);\
    lua_setfield(L, -2, "CLEAR_BUFFER");\
    lua_pushnumber(L, GL_COLOR_COMPONENTS);\
    lua_setfield(L, -2, "COLOR_COMPONENTS");\
    lua_pushnumber(L, GL_COLOR_ENCODING);\
    lua_setfield(L, -2, "COLOR_ENCODING");\
    lua_pushnumber(L, GL_COLOR_RENDERABLE);\
    lua_setfield(L, -2, "COLOR_RENDERABLE");\
    lua_pushnumber(L, GL_COMPRESSED_R11_EAC);\
    lua_setfield(L, -2, "COMPRESSED_R11_EAC");\
    lua_pushnumber(L, GL_COMPRESSED_RG11_EAC);\
    lua_setfield(L, -2, "COMPRESSED_RG11_EAC");\
    lua_pushnumber(L, GL_COMPRESSED_RGB8_ETC2);\
    lua_setfield(L, -2, "COMPRESSED_RGB8_ETC2");\
    lua_pushnumber(L, GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2);\
    lua_setfield(L, -2, "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2");\
    lua_pushnumber(L, GL_COMPRESSED_RGBA8_ETC2_EAC);\
    lua_setfield(L, -2, "COMPRESSED_RGBA8_ETC2_EAC");\
    lua_pushnumber(L, GL_COMPRESSED_SIGNED_R11_EAC);\
    lua_setfield(L, -2, "COMPRESSED_SIGNED_R11_EAC");\
    lua_pushnumber(L, GL_COMPRESSED_SIGNED_RG11_EAC);\
    lua_setfield(L, -2, "COMPRESSED_SIGNED_RG11_EAC");\
    lua_pushnumber(L, GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC);\
    lua_setfield(L, -2, "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC");\
    lua_pushnumber(L, GL_COMPRESSED_SRGB8_ETC2);\
    lua_setfield(L, -2, "COMPRESSED_SRGB8_ETC2");\
    lua_pushnumber(L, GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2);\
    lua_setfield(L, -2, "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2");\
    lua_pushnumber(L, GL_COMPUTE_SHADER);\
    lua_setfield(L, -2, "COMPUTE_SHADER");\
    lua_pushnumber(L, GL_COMPUTE_SHADER_BIT);\
    lua_setfield(L, -2, "COMPUTE_SHADER_BIT");\
    lua_pushnumber(L, GL_COMPUTE_SUBROUTINE);\
    lua_setfield(L, -2, "COMPUTE_SUBROUTINE");\
    lua_pushnumber(L, GL_COMPUTE_SUBROUTINE_UNIFORM);\
    lua_setfield(L, -2, "COMPUTE_SUBROUTINE_UNIFORM");\
    lua_pushnumber(L, GL_COMPUTE_TEXTURE);\
    lua_setfield(L, -2, "COMPUTE_TEXTURE");\
    lua_pushnumber(L, GL_COMPUTE_WORK_GROUP_SIZE);\
    lua_setfield(L, -2, "COMPUTE_WORK_GROUP_SIZE");\
    lua_pushnumber(L, GL_CONTEXT_FLAG_DEBUG_BIT);\
    lua_setfield(L, -2, "CONTEXT_FLAG_DEBUG_BIT");\
    lua_pushnumber(L, GL_DEBUG_CALLBACK_FUNCTION);\
    lua_setfield(L, -2, "DEBUG_CALLBACK_FUNCTION");\
    lua_pushnumber(L, GL_DEBUG_CALLBACK_USER_PARAM);\
    lua_setfield(L, -2, "DEBUG_CALLBACK_USER_PARAM");\
    lua_pushnumber(L, GL_DEBUG_GROUP_STACK_DEPTH);\
    lua_setfield(L, -2, "DEBUG_GROUP_STACK_DEPTH");\
    lua_pushnumber(L, GL_DEBUG_LOGGED_MESSAGES);\
    lua_setfield(L, -2, "DEBUG_LOGGED_MESSAGES");\
    lua_pushnumber(L, GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH);\
    lua_setfield(L, -2, "DEBUG_NEXT_LOGGED_MESSAGE_LENGTH");\
    lua_pushnumber(L, GL_DEBUG_OUTPUT);\
    lua_setfield(L, -2, "DEBUG_OUTPUT");\
    lua_pushnumber(L, GL_DEBUG_OUTPUT_SYNCHRONOUS);\
    lua_setfield(L, -2, "DEBUG_OUTPUT_SYNCHRONOUS");\
    lua_pushnumber(L, GL_DEBUG_SEVERITY_HIGH);\
    lua_setfield(L, -2, "DEBUG_SEVERITY_HIGH");\
    lua_pushnumber(L, GL_DEBUG_SEVERITY_LOW);\
    lua_setfield(L, -2, "DEBUG_SEVERITY_LOW");\
    lua_pushnumber(L, GL_DEBUG_SEVERITY_MEDIUM);\
    lua_setfield(L, -2, "DEBUG_SEVERITY_MEDIUM");\
    lua_pushnumber(L, GL_DEBUG_SEVERITY_NOTIFICATION);\
    lua_setfield(L, -2, "DEBUG_SEVERITY_NOTIFICATION");\
    lua_pushnumber(L, GL_DEBUG_SOURCE_API);\
    lua_setfield(L, -2, "DEBUG_SOURCE_API");\
    lua_pushnumber(L, GL_DEBUG_SOURCE_APPLICATION);\
    lua_setfield(L, -2, "DEBUG_SOURCE_APPLICATION");\
    lua_pushnumber(L, GL_DEBUG_SOURCE_OTHER);\
    lua_setfield(L, -2, "DEBUG_SOURCE_OTHER");\
    lua_pushnumber(L, GL_DEBUG_SOURCE_SHADER_COMPILER);\
    lua_setfield(L, -2, "DEBUG_SOURCE_SHADER_COMPILER");\
    lua_pushnumber(L, GL_DEBUG_SOURCE_THIRD_PARTY);\
    lua_setfield(L, -2, "DEBUG_SOURCE_THIRD_PARTY");\
    lua_pushnumber(L, GL_DEBUG_SOURCE_WINDOW_SYSTEM);\
    lua_setfield(L, -2, "DEBUG_SOURCE_WINDOW_SYSTEM");\
    lua_pushnumber(L, GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR);\
    lua_setfield(L, -2, "DEBUG_TYPE_DEPRECATED_BEHAVIOR");\
    lua_pushnumber(L, GL_DEBUG_TYPE_ERROR);\
    lua_setfield(L, -2, "DEBUG_TYPE_ERROR");\
    lua_pushnumber(L, GL_DEBUG_TYPE_MARKER);\
    lua_setfield(L, -2, "DEBUG_TYPE_MARKER");\
    lua_pushnumber(L, GL_DEBUG_TYPE_OTHER);\
    lua_setfield(L, -2, "DEBUG_TYPE_OTHER");\
    lua_pushnumber(L, GL_DEBUG_TYPE_PERFORMANCE);\
    lua_setfield(L, -2, "DEBUG_TYPE_PERFORMANCE");\
    lua_pushnumber(L, GL_DEBUG_TYPE_POP_GROUP);\
    lua_setfield(L, -2, "DEBUG_TYPE_POP_GROUP");\
    lua_pushnumber(L, GL_DEBUG_TYPE_PORTABILITY);\
    lua_setfield(L, -2, "DEBUG_TYPE_PORTABILITY");\
    lua_pushnumber(L, GL_DEBUG_TYPE_PUSH_GROUP);\
    lua_setfield(L, -2, "DEBUG_TYPE_PUSH_GROUP");\
    lua_pushnumber(L, GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR);\
    lua_setfield(L, -2, "DEBUG_TYPE_UNDEFINED_BEHAVIOR");\
    lua_pushnumber(L, GL_DEPTH_COMPONENTS);\
    lua_setfield(L, -2, "DEPTH_COMPONENTS");\
    lua_pushnumber(L, GL_DEPTH_RENDERABLE);\
    lua_setfield(L, -2, "DEPTH_RENDERABLE");\
    lua_pushnumber(L, GL_DEPTH_STENCIL_TEXTURE_MODE);\
    lua_setfield(L, -2, "DEPTH_STENCIL_TEXTURE_MODE");\
    lua_pushnumber(L, GL_DISPATCH_INDIRECT_BUFFER);\
    lua_setfield(L, -2, "DISPATCH_INDIRECT_BUFFER");\
    lua_pushnumber(L, GL_DISPATCH_INDIRECT_BUFFER_BINDING);\
    lua_setfield(L, -2, "DISPATCH_INDIRECT_BUFFER_BINDING");\
    lua_pushnumber(L, GL_FILTER);\
    lua_setfield(L, -2, "FILTER");\
    lua_pushnumber(L, GL_FRAGMENT_SUBROUTINE);\
    lua_setfield(L, -2, "FRAGMENT_SUBROUTINE");\
    lua_pushnumber(L, GL_FRAGMENT_SUBROUTINE_UNIFORM);\
    lua_setfield(L, -2, "FRAGMENT_SUBROUTINE_UNIFORM");\
    lua_pushnumber(L, GL_FRAGMENT_TEXTURE);\
    lua_setfield(L, -2, "FRAGMENT_TEXTURE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_BLEND);\
    lua_setfield(L, -2, "FRAMEBUFFER_BLEND");\
    lua_pushnumber(L, GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS);\
    lua_setfield(L, -2, "FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS");\
    lua_pushnumber(L, GL_FRAMEBUFFER_DEFAULT_HEIGHT);\
    lua_setfield(L, -2, "FRAMEBUFFER_DEFAULT_HEIGHT");\
    lua_pushnumber(L, GL_FRAMEBUFFER_DEFAULT_LAYERS);\
    lua_setfield(L, -2, "FRAMEBUFFER_DEFAULT_LAYERS");\
    lua_pushnumber(L, GL_FRAMEBUFFER_DEFAULT_SAMPLES);\
    lua_setfield(L, -2, "FRAMEBUFFER_DEFAULT_SAMPLES");\
    lua_pushnumber(L, GL_FRAMEBUFFER_DEFAULT_WIDTH);\
    lua_setfield(L, -2, "FRAMEBUFFER_DEFAULT_WIDTH");\
    lua_pushnumber(L, GL_FRAMEBUFFER_RENDERABLE);\
    lua_setfield(L, -2, "FRAMEBUFFER_RENDERABLE");\
    lua_pushnumber(L, GL_FRAMEBUFFER_RENDERABLE_LAYERED);\
    lua_setfield(L, -2, "FRAMEBUFFER_RENDERABLE_LAYERED");\
    lua_pushnumber(L, GL_FULL_SUPPORT);\
    lua_setfield(L, -2, "FULL_SUPPORT");\
    lua_pushnumber(L, GL_GEOMETRY_SUBROUTINE);\
    lua_setfield(L, -2, "GEOMETRY_SUBROUTINE");\
    lua_pushnumber(L, GL_GEOMETRY_SUBROUTINE_UNIFORM);\
    lua_setfield(L, -2, "GEOMETRY_SUBROUTINE_UNIFORM");\
    lua_pushnumber(L, GL_GEOMETRY_TEXTURE);\
    lua_setfield(L, -2, "GEOMETRY_TEXTURE");\
    lua_pushnumber(L, GL_GET_TEXTURE_IMAGE_FORMAT);\
    lua_setfield(L, -2, "GET_TEXTURE_IMAGE_FORMAT");\
    lua_pushnumber(L, GL_GET_TEXTURE_IMAGE_TYPE);\
    lua_setfield(L, -2, "GET_TEXTURE_IMAGE_TYPE");\
    lua_pushnumber(L, GL_IMAGE_CLASS_10_10_10_2);\
    lua_setfield(L, -2, "IMAGE_CLASS_10_10_10_2");\
    lua_pushnumber(L, GL_IMAGE_CLASS_11_11_10);\
    lua_setfield(L, -2, "IMAGE_CLASS_11_11_10");\
    lua_pushnumber(L, GL_IMAGE_CLASS_1_X_16);\
    lua_setfield(L, -2, "IMAGE_CLASS_1_X_16");\
    lua_pushnumber(L, GL_IMAGE_CLASS_1_X_32);\
    lua_setfield(L, -2, "IMAGE_CLASS_1_X_32");\
    lua_pushnumber(L, GL_IMAGE_CLASS_1_X_8);\
    lua_setfield(L, -2, "IMAGE_CLASS_1_X_8");\
    lua_pushnumber(L, GL_IMAGE_CLASS_2_X_16);\
    lua_setfield(L, -2, "IMAGE_CLASS_2_X_16");\
    lua_pushnumber(L, GL_IMAGE_CLASS_2_X_32);\
    lua_setfield(L, -2, "IMAGE_CLASS_2_X_32");\
    lua_pushnumber(L, GL_IMAGE_CLASS_2_X_8);\
    lua_setfield(L, -2, "IMAGE_CLASS_2_X_8");\
    lua_pushnumber(L, GL_IMAGE_CLASS_4_X_16);\
    lua_setfield(L, -2, "IMAGE_CLASS_4_X_16");\
    lua_pushnumber(L, GL_IMAGE_CLASS_4_X_32);\
    lua_setfield(L, -2, "IMAGE_CLASS_4_X_32");\
    lua_pushnumber(L, GL_IMAGE_CLASS_4_X_8);\
    lua_setfield(L, -2, "IMAGE_CLASS_4_X_8");\
    lua_pushnumber(L, GL_IMAGE_COMPATIBILITY_CLASS);\
    lua_setfield(L, -2, "IMAGE_COMPATIBILITY_CLASS");\
    lua_pushnumber(L, GL_IMAGE_PIXEL_FORMAT);\
    lua_setfield(L, -2, "IMAGE_PIXEL_FORMAT");\
    lua_pushnumber(L, GL_IMAGE_PIXEL_TYPE);\
    lua_setfield(L, -2, "IMAGE_PIXEL_TYPE");\
    lua_pushnumber(L, GL_IMAGE_TEXEL_SIZE);\
    lua_setfield(L, -2, "IMAGE_TEXEL_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_ALPHA_SIZE);\
    lua_setfield(L, -2, "INTERNALFORMAT_ALPHA_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_ALPHA_TYPE);\
    lua_setfield(L, -2, "INTERNALFORMAT_ALPHA_TYPE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_BLUE_SIZE);\
    lua_setfield(L, -2, "INTERNALFORMAT_BLUE_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_BLUE_TYPE);\
    lua_setfield(L, -2, "INTERNALFORMAT_BLUE_TYPE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_DEPTH_SIZE);\
    lua_setfield(L, -2, "INTERNALFORMAT_DEPTH_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_DEPTH_TYPE);\
    lua_setfield(L, -2, "INTERNALFORMAT_DEPTH_TYPE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_GREEN_SIZE);\
    lua_setfield(L, -2, "INTERNALFORMAT_GREEN_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_GREEN_TYPE);\
    lua_setfield(L, -2, "INTERNALFORMAT_GREEN_TYPE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_PREFERRED);\
    lua_setfield(L, -2, "INTERNALFORMAT_PREFERRED");\
    lua_pushnumber(L, GL_INTERNALFORMAT_RED_SIZE);\
    lua_setfield(L, -2, "INTERNALFORMAT_RED_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_RED_TYPE);\
    lua_setfield(L, -2, "INTERNALFORMAT_RED_TYPE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_SHARED_SIZE);\
    lua_setfield(L, -2, "INTERNALFORMAT_SHARED_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_STENCIL_SIZE);\
    lua_setfield(L, -2, "INTERNALFORMAT_STENCIL_SIZE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_STENCIL_TYPE);\
    lua_setfield(L, -2, "INTERNALFORMAT_STENCIL_TYPE");\
    lua_pushnumber(L, GL_INTERNALFORMAT_SUPPORTED);\
    lua_setfield(L, -2, "INTERNALFORMAT_SUPPORTED");\
    lua_pushnumber(L, GL_IS_PER_PATCH);\
    lua_setfield(L, -2, "IS_PER_PATCH");\
    lua_pushnumber(L, GL_IS_ROW_MAJOR);\
    lua_setfield(L, -2, "IS_ROW_MAJOR");\
    lua_pushnumber(L, GL_LOCATION);\
    lua_setfield(L, -2, "LOCATION");\
    lua_pushnumber(L, GL_LOCATION_INDEX);\
    lua_setfield(L, -2, "LOCATION_INDEX");\
    lua_pushnumber(L, GL_MANUAL_GENERATE_MIPMAP);\
    lua_setfield(L, -2, "MANUAL_GENERATE_MIPMAP");\
    lua_pushnumber(L, GL_MATRIX_STRIDE);\
    lua_setfield(L, -2, "MATRIX_STRIDE");\
    lua_pushnumber(L, GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_COMBINED_DIMENSIONS);\
    lua_setfield(L, -2, "MAX_COMBINED_DIMENSIONS");\
    lua_pushnumber(L, GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES);\
    lua_setfield(L, -2, "MAX_COMBINED_SHADER_OUTPUT_RESOURCES");\
    lua_pushnumber(L, GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS);\
    lua_setfield(L, -2, "MAX_COMBINED_SHADER_STORAGE_BLOCKS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_ATOMIC_COUNTERS);\
    lua_setfield(L, -2, "MAX_COMPUTE_ATOMIC_COUNTERS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS);\
    lua_setfield(L, -2, "MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_IMAGE_UNIFORMS);\
    lua_setfield(L, -2, "MAX_COMPUTE_IMAGE_UNIFORMS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS);\
    lua_setfield(L, -2, "MAX_COMPUTE_SHADER_STORAGE_BLOCKS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_SHARED_MEMORY_SIZE);\
    lua_setfield(L, -2, "MAX_COMPUTE_SHARED_MEMORY_SIZE");\
    lua_pushnumber(L, GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS);\
    lua_setfield(L, -2, "MAX_COMPUTE_TEXTURE_IMAGE_UNITS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_UNIFORM_BLOCKS);\
    lua_setfield(L, -2, "MAX_COMPUTE_UNIFORM_BLOCKS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_UNIFORM_COMPONENTS);\
    lua_setfield(L, -2, "MAX_COMPUTE_UNIFORM_COMPONENTS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_WORK_GROUP_COUNT);\
    lua_setfield(L, -2, "MAX_COMPUTE_WORK_GROUP_COUNT");\
    lua_pushnumber(L, GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS);\
    lua_setfield(L, -2, "MAX_COMPUTE_WORK_GROUP_INVOCATIONS");\
    lua_pushnumber(L, GL_MAX_COMPUTE_WORK_GROUP_SIZE);\
    lua_setfield(L, -2, "MAX_COMPUTE_WORK_GROUP_SIZE");\
    lua_pushnumber(L, GL_MAX_DEBUG_GROUP_STACK_DEPTH);\
    lua_setfield(L, -2, "MAX_DEBUG_GROUP_STACK_DEPTH");\
    lua_pushnumber(L, GL_MAX_DEBUG_LOGGED_MESSAGES);\
    lua_setfield(L, -2, "MAX_DEBUG_LOGGED_MESSAGES");\
    lua_pushnumber(L, GL_MAX_DEBUG_MESSAGE_LENGTH);\
    lua_setfield(L, -2, "MAX_DEBUG_MESSAGE_LENGTH");\
    lua_pushnumber(L, GL_MAX_DEPTH);\
    lua_setfield(L, -2, "MAX_DEPTH");\
    lua_pushnumber(L, GL_MAX_ELEMENT_INDEX);\
    lua_setfield(L, -2, "MAX_ELEMENT_INDEX");\
    lua_pushnumber(L, GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS);\
    lua_setfield(L, -2, "MAX_FRAGMENT_SHADER_STORAGE_BLOCKS");\
    lua_pushnumber(L, GL_MAX_FRAMEBUFFER_HEIGHT);\
    lua_setfield(L, -2, "MAX_FRAMEBUFFER_HEIGHT");\
    lua_pushnumber(L, GL_MAX_FRAMEBUFFER_LAYERS);\
    lua_setfield(L, -2, "MAX_FRAMEBUFFER_LAYERS");\
    lua_pushnumber(L, GL_MAX_FRAMEBUFFER_SAMPLES);\
    lua_setfield(L, -2, "MAX_FRAMEBUFFER_SAMPLES");\
    lua_pushnumber(L, GL_MAX_FRAMEBUFFER_WIDTH);\
    lua_setfield(L, -2, "MAX_FRAMEBUFFER_WIDTH");\
    lua_pushnumber(L, GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS);\
    lua_setfield(L, -2, "MAX_GEOMETRY_SHADER_STORAGE_BLOCKS");\
    lua_pushnumber(L, GL_MAX_HEIGHT);\
    lua_setfield(L, -2, "MAX_HEIGHT");\
    lua_pushnumber(L, GL_MAX_LABEL_LENGTH);\
    lua_setfield(L, -2, "MAX_LABEL_LENGTH");\
    lua_pushnumber(L, GL_MAX_LAYERS);\
    lua_setfield(L, -2, "MAX_LAYERS");\
    lua_pushnumber(L, GL_MAX_NAME_LENGTH);\
    lua_setfield(L, -2, "MAX_NAME_LENGTH");\
    lua_pushnumber(L, GL_MAX_NUM_ACTIVE_VARIABLES);\
    lua_setfield(L, -2, "MAX_NUM_ACTIVE_VARIABLES");\
    lua_pushnumber(L, GL_MAX_NUM_COMPATIBLE_SUBROUTINES);\
    lua_setfield(L, -2, "MAX_NUM_COMPATIBLE_SUBROUTINES");\
    lua_pushnumber(L, GL_MAX_SHADER_STORAGE_BLOCK_SIZE);\
    lua_setfield(L, -2, "MAX_SHADER_STORAGE_BLOCK_SIZE");\
    lua_pushnumber(L, GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS);\
    lua_setfield(L, -2, "MAX_SHADER_STORAGE_BUFFER_BINDINGS");\
    lua_pushnumber(L, GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS);\
    lua_setfield(L, -2, "MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS");\
    lua_pushnumber(L, GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS);\
    lua_setfield(L, -2, "MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS");\
    lua_pushnumber(L, GL_MAX_UNIFORM_LOCATIONS);\
    lua_setfield(L, -2, "MAX_UNIFORM_LOCATIONS");\
    lua_pushnumber(L, GL_MAX_VERTEX_ATTRIB_BINDINGS);\
    lua_setfield(L, -2, "MAX_VERTEX_ATTRIB_BINDINGS");\
    lua_pushnumber(L, GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET);\
    lua_setfield(L, -2, "MAX_VERTEX_ATTRIB_RELATIVE_OFFSET");\
    lua_pushnumber(L, GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS);\
    lua_setfield(L, -2, "MAX_VERTEX_SHADER_STORAGE_BLOCKS");\
    lua_pushnumber(L, GL_MAX_WIDTH);\
    lua_setfield(L, -2, "MAX_WIDTH");\
    lua_pushnumber(L, GL_MIPMAP);\
    lua_setfield(L, -2, "MIPMAP");\
    lua_pushnumber(L, GL_NAME_LENGTH);\
    lua_setfield(L, -2, "NAME_LENGTH");\
    lua_pushnumber(L, GL_NUM_ACTIVE_VARIABLES);\
    lua_setfield(L, -2, "NUM_ACTIVE_VARIABLES");\
    lua_pushnumber(L, GL_NUM_SHADING_LANGUAGE_VERSIONS);\
    lua_setfield(L, -2, "NUM_SHADING_LANGUAGE_VERSIONS");\
    lua_pushnumber(L, GL_OFFSET);\
    lua_setfield(L, -2, "OFFSET");\
    lua_pushnumber(L, GL_PRIMITIVE_RESTART_FIXED_INDEX);\
    lua_setfield(L, -2, "PRIMITIVE_RESTART_FIXED_INDEX");\
    lua_pushnumber(L, GL_PROGRAM);\
    lua_setfield(L, -2, "PROGRAM");\
    lua_pushnumber(L, GL_PROGRAM_INPUT);\
    lua_setfield(L, -2, "PROGRAM_INPUT");\
    lua_pushnumber(L, GL_PROGRAM_OUTPUT);\
    lua_setfield(L, -2, "PROGRAM_OUTPUT");\
    lua_pushnumber(L, GL_PROGRAM_PIPELINE);\
    lua_setfield(L, -2, "PROGRAM_PIPELINE");\
    lua_pushnumber(L, GL_QUERY);\
    lua_setfield(L, -2, "QUERY");\
    lua_pushnumber(L, GL_READ_PIXELS);\
    lua_setfield(L, -2, "READ_PIXELS");\
    lua_pushnumber(L, GL_READ_PIXELS_FORMAT);\
    lua_setfield(L, -2, "READ_PIXELS_FORMAT");\
    lua_pushnumber(L, GL_READ_PIXELS_TYPE);\
    lua_setfield(L, -2, "READ_PIXELS_TYPE");\
    lua_pushnumber(L, GL_REFERENCED_BY_COMPUTE_SHADER);\
    lua_setfield(L, -2, "REFERENCED_BY_COMPUTE_SHADER");\
    lua_pushnumber(L, GL_REFERENCED_BY_FRAGMENT_SHADER);\
    lua_setfield(L, -2, "REFERENCED_BY_FRAGMENT_SHADER");\
    lua_pushnumber(L, GL_REFERENCED_BY_GEOMETRY_SHADER);\
    lua_setfield(L, -2, "REFERENCED_BY_GEOMETRY_SHADER");\
    lua_pushnumber(L, GL_REFERENCED_BY_TESS_CONTROL_SHADER);\
    lua_setfield(L, -2, "REFERENCED_BY_TESS_CONTROL_SHADER");\
    lua_pushnumber(L, GL_REFERENCED_BY_TESS_EVALUATION_SHADER);\
    lua_setfield(L, -2, "REFERENCED_BY_TESS_EVALUATION_SHADER");\
    lua_pushnumber(L, GL_REFERENCED_BY_VERTEX_SHADER);\
    lua_setfield(L, -2, "REFERENCED_BY_VERTEX_SHADER");\
    lua_pushnumber(L, GL_SAMPLER);\
    lua_setfield(L, -2, "SAMPLER");\
    lua_pushnumber(L, GL_SHADER);\
    lua_setfield(L, -2, "SHADER");\
    lua_pushnumber(L, GL_SHADER_IMAGE_ATOMIC);\
    lua_setfield(L, -2, "SHADER_IMAGE_ATOMIC");\
    lua_pushnumber(L, GL_SHADER_IMAGE_LOAD);\
    lua_setfield(L, -2, "SHADER_IMAGE_LOAD");\
    lua_pushnumber(L, GL_SHADER_IMAGE_STORE);\
    lua_setfield(L, -2, "SHADER_IMAGE_STORE");\
    lua_pushnumber(L, GL_SHADER_STORAGE_BARRIER_BIT);\
    lua_setfield(L, -2, "SHADER_STORAGE_BARRIER_BIT");\
    lua_pushnumber(L, GL_SHADER_STORAGE_BLOCK);\
    lua_setfield(L, -2, "SHADER_STORAGE_BLOCK");\
    lua_pushnumber(L, GL_SHADER_STORAGE_BUFFER);\
    lua_setfield(L, -2, "SHADER_STORAGE_BUFFER");\
    lua_pushnumber(L, GL_SHADER_STORAGE_BUFFER_BINDING);\
    lua_setfield(L, -2, "SHADER_STORAGE_BUFFER_BINDING");\
    lua_pushnumber(L, GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT);\
    lua_setfield(L, -2, "SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT");\
    lua_pushnumber(L, GL_SHADER_STORAGE_BUFFER_SIZE);\
    lua_setfield(L, -2, "SHADER_STORAGE_BUFFER_SIZE");\
    lua_pushnumber(L, GL_SHADER_STORAGE_BUFFER_START);\
    lua_setfield(L, -2, "SHADER_STORAGE_BUFFER_START");\
    lua_pushnumber(L, GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST);\
    lua_setfield(L, -2, "SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST");\
    lua_pushnumber(L, GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE);\
    lua_setfield(L, -2, "SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE");\
    lua_pushnumber(L, GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST);\
    lua_setfield(L, -2, "SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST");\
    lua_pushnumber(L, GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE);\
    lua_setfield(L, -2, "SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE");\
    lua_pushnumber(L, GL_SRGB_READ);\
    lua_setfield(L, -2, "SRGB_READ");\
    lua_pushnumber(L, GL_SRGB_WRITE);\
    lua_setfield(L, -2, "SRGB_WRITE");\
    lua_pushnumber(L, GL_STENCIL_COMPONENTS);\
    lua_setfield(L, -2, "STENCIL_COMPONENTS");\
    lua_pushnumber(L, GL_STENCIL_RENDERABLE);\
    lua_setfield(L, -2, "STENCIL_RENDERABLE");\
    lua_pushnumber(L, GL_TESS_CONTROL_SUBROUTINE);\
    lua_setfield(L, -2, "TESS_CONTROL_SUBROUTINE");\
    lua_pushnumber(L, GL_TESS_CONTROL_SUBROUTINE_UNIFORM);\
    lua_setfield(L, -2, "TESS_CONTROL_SUBROUTINE_UNIFORM");\
    lua_pushnumber(L, GL_TESS_CONTROL_TEXTURE);\
    lua_setfield(L, -2, "TESS_CONTROL_TEXTURE");\
    lua_pushnumber(L, GL_TESS_EVALUATION_SUBROUTINE);\
    lua_setfield(L, -2, "TESS_EVALUATION_SUBROUTINE");\
    lua_pushnumber(L, GL_TESS_EVALUATION_SUBROUTINE_UNIFORM);\
    lua_setfield(L, -2, "TESS_EVALUATION_SUBROUTINE_UNIFORM");\
    lua_pushnumber(L, GL_TESS_EVALUATION_TEXTURE);\
    lua_setfield(L, -2, "TESS_EVALUATION_TEXTURE");\
    lua_pushnumber(L, GL_TEXTURE_BUFFER_OFFSET);\
    lua_setfield(L, -2, "TEXTURE_BUFFER_OFFSET");\
    lua_pushnumber(L, GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT);\
    lua_setfield(L, -2, "TEXTURE_BUFFER_OFFSET_ALIGNMENT");\
    lua_pushnumber(L, GL_TEXTURE_BUFFER_SIZE);\
    lua_setfield(L, -2, "TEXTURE_BUFFER_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT);\
    lua_setfield(L, -2, "TEXTURE_COMPRESSED_BLOCK_HEIGHT");\
    lua_pushnumber(L, GL_TEXTURE_COMPRESSED_BLOCK_SIZE);\
    lua_setfield(L, -2, "TEXTURE_COMPRESSED_BLOCK_SIZE");\
    lua_pushnumber(L, GL_TEXTURE_COMPRESSED_BLOCK_WIDTH);\
    lua_setfield(L, -2, "TEXTURE_COMPRESSED_BLOCK_WIDTH");\
    lua_pushnumber(L, GL_TEXTURE_GATHER);\
    lua_setfield(L, -2, "TEXTURE_GATHER");\
    lua_pushnumber(L, GL_TEXTURE_GATHER_SHADOW);\
    lua_setfield(L, -2, "TEXTURE_GATHER_SHADOW");\
    lua_pushnumber(L, GL_TEXTURE_IMAGE_FORMAT);\
    lua_setfield(L, -2, "TEXTURE_IMAGE_FORMAT");\
    lua_pushnumber(L, GL_TEXTURE_IMAGE_TYPE);\
    lua_setfield(L, -2, "TEXTURE_IMAGE_TYPE");\
    lua_pushnumber(L, GL_TEXTURE_IMMUTABLE_LEVELS);\
    lua_setfield(L, -2, "TEXTURE_IMMUTABLE_LEVELS");\
    lua_pushnumber(L, GL_TEXTURE_SHADOW);\
    lua_setfield(L, -2, "TEXTURE_SHADOW");\
    lua_pushnumber(L, GL_TEXTURE_VIEW);\
    lua_setfield(L, -2, "TEXTURE_VIEW");\
    lua_pushnumber(L, GL_TEXTURE_VIEW_MIN_LAYER);\
    lua_setfield(L, -2, "TEXTURE_VIEW_MIN_LAYER");\
    lua_pushnumber(L, GL_TEXTURE_VIEW_MIN_LEVEL);\
    lua_setfield(L, -2, "TEXTURE_VIEW_MIN_LEVEL");\
    lua_pushnumber(L, GL_TEXTURE_VIEW_NUM_LAYERS);\
    lua_setfield(L, -2, "TEXTURE_VIEW_NUM_LAYERS");\
    lua_pushnumber(L, GL_TEXTURE_VIEW_NUM_LEVELS);\
    lua_setfield(L, -2, "TEXTURE_VIEW_NUM_LEVELS");\
    lua_pushnumber(L, GL_TOP_LEVEL_ARRAY_SIZE);\
    lua_setfield(L, -2, "TOP_LEVEL_ARRAY_SIZE");\
    lua_pushnumber(L, GL_TOP_LEVEL_ARRAY_STRIDE);\
    lua_setfield(L, -2, "TOP_LEVEL_ARRAY_STRIDE");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_VARYING);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_VARYING");\
    lua_pushnumber(L, GL_TYPE);\
    lua_setfield(L, -2, "TYPE");\
    lua_pushnumber(L, GL_UNIFORM);\
    lua_setfield(L, -2, "UNIFORM");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK);\
    lua_setfield(L, -2, "UNIFORM_BLOCK");\
    lua_pushnumber(L, GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER);\
    lua_setfield(L, -2, "UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_ARRAY_LONG);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_ARRAY_LONG");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_BINDING);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_BINDING");\
    lua_pushnumber(L, GL_VERTEX_ATTRIB_RELATIVE_OFFSET);\
    lua_setfield(L, -2, "VERTEX_ATTRIB_RELATIVE_OFFSET");\
    lua_pushnumber(L, GL_VERTEX_BINDING_BUFFER);\
    lua_setfield(L, -2, "VERTEX_BINDING_BUFFER");\
    lua_pushnumber(L, GL_VERTEX_BINDING_DIVISOR);\
    lua_setfield(L, -2, "VERTEX_BINDING_DIVISOR");\
    lua_pushnumber(L, GL_VERTEX_BINDING_OFFSET);\
    lua_setfield(L, -2, "VERTEX_BINDING_OFFSET");\
    lua_pushnumber(L, GL_VERTEX_BINDING_STRIDE);\
    lua_setfield(L, -2, "VERTEX_BINDING_STRIDE");\
    lua_pushnumber(L, GL_VERTEX_SUBROUTINE);\
    lua_setfield(L, -2, "VERTEX_SUBROUTINE");\
    lua_pushnumber(L, GL_VERTEX_SUBROUTINE_UNIFORM);\
    lua_setfield(L, -2, "VERTEX_SUBROUTINE_UNIFORM");\
    lua_pushnumber(L, GL_VERTEX_TEXTURE);\
    lua_setfield(L, -2, "VERTEX_TEXTURE");\
    lua_pushnumber(L, GL_VIEW_CLASS_128_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_128_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_16_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_16_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_24_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_24_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_32_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_32_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_48_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_48_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_64_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_64_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_8_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_8_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_96_BITS);\
    lua_setfield(L, -2, "VIEW_CLASS_96_BITS");\
    lua_pushnumber(L, GL_VIEW_CLASS_BPTC_FLOAT);\
    lua_setfield(L, -2, "VIEW_CLASS_BPTC_FLOAT");\
    lua_pushnumber(L, GL_VIEW_CLASS_BPTC_UNORM);\
    lua_setfield(L, -2, "VIEW_CLASS_BPTC_UNORM");\
    lua_pushnumber(L, GL_VIEW_CLASS_RGTC1_RED);\
    lua_setfield(L, -2, "VIEW_CLASS_RGTC1_RED");\
    lua_pushnumber(L, GL_VIEW_CLASS_RGTC2_RG);\
    lua_setfield(L, -2, "VIEW_CLASS_RGTC2_RG");\
    lua_pushnumber(L, GL_VIEW_CLASS_S3TC_DXT1_RGB);\
    lua_setfield(L, -2, "VIEW_CLASS_S3TC_DXT1_RGB");\
    lua_pushnumber(L, GL_VIEW_CLASS_S3TC_DXT1_RGBA);\
    lua_setfield(L, -2, "VIEW_CLASS_S3TC_DXT1_RGBA");\
    lua_pushnumber(L, GL_VIEW_CLASS_S3TC_DXT3_RGBA);\
    lua_setfield(L, -2, "VIEW_CLASS_S3TC_DXT3_RGBA");\
    lua_pushnumber(L, GL_VIEW_CLASS_S3TC_DXT5_RGBA);\
    lua_setfield(L, -2, "VIEW_CLASS_S3TC_DXT5_RGBA");\
    lua_pushnumber(L, GL_VIEW_COMPATIBILITY_CLASS);\
    lua_setfield(L, -2, "VIEW_COMPATIBILITY_CLASS");\
    lua_pushnumber(L, GL_BUFFER_IMMUTABLE_STORAGE);\
    lua_setfield(L, -2, "BUFFER_IMMUTABLE_STORAGE");\
    lua_pushnumber(L, GL_BUFFER_STORAGE_FLAGS);\
    lua_setfield(L, -2, "BUFFER_STORAGE_FLAGS");\
    lua_pushnumber(L, GL_CLEAR_TEXTURE);\
    lua_setfield(L, -2, "CLEAR_TEXTURE");\
    lua_pushnumber(L, GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT);\
    lua_setfield(L, -2, "CLIENT_MAPPED_BUFFER_BARRIER_BIT");\
    lua_pushnumber(L, GL_CLIENT_STORAGE_BIT);\
    lua_setfield(L, -2, "CLIENT_STORAGE_BIT");\
    lua_pushnumber(L, GL_DYNAMIC_STORAGE_BIT);\
    lua_setfield(L, -2, "DYNAMIC_STORAGE_BIT");\
    lua_pushnumber(L, GL_LOCATION_COMPONENT);\
    lua_setfield(L, -2, "LOCATION_COMPONENT");\
    lua_pushnumber(L, GL_MAP_COHERENT_BIT);\
    lua_setfield(L, -2, "MAP_COHERENT_BIT");\
    lua_pushnumber(L, GL_MAP_PERSISTENT_BIT);\
    lua_setfield(L, -2, "MAP_PERSISTENT_BIT");\
    lua_pushnumber(L, GL_MAX_VERTEX_ATTRIB_STRIDE);\
    lua_setfield(L, -2, "MAX_VERTEX_ATTRIB_STRIDE");\
    lua_pushnumber(L, GL_MIRROR_CLAMP_TO_EDGE);\
    lua_setfield(L, -2, "MIRROR_CLAMP_TO_EDGE");\
    lua_pushnumber(L, GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED);\
    lua_setfield(L, -2, "PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED");\
    lua_pushnumber(L, GL_QUERY_BUFFER);\
    lua_setfield(L, -2, "QUERY_BUFFER");\
    lua_pushnumber(L, GL_QUERY_BUFFER_BARRIER_BIT);\
    lua_setfield(L, -2, "QUERY_BUFFER_BARRIER_BIT");\
    lua_pushnumber(L, GL_QUERY_BUFFER_BINDING);\
    lua_setfield(L, -2, "QUERY_BUFFER_BINDING");\
    lua_pushnumber(L, GL_QUERY_RESULT_NO_WAIT);\
    lua_setfield(L, -2, "QUERY_RESULT_NO_WAIT");\
    lua_pushnumber(L, GL_TEXTURE_BUFFER_BINDING);\
    lua_setfield(L, -2, "TEXTURE_BUFFER_BINDING");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_INDEX);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_INDEX");\
    lua_pushnumber(L, GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE);\
    lua_setfield(L, -2, "TRANSFORM_FEEDBACK_BUFFER_STRIDE");\
    /* end */

#endif//GLUTIL_H

/**********************************************************************************************************************/
/*                                                                                                                    */
/* glutil.c                                                                                                           */
/*                                                                                                                    */
/**********************************************************************************************************************/

int GlCopyTexSubImage3D(lua_State *L) {
    GLenum  target  = (GLenum )luaL_checkinteger(L, 1);
    GLint   level   = (GLint  )luaL_checkinteger(L, 2);
    GLint   xoffset = (GLint  )luaL_checkinteger(L, 3);
    GLint   yoffset = (GLint  )luaL_checkinteger(L, 4);
    GLint   zoffset = (GLint  )luaL_checkinteger(L, 5);
    GLint   x       = (GLint  )luaL_checkinteger(L, 6);
    GLint   y       = (GLint  )luaL_checkinteger(L, 7);
    GLsizei width   = (GLsizei)luaL_checkinteger(L, 8);
    GLsizei height  = (GLsizei)luaL_checkinteger(L, 9);

    glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
    return 0;
}

int GlDrawRangeElements(lua_State *L) {
    GLenum       mode    = (GLenum      )luaL_checkinteger(L, 1);
    GLuint       start   = (GLuint      )luaL_checkinteger(L, 2);
    GLuint       end     = (GLuint      )luaL_checkinteger(L, 3);
    GLsizei      count   = (GLsizei     )luaL_checkinteger(L, 4);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 5);
    const void * indices = (const void *)luaL_checkudata(L, 6, "const void *");

    glDrawRangeElements(mode, start, end, count, type, indices);
    return 0;
}

int GlTexImage3D(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level          = (GLint       )luaL_checkinteger(L, 2);
    GLint        internalformat = (GLint       )luaL_checkinteger(L, 3);
    GLsizei      width          = (GLsizei     )luaL_checkinteger(L, 4);
    GLsizei      height         = (GLsizei     )luaL_checkinteger(L, 5);
    GLsizei      depth          = (GLsizei     )luaL_checkinteger(L, 6);
    GLint        border         = (GLint       )luaL_checkinteger(L, 7);
    GLenum       format         = (GLenum      )luaL_checkinteger(L, 8);
    GLenum       type           = (GLenum      )luaL_checkinteger(L, 9);
    const void * pixels         = (const void *)luaL_checkudata(L, 10, "const void *");

    glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
    return 0;
}

int GlTexSubImage3D(lua_State *L) {
    GLenum       target  = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level   = (GLint       )luaL_checkinteger(L, 2);
    GLint        xoffset = (GLint       )luaL_checkinteger(L, 3);
    GLint        yoffset = (GLint       )luaL_checkinteger(L, 4);
    GLint        zoffset = (GLint       )luaL_checkinteger(L, 5);
    GLsizei      width   = (GLsizei     )luaL_checkinteger(L, 6);
    GLsizei      height  = (GLsizei     )luaL_checkinteger(L, 7);
    GLsizei      depth   = (GLsizei     )luaL_checkinteger(L, 8);
    GLenum       format  = (GLenum      )luaL_checkinteger(L, 9);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 10);
    const void * pixels  = (const void *)luaL_checkudata(L, 11, "const void *");

    glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
    return 0;
}

int GlActiveTexture(lua_State *L) {
    GLenum texture = (GLenum)luaL_checkinteger(L, 1);

    glActiveTexture(texture);
    return 0;
}

int GlClientActiveTexture(lua_State *L) {
    GLenum texture = (GLenum)luaL_checkinteger(L, 1);

    glClientActiveTexture(texture);
    return 0;
}

int GlCompressedTexImage1D(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level          = (GLint       )luaL_checkinteger(L, 2);
    GLenum       internalformat = (GLenum      )luaL_checkinteger(L, 3);
    GLsizei      width          = (GLsizei     )luaL_checkinteger(L, 4);
    GLint        border         = (GLint       )luaL_checkinteger(L, 5);
    GLsizei      imageSize      = (GLsizei     )luaL_checkinteger(L, 6);
    const void * data           = (const void *)luaL_checkudata(L, 7, "const void *");

    glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
    return 0;
}

int GlCompressedTexImage2D(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level          = (GLint       )luaL_checkinteger(L, 2);
    GLenum       internalformat = (GLenum      )luaL_checkinteger(L, 3);
    GLsizei      width          = (GLsizei     )luaL_checkinteger(L, 4);
    GLsizei      height         = (GLsizei     )luaL_checkinteger(L, 5);
    GLint        border         = (GLint       )luaL_checkinteger(L, 6);
    GLsizei      imageSize      = (GLsizei     )luaL_checkinteger(L, 7);
    const void * data           = (const void *)luaL_checkudata(L, 8, "const void *");

    glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
    return 0;
}

int GlCompressedTexImage3D(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level          = (GLint       )luaL_checkinteger(L, 2);
    GLenum       internalformat = (GLenum      )luaL_checkinteger(L, 3);
    GLsizei      width          = (GLsizei     )luaL_checkinteger(L, 4);
    GLsizei      height         = (GLsizei     )luaL_checkinteger(L, 5);
    GLsizei      depth          = (GLsizei     )luaL_checkinteger(L, 6);
    GLint        border         = (GLint       )luaL_checkinteger(L, 7);
    GLsizei      imageSize      = (GLsizei     )luaL_checkinteger(L, 8);
    const void * data           = (const void *)luaL_checkudata(L, 9, "const void *");

    glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
    return 0;
}

int GlCompressedTexSubImage1D(lua_State *L) {
    GLenum       target    = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level     = (GLint       )luaL_checkinteger(L, 2);
    GLint        xoffset   = (GLint       )luaL_checkinteger(L, 3);
    GLsizei      width     = (GLsizei     )luaL_checkinteger(L, 4);
    GLenum       format    = (GLenum      )luaL_checkinteger(L, 5);
    GLsizei      imageSize = (GLsizei     )luaL_checkinteger(L, 6);
    const void * data      = (const void *)luaL_checkudata(L, 7, "const void *");

    glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
    return 0;
}

int GlCompressedTexSubImage2D(lua_State *L) {
    GLenum       target    = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level     = (GLint       )luaL_checkinteger(L, 2);
    GLint        xoffset   = (GLint       )luaL_checkinteger(L, 3);
    GLint        yoffset   = (GLint       )luaL_checkinteger(L, 4);
    GLsizei      width     = (GLsizei     )luaL_checkinteger(L, 5);
    GLsizei      height    = (GLsizei     )luaL_checkinteger(L, 6);
    GLenum       format    = (GLenum      )luaL_checkinteger(L, 7);
    GLsizei      imageSize = (GLsizei     )luaL_checkinteger(L, 8);
    const void * data      = (const void *)luaL_checkudata(L, 9, "const void *");

    glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
    return 0;
}

int GlCompressedTexSubImage3D(lua_State *L) {
    GLenum       target    = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level     = (GLint       )luaL_checkinteger(L, 2);
    GLint        xoffset   = (GLint       )luaL_checkinteger(L, 3);
    GLint        yoffset   = (GLint       )luaL_checkinteger(L, 4);
    GLint        zoffset   = (GLint       )luaL_checkinteger(L, 5);
    GLsizei      width     = (GLsizei     )luaL_checkinteger(L, 6);
    GLsizei      height    = (GLsizei     )luaL_checkinteger(L, 7);
    GLsizei      depth     = (GLsizei     )luaL_checkinteger(L, 8);
    GLenum       format    = (GLenum      )luaL_checkinteger(L, 9);
    GLsizei      imageSize = (GLsizei     )luaL_checkinteger(L, 10);
    const void * data      = (const void *)luaL_checkudata(L, 11, "const void *");

    glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
    return 0;
}

int GlGetCompressedTexImage(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLint  level  = (GLint )luaL_checkinteger(L, 2);
    void * img    = (void *)luaL_checkudata(L, 3, "void *");

    glGetCompressedTexImage(target, level, img);
    return 0;
}

int GlLoadTransposeMatrixd(lua_State *L) {
    const GLdouble * m = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glLoadTransposeMatrixd(m);
    return 0;
}

int GlLoadTransposeMatrixf(lua_State *L) {
    const GLfloat * m = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glLoadTransposeMatrixf(m);
    return 0;
}

int GlMultTransposeMatrixd(lua_State *L) {
    const GLdouble * m = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glMultTransposeMatrixd(m);
    return 0;
}

int GlMultTransposeMatrixf(lua_State *L) {
    const GLfloat * m = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glMultTransposeMatrixf(m);
    return 0;
}

int GlMultiTexCoord1d(lua_State *L) {
    GLenum   target = (GLenum  )luaL_checkinteger(L, 1);
    GLdouble s      = (GLdouble)luaL_checknumber(L, 2);

    glMultiTexCoord1d(target, s);
    return 0;
}

int GlMultiTexCoord1dv(lua_State *L) {
    GLenum           target = (GLenum          )luaL_checkinteger(L, 1);
    const GLdouble * v      = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glMultiTexCoord1dv(target, v);
    return 0;
}

int GlMultiTexCoord1f(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLfloat s      = (GLfloat)luaL_checknumber(L, 2);

    glMultiTexCoord1f(target, s);
    return 0;
}

int GlMultiTexCoord1fv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * v      = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glMultiTexCoord1fv(target, v);
    return 0;
}

int GlMultiTexCoord1i(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLint  s      = (GLint )luaL_checkinteger(L, 2);

    glMultiTexCoord1i(target, s);
    return 0;
}

int GlMultiTexCoord1iv(lua_State *L) {
    GLenum        target = (GLenum       )luaL_checkinteger(L, 1);
    const GLint * v      = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glMultiTexCoord1iv(target, v);
    return 0;
}

int GlMultiTexCoord1s(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLshort s      = (GLshort)luaL_checkinteger(L, 2);

    glMultiTexCoord1s(target, s);
    return 0;
}

int GlMultiTexCoord1sv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLshort * v      = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glMultiTexCoord1sv(target, v);
    return 0;
}

int GlMultiTexCoord2d(lua_State *L) {
    GLenum   target = (GLenum  )luaL_checkinteger(L, 1);
    GLdouble s      = (GLdouble)luaL_checknumber(L, 2);
    GLdouble t      = (GLdouble)luaL_checknumber(L, 3);

    glMultiTexCoord2d(target, s, t);
    return 0;
}

int GlMultiTexCoord2dv(lua_State *L) {
    GLenum           target = (GLenum          )luaL_checkinteger(L, 1);
    const GLdouble * v      = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glMultiTexCoord2dv(target, v);
    return 0;
}

int GlMultiTexCoord2f(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLfloat s      = (GLfloat)luaL_checknumber(L, 2);
    GLfloat t      = (GLfloat)luaL_checknumber(L, 3);

    glMultiTexCoord2f(target, s, t);
    return 0;
}

int GlMultiTexCoord2fv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * v      = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glMultiTexCoord2fv(target, v);
    return 0;
}

int GlMultiTexCoord2i(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLint  s      = (GLint )luaL_checkinteger(L, 2);
    GLint  t      = (GLint )luaL_checkinteger(L, 3);

    glMultiTexCoord2i(target, s, t);
    return 0;
}

int GlMultiTexCoord2iv(lua_State *L) {
    GLenum        target = (GLenum       )luaL_checkinteger(L, 1);
    const GLint * v      = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glMultiTexCoord2iv(target, v);
    return 0;
}

int GlMultiTexCoord2s(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLshort s      = (GLshort)luaL_checkinteger(L, 2);
    GLshort t      = (GLshort)luaL_checkinteger(L, 3);

    glMultiTexCoord2s(target, s, t);
    return 0;
}

int GlMultiTexCoord2sv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLshort * v      = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glMultiTexCoord2sv(target, v);
    return 0;
}

int GlMultiTexCoord3d(lua_State *L) {
    GLenum   target = (GLenum  )luaL_checkinteger(L, 1);
    GLdouble s      = (GLdouble)luaL_checknumber(L, 2);
    GLdouble t      = (GLdouble)luaL_checknumber(L, 3);
    GLdouble r      = (GLdouble)luaL_checknumber(L, 4);

    glMultiTexCoord3d(target, s, t, r);
    return 0;
}

int GlMultiTexCoord3dv(lua_State *L) {
    GLenum           target = (GLenum          )luaL_checkinteger(L, 1);
    const GLdouble * v      = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glMultiTexCoord3dv(target, v);
    return 0;
}

int GlMultiTexCoord3f(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLfloat s      = (GLfloat)luaL_checknumber(L, 2);
    GLfloat t      = (GLfloat)luaL_checknumber(L, 3);
    GLfloat r      = (GLfloat)luaL_checknumber(L, 4);

    glMultiTexCoord3f(target, s, t, r);
    return 0;
}

int GlMultiTexCoord3fv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * v      = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glMultiTexCoord3fv(target, v);
    return 0;
}

int GlMultiTexCoord3i(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLint  s      = (GLint )luaL_checkinteger(L, 2);
    GLint  t      = (GLint )luaL_checkinteger(L, 3);
    GLint  r      = (GLint )luaL_checkinteger(L, 4);

    glMultiTexCoord3i(target, s, t, r);
    return 0;
}

int GlMultiTexCoord3iv(lua_State *L) {
    GLenum        target = (GLenum       )luaL_checkinteger(L, 1);
    const GLint * v      = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glMultiTexCoord3iv(target, v);
    return 0;
}

int GlMultiTexCoord3s(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLshort s      = (GLshort)luaL_checkinteger(L, 2);
    GLshort t      = (GLshort)luaL_checkinteger(L, 3);
    GLshort r      = (GLshort)luaL_checkinteger(L, 4);

    glMultiTexCoord3s(target, s, t, r);
    return 0;
}

int GlMultiTexCoord3sv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLshort * v      = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glMultiTexCoord3sv(target, v);
    return 0;
}

int GlMultiTexCoord4d(lua_State *L) {
    GLenum   target = (GLenum  )luaL_checkinteger(L, 1);
    GLdouble s      = (GLdouble)luaL_checknumber(L, 2);
    GLdouble t      = (GLdouble)luaL_checknumber(L, 3);
    GLdouble r      = (GLdouble)luaL_checknumber(L, 4);
    GLdouble q      = (GLdouble)luaL_checknumber(L, 5);

    glMultiTexCoord4d(target, s, t, r, q);
    return 0;
}

int GlMultiTexCoord4dv(lua_State *L) {
    GLenum           target = (GLenum          )luaL_checkinteger(L, 1);
    const GLdouble * v      = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glMultiTexCoord4dv(target, v);
    return 0;
}

int GlMultiTexCoord4f(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLfloat s      = (GLfloat)luaL_checknumber(L, 2);
    GLfloat t      = (GLfloat)luaL_checknumber(L, 3);
    GLfloat r      = (GLfloat)luaL_checknumber(L, 4);
    GLfloat q      = (GLfloat)luaL_checknumber(L, 5);

    glMultiTexCoord4f(target, s, t, r, q);
    return 0;
}

int GlMultiTexCoord4fv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * v      = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glMultiTexCoord4fv(target, v);
    return 0;
}

int GlMultiTexCoord4i(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLint  s      = (GLint )luaL_checkinteger(L, 2);
    GLint  t      = (GLint )luaL_checkinteger(L, 3);
    GLint  r      = (GLint )luaL_checkinteger(L, 4);
    GLint  q      = (GLint )luaL_checkinteger(L, 5);

    glMultiTexCoord4i(target, s, t, r, q);
    return 0;
}

int GlMultiTexCoord4iv(lua_State *L) {
    GLenum        target = (GLenum       )luaL_checkinteger(L, 1);
    const GLint * v      = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glMultiTexCoord4iv(target, v);
    return 0;
}

int GlMultiTexCoord4s(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLshort s      = (GLshort)luaL_checkinteger(L, 2);
    GLshort t      = (GLshort)luaL_checkinteger(L, 3);
    GLshort r      = (GLshort)luaL_checkinteger(L, 4);
    GLshort q      = (GLshort)luaL_checkinteger(L, 5);

    glMultiTexCoord4s(target, s, t, r, q);
    return 0;
}

int GlMultiTexCoord4sv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    const GLshort * v      = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glMultiTexCoord4sv(target, v);
    return 0;
}

int GlSampleCoverage(lua_State *L) {
    GLfloat   value  = (GLfloat  )luaL_checknumber(L, 1);
    GLboolean invert = (GLboolean)luaL_checkinteger(L, 2);

    glSampleCoverage(value, invert);
    return 0;
}

int GlBlendColor(lua_State *L) {
    GLfloat red   = (GLfloat)luaL_checknumber(L, 1);
    GLfloat green = (GLfloat)luaL_checknumber(L, 2);
    GLfloat blue  = (GLfloat)luaL_checknumber(L, 3);
    GLfloat alpha = (GLfloat)luaL_checknumber(L, 4);

    glBlendColor(red, green, blue, alpha);
    return 0;
}

int GlBlendEquation(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glBlendEquation(mode);
    return 0;
}

int GlBlendFuncSeparate(lua_State *L) {
    GLenum sfactorRGB   = (GLenum)luaL_checkinteger(L, 1);
    GLenum dfactorRGB   = (GLenum)luaL_checkinteger(L, 2);
    GLenum sfactorAlpha = (GLenum)luaL_checkinteger(L, 3);
    GLenum dfactorAlpha = (GLenum)luaL_checkinteger(L, 4);

    glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
    return 0;
}

int GlFogCoordPointer(lua_State *L) {
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 2);
    const void * pointer = (const void *)luaL_checkudata(L, 3, "const void *");

    glFogCoordPointer(type, stride, pointer);
    return 0;
}

int GlFogCoordd(lua_State *L) {
    GLdouble coord = (GLdouble)luaL_checknumber(L, 1);

    glFogCoordd(coord);
    return 0;
}

int GlFogCoorddv(lua_State *L) {
    const GLdouble * coord = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glFogCoorddv(coord);
    return 0;
}

int GlFogCoordf(lua_State *L) {
    GLfloat coord = (GLfloat)luaL_checknumber(L, 1);

    glFogCoordf(coord);
    return 0;
}

int GlFogCoordfv(lua_State *L) {
    const GLfloat * coord = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glFogCoordfv(coord);
    return 0;
}

int GlMultiDrawArrays(lua_State *L) {
    GLenum          mode      = (GLenum         )luaL_checkinteger(L, 1);
    const GLint *   first     = (const GLint *  )luaL_checkudata(L, 2, "const GLint *");
    const GLsizei * count     = (const GLsizei *)luaL_checkudata(L, 3, "const GLsizei *");
    GLsizei         drawcount = (GLsizei        )luaL_checkinteger(L, 4);

    glMultiDrawArrays(mode, first, count, drawcount);
    return 0;
}

int GlMultiDrawElements(lua_State *L) {
    GLenum             mode      = (GLenum            )luaL_checkinteger(L, 1);
    const GLsizei *    count     = (const GLsizei *   )luaL_checkudata(L, 2, "const GLsizei *");
    GLenum             type      = (GLenum            )luaL_checkinteger(L, 3);
    const void *const* indices   = (const void *const*)luaL_checkudata(L, 4, "const void *const*");
    GLsizei            drawcount = (GLsizei           )luaL_checkinteger(L, 5);

    glMultiDrawElements(mode, count, type, indices, drawcount);
    return 0;
}

int GlPointParameterf(lua_State *L) {
    GLenum  pname = (GLenum )luaL_checkinteger(L, 1);
    GLfloat param = (GLfloat)luaL_checknumber(L, 2);

    glPointParameterf(pname, param);
    return 0;
}

int GlPointParameterfv(lua_State *L) {
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glPointParameterfv(pname, params);
    return 0;
}

int GlPointParameteri(lua_State *L) {
    GLenum pname = (GLenum)luaL_checkinteger(L, 1);
    GLint  param = (GLint )luaL_checkinteger(L, 2);

    glPointParameteri(pname, param);
    return 0;
}

int GlPointParameteriv(lua_State *L) {
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 1);
    const GLint * params = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glPointParameteriv(pname, params);
    return 0;
}

int GlSecondaryColor3b(lua_State *L) {
    GLbyte red   = (GLbyte)luaL_checkinteger(L, 1);
    GLbyte green = (GLbyte)luaL_checkinteger(L, 2);
    GLbyte blue  = (GLbyte)luaL_checkinteger(L, 3);

    glSecondaryColor3b(red, green, blue);
    return 0;
}

int GlSecondaryColor3bv(lua_State *L) {
    const GLbyte * v = (const GLbyte *)luaL_checkudata(L, 1, "const GLbyte *");

    glSecondaryColor3bv(v);
    return 0;
}

int GlSecondaryColor3d(lua_State *L) {
    GLdouble red   = (GLdouble)luaL_checknumber(L, 1);
    GLdouble green = (GLdouble)luaL_checknumber(L, 2);
    GLdouble blue  = (GLdouble)luaL_checknumber(L, 3);

    glSecondaryColor3d(red, green, blue);
    return 0;
}

int GlSecondaryColor3dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glSecondaryColor3dv(v);
    return 0;
}

int GlSecondaryColor3f(lua_State *L) {
    GLfloat red   = (GLfloat)luaL_checknumber(L, 1);
    GLfloat green = (GLfloat)luaL_checknumber(L, 2);
    GLfloat blue  = (GLfloat)luaL_checknumber(L, 3);

    glSecondaryColor3f(red, green, blue);
    return 0;
}

int GlSecondaryColor3fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glSecondaryColor3fv(v);
    return 0;
}

int GlSecondaryColor3i(lua_State *L) {
    GLint red   = (GLint)luaL_checkinteger(L, 1);
    GLint green = (GLint)luaL_checkinteger(L, 2);
    GLint blue  = (GLint)luaL_checkinteger(L, 3);

    glSecondaryColor3i(red, green, blue);
    return 0;
}

int GlSecondaryColor3iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glSecondaryColor3iv(v);
    return 0;
}

int GlSecondaryColor3s(lua_State *L) {
    GLshort red   = (GLshort)luaL_checkinteger(L, 1);
    GLshort green = (GLshort)luaL_checkinteger(L, 2);
    GLshort blue  = (GLshort)luaL_checkinteger(L, 3);

    glSecondaryColor3s(red, green, blue);
    return 0;
}

int GlSecondaryColor3sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glSecondaryColor3sv(v);
    return 0;
}

int GlSecondaryColor3ub(lua_State *L) {
    GLubyte red   = (GLubyte)luaL_checkinteger(L, 1);
    GLubyte green = (GLubyte)luaL_checkinteger(L, 2);
    GLubyte blue  = (GLubyte)luaL_checkinteger(L, 3);

    glSecondaryColor3ub(red, green, blue);
    return 0;
}

int GlSecondaryColor3ubv(lua_State *L) {
    const GLubyte * v = (const GLubyte *)luaL_checkudata(L, 1, "const GLubyte *");

    glSecondaryColor3ubv(v);
    return 0;
}

int GlSecondaryColor3ui(lua_State *L) {
    GLuint red   = (GLuint)luaL_checkinteger(L, 1);
    GLuint green = (GLuint)luaL_checkinteger(L, 2);
    GLuint blue  = (GLuint)luaL_checkinteger(L, 3);

    glSecondaryColor3ui(red, green, blue);
    return 0;
}

int GlSecondaryColor3uiv(lua_State *L) {
    const GLuint * v = (const GLuint *)luaL_checkudata(L, 1, "const GLuint *");

    glSecondaryColor3uiv(v);
    return 0;
}

int GlSecondaryColor3us(lua_State *L) {
    GLushort red   = (GLushort)luaL_checkinteger(L, 1);
    GLushort green = (GLushort)luaL_checkinteger(L, 2);
    GLushort blue  = (GLushort)luaL_checkinteger(L, 3);

    glSecondaryColor3us(red, green, blue);
    return 0;
}

int GlSecondaryColor3usv(lua_State *L) {
    const GLushort * v = (const GLushort *)luaL_checkudata(L, 1, "const GLushort *");

    glSecondaryColor3usv(v);
    return 0;
}

int GlSecondaryColorPointer(lua_State *L) {
    GLint        size    = (GLint       )luaL_checkinteger(L, 1);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 2);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 3);
    const void * pointer = (const void *)luaL_checkudata(L, 4, "const void *");

    glSecondaryColorPointer(size, type, stride, pointer);
    return 0;
}

int GlWindowPos2d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);

    glWindowPos2d(x, y);
    return 0;
}

int GlWindowPos2dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glWindowPos2dv(v);
    return 0;
}

int GlWindowPos2f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);

    glWindowPos2f(x, y);
    return 0;
}

int GlWindowPos2fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glWindowPos2fv(v);
    return 0;
}

int GlWindowPos2i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);

    glWindowPos2i(x, y);
    return 0;
}

int GlWindowPos2iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glWindowPos2iv(v);
    return 0;
}

int GlWindowPos2s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);

    glWindowPos2s(x, y);
    return 0;
}

int GlWindowPos2sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glWindowPos2sv(v);
    return 0;
}

int GlWindowPos3d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);
    GLdouble z = (GLdouble)luaL_checknumber(L, 3);

    glWindowPos3d(x, y, z);
    return 0;
}

int GlWindowPos3dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glWindowPos3dv(v);
    return 0;
}

int GlWindowPos3f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);
    GLfloat z = (GLfloat)luaL_checknumber(L, 3);

    glWindowPos3f(x, y, z);
    return 0;
}

int GlWindowPos3fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glWindowPos3fv(v);
    return 0;
}

int GlWindowPos3i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);
    GLint z = (GLint)luaL_checkinteger(L, 3);

    glWindowPos3i(x, y, z);
    return 0;
}

int GlWindowPos3iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glWindowPos3iv(v);
    return 0;
}

int GlWindowPos3s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);
    GLshort z = (GLshort)luaL_checkinteger(L, 3);

    glWindowPos3s(x, y, z);
    return 0;
}

int GlWindowPos3sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glWindowPos3sv(v);
    return 0;
}

int GlBeginQuery(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint id     = (GLuint)luaL_checkinteger(L, 2);

    glBeginQuery(target, id);
    return 0;
}

int GlBindBuffer(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint buffer = (GLuint)luaL_checkinteger(L, 2);

    glBindBuffer(target, buffer);
    return 0;
}

int GlBufferData(lua_State *L) {
    GLenum       target = (GLenum      )luaL_checkinteger(L, 1);
    GLsizeiptr   size   = (GLsizeiptr  )luaL_checkinteger(L, 2);
    const void * data   = (const void *)luaL_checkudata(L, 3, "const void *");
    GLenum       usage  = (GLenum      )luaL_checkinteger(L, 4);

    glBufferData(target, size, data, usage);
    return 0;
}

int GlBufferSubData(lua_State *L) {
    GLenum       target = (GLenum      )luaL_checkinteger(L, 1);
    GLintptr     offset = (GLintptr    )luaL_checkinteger(L, 2);
    GLsizeiptr   size   = (GLsizeiptr  )luaL_checkinteger(L, 3);
    const void * data   = (const void *)luaL_checkudata(L, 4, "const void *");

    glBufferSubData(target, offset, size, data);
    return 0;
}

int GlDeleteBuffers(lua_State *L) {
    GLsizei        n       = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * buffers = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteBuffers(n, buffers);
    return 0;
}

int GlDeleteQueries(lua_State *L) {
    GLsizei        n   = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * ids = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteQueries(n, ids);
    return 0;
}

int GlEndQuery(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);

    glEndQuery(target);
    return 0;
}

int GlGenBuffers(lua_State *L) {
    GLsizei  n       = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * buffers = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenBuffers(n, buffers);
    return 0;
}

int GlGenQueries(lua_State *L) {
    GLsizei  n   = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * ids = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenQueries(n, ids);
    return 0;
}

int GlGetBufferParameteriv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetBufferParameteriv(target, pname, params);
    return 0;
}

int GlGetBufferPointerv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    void ** params = (void **)luaL_checkudata(L, 3, "void **");

    glGetBufferPointerv(target, pname, params);
    return 0;
}

int GlGetBufferSubData(lua_State *L) {
    GLenum     target = (GLenum    )luaL_checkinteger(L, 1);
    GLintptr   offset = (GLintptr  )luaL_checkinteger(L, 2);
    GLsizeiptr size   = (GLsizeiptr)luaL_checkinteger(L, 3);
    void *     data   = (void *    )luaL_checkudata(L, 4, "void *");

    glGetBufferSubData(target, offset, size, data);
    return 0;
}

int GlGetQueryObjectiv(lua_State *L) {
    GLuint  id     = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetQueryObjectiv(id, pname, params);
    return 0;
}

int GlGetQueryObjectuiv(lua_State *L) {
    GLuint   id     = (GLuint  )luaL_checkinteger(L, 1);
    GLenum   pname  = (GLenum  )luaL_checkinteger(L, 2);
    GLuint * params = (GLuint *)luaL_checkudata(L, 3, "GLuint *");

    glGetQueryObjectuiv(id, pname, params);
    return 0;
}

int GlGetQueryiv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetQueryiv(target, pname, params);
    return 0;
}

int GlIsBuffer(lua_State *L) {
    GLuint buffer = (GLuint)luaL_checkinteger(L, 1);

    glIsBuffer(buffer);
    return 0;
}

int GlIsQuery(lua_State *L) {
    GLuint id = (GLuint)luaL_checkinteger(L, 1);

    glIsQuery(id);
    return 0;
}

int GlMapBuffer(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLenum access = (GLenum)luaL_checkinteger(L, 2);

    glMapBuffer(target, access);
    return 0;
}

int GlUnmapBuffer(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);

    glUnmapBuffer(target);
    return 0;
}

int GlAttachShader(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);
    GLuint shader  = (GLuint)luaL_checkinteger(L, 2);

    glAttachShader(program, shader);
    return 0;
}

int GlBindAttribLocation(lua_State *L) {
    GLuint         program = (GLuint        )luaL_checkinteger(L, 1);
    GLuint         index   = (GLuint        )luaL_checkinteger(L, 2);
    const GLchar * name    = (const GLchar *)luaL_checkstring(L, 3);

    glBindAttribLocation(program, index, name);
    return 0;
}

int GlBlendEquationSeparate(lua_State *L) {
    GLenum modeRGB   = (GLenum)luaL_checkinteger(L, 1);
    GLenum modeAlpha = (GLenum)luaL_checkinteger(L, 2);

    glBlendEquationSeparate(modeRGB, modeAlpha);
    return 0;
}

int GlCompileShader(lua_State *L) {
    GLuint shader = (GLuint)luaL_checkinteger(L, 1);

    glCompileShader(shader);
    return 0;
}

int GlCreateProgram(lua_State *L) {

    glCreateProgram();
    return 0;
}

int GlCreateShader(lua_State *L) {
    GLenum type = (GLenum)luaL_checkinteger(L, 1);

    glCreateShader(type);
    return 0;
}

int GlDeleteProgram(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);

    glDeleteProgram(program);
    return 0;
}

int GlDeleteShader(lua_State *L) {
    GLuint shader = (GLuint)luaL_checkinteger(L, 1);

    glDeleteShader(shader);
    return 0;
}

int GlDetachShader(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);
    GLuint shader  = (GLuint)luaL_checkinteger(L, 2);

    glDetachShader(program, shader);
    return 0;
}

int GlDisableVertexAttribArray(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);

    glDisableVertexAttribArray(index);
    return 0;
}

int GlDrawBuffers(lua_State *L) {
    GLsizei        n    = (GLsizei       )luaL_checkinteger(L, 1);
    const GLenum * bufs = (const GLenum *)luaL_checkudata(L, 2, "const GLenum *");

    glDrawBuffers(n, bufs);
    return 0;
}

int GlEnableVertexAttribArray(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);

    glEnableVertexAttribArray(index);
    return 0;
}

int GlGetActiveAttrib(lua_State *L) {
    GLuint    program = (GLuint   )luaL_checkinteger(L, 1);
    GLuint    index   = (GLuint   )luaL_checkinteger(L, 2);
    GLsizei   bufSize = (GLsizei  )luaL_checkinteger(L, 3);
    GLsizei * length  = (GLsizei *)luaL_checkudata(L, 4, "GLsizei *");
    GLint *   size    = (GLint *  )luaL_checkudata(L, 5, "GLint *");
    GLenum *  type    = (GLenum * )luaL_checkudata(L, 6, "GLenum *");
    GLchar *  name    = (GLchar * )luaL_checkstring(L, 7);

    glGetActiveAttrib(program, index, bufSize, length, size, type, name);
    return 0;
}

int GlGetActiveUniform(lua_State *L) {
    GLuint    program = (GLuint   )luaL_checkinteger(L, 1);
    GLuint    index   = (GLuint   )luaL_checkinteger(L, 2);
    GLsizei   bufSize = (GLsizei  )luaL_checkinteger(L, 3);
    GLsizei * length  = (GLsizei *)luaL_checkudata(L, 4, "GLsizei *");
    GLint *   size    = (GLint *  )luaL_checkudata(L, 5, "GLint *");
    GLenum *  type    = (GLenum * )luaL_checkudata(L, 6, "GLenum *");
    GLchar *  name    = (GLchar * )luaL_checkstring(L, 7);

    glGetActiveUniform(program, index, bufSize, length, size, type, name);
    return 0;
}

int GlGetAttachedShaders(lua_State *L) {
    GLuint    program  = (GLuint   )luaL_checkinteger(L, 1);
    GLsizei   maxCount = (GLsizei  )luaL_checkinteger(L, 2);
    GLsizei * count    = (GLsizei *)luaL_checkudata(L, 3, "GLsizei *");
    GLuint *  shaders  = (GLuint * )luaL_checkudata(L, 4, "GLuint *");

    glGetAttachedShaders(program, maxCount, count, shaders);
    return 0;
}

int GlGetAttribLocation(lua_State *L) {
    GLuint         program = (GLuint        )luaL_checkinteger(L, 1);
    const GLchar * name    = (const GLchar *)luaL_checkstring(L, 2);

    glGetAttribLocation(program, name);
    return 0;
}

int GlGetProgramInfoLog(lua_State *L) {
    GLuint    program = (GLuint   )luaL_checkinteger(L, 1);
    GLsizei   bufSize = (GLsizei  )luaL_checkinteger(L, 2);
    GLsizei * length  = (GLsizei *)luaL_checkudata(L, 3, "GLsizei *");
    GLchar *  infoLog = (GLchar * )luaL_checkstring(L, 4);

    glGetProgramInfoLog(program, bufSize, length, infoLog);
    return 0;
}

int GlGetProgramiv(lua_State *L) {
    GLuint  program = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname   = (GLenum )luaL_checkinteger(L, 2);
    GLint * params  = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetProgramiv(program, pname, params);
    return 0;
}

int GlGetShaderInfoLog(lua_State *L) {
    GLuint    shader  = (GLuint   )luaL_checkinteger(L, 1);
    GLsizei   bufSize = (GLsizei  )luaL_checkinteger(L, 2);
    GLsizei * length  = (GLsizei *)luaL_checkudata(L, 3, "GLsizei *");
    GLchar *  infoLog = (GLchar * )luaL_checkstring(L, 4);

    glGetShaderInfoLog(shader, bufSize, length, infoLog);
    return 0;
}

int GlGetShaderSource(lua_State *L) {
    GLuint    shader  = (GLuint   )luaL_checkinteger(L, 1);
    GLsizei   bufSize = (GLsizei  )luaL_checkinteger(L, 2);
    GLsizei * length  = (GLsizei *)luaL_checkudata(L, 3, "GLsizei *");
    GLchar *  source  = (GLchar * )luaL_checkstring(L, 4);

    glGetShaderSource(shader, bufSize, length, source);
    return 0;
}

int GlGetShaderiv(lua_State *L) {
    GLuint  shader = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetShaderiv(shader, pname, params);
    return 0;
}

int GlGetUniformLocation(lua_State *L) {
    GLuint         program = (GLuint        )luaL_checkinteger(L, 1);
    const GLchar * name    = (const GLchar *)luaL_checkstring(L, 2);

    glGetUniformLocation(program, name);
    return 0;
}

int GlGetUniformfv(lua_State *L) {
    GLuint    program  = (GLuint   )luaL_checkinteger(L, 1);
    GLint     location = (GLint    )luaL_checkinteger(L, 2);
    GLfloat * params   = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetUniformfv(program, location, params);
    return 0;
}

int GlGetUniformiv(lua_State *L) {
    GLuint  program  = (GLuint )luaL_checkinteger(L, 1);
    GLint   location = (GLint  )luaL_checkinteger(L, 2);
    GLint * params   = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetUniformiv(program, location, params);
    return 0;
}

int GlGetVertexAttribPointerv(lua_State *L) {
    GLuint  index   = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname   = (GLenum )luaL_checkinteger(L, 2);
    void ** pointer = (void **)luaL_checkudata(L, 3, "void **");

    glGetVertexAttribPointerv(index, pname, pointer);
    return 0;
}

int GlGetVertexAttribdv(lua_State *L) {
    GLuint     index  = (GLuint    )luaL_checkinteger(L, 1);
    GLenum     pname  = (GLenum    )luaL_checkinteger(L, 2);
    GLdouble * params = (GLdouble *)luaL_checkudata(L, 3, "GLdouble *");

    glGetVertexAttribdv(index, pname, params);
    return 0;
}

int GlGetVertexAttribfv(lua_State *L) {
    GLuint    index  = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * params = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetVertexAttribfv(index, pname, params);
    return 0;
}

int GlGetVertexAttribiv(lua_State *L) {
    GLuint  index  = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetVertexAttribiv(index, pname, params);
    return 0;
}

int GlIsProgram(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);

    glIsProgram(program);
    return 0;
}

int GlIsShader(lua_State *L) {
    GLuint shader = (GLuint)luaL_checkinteger(L, 1);

    glIsShader(shader);
    return 0;
}

int GlLinkProgram(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);

    glLinkProgram(program);
    return 0;
}

int GlShaderSource(lua_State *L) {
    GLuint               shader = (GLuint              )luaL_checkinteger(L, 1);
    GLsizei              count  = (GLsizei             )luaL_checkinteger(L, 2);
    const GLchar *const* string = (const GLchar *const*)luaL_checkstring(L, 3);
    const GLint *        length = (const GLint *       )luaL_checkudata(L, 4, "const GLint *");

    glShaderSource(shader, count, string, length);
    return 0;
}

int GlStencilFuncSeparate(lua_State *L) {
    GLenum face = (GLenum)luaL_checkinteger(L, 1);
    GLenum func = (GLenum)luaL_checkinteger(L, 2);
    GLint  ref  = (GLint )luaL_checkinteger(L, 3);
    GLuint mask = (GLuint)luaL_checkinteger(L, 4);

    glStencilFuncSeparate(face, func, ref, mask);
    return 0;
}

int GlStencilMaskSeparate(lua_State *L) {
    GLenum face = (GLenum)luaL_checkinteger(L, 1);
    GLuint mask = (GLuint)luaL_checkinteger(L, 2);

    glStencilMaskSeparate(face, mask);
    return 0;
}

int GlStencilOpSeparate(lua_State *L) {
    GLenum face   = (GLenum)luaL_checkinteger(L, 1);
    GLenum sfail  = (GLenum)luaL_checkinteger(L, 2);
    GLenum dpfail = (GLenum)luaL_checkinteger(L, 3);
    GLenum dppass = (GLenum)luaL_checkinteger(L, 4);

    glStencilOpSeparate(face, sfail, dpfail, dppass);
    return 0;
}

int GlUniform1f(lua_State *L) {
    GLint   location = (GLint  )luaL_checkinteger(L, 1);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 2);

    glUniform1f(location, v0);
    return 0;
}

int GlUniform1fv(lua_State *L) {
    GLint           location = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 2);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glUniform1fv(location, count, value);
    return 0;
}

int GlUniform1i(lua_State *L) {
    GLint location = (GLint)luaL_checkinteger(L, 1);
    GLint v0       = (GLint)luaL_checkinteger(L, 2);

    glUniform1i(location, v0);
    return 0;
}

int GlUniform1iv(lua_State *L) {
    GLint         location = (GLint        )luaL_checkinteger(L, 1);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 2);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glUniform1iv(location, count, value);
    return 0;
}

int GlUniform2f(lua_State *L) {
    GLint   location = (GLint  )luaL_checkinteger(L, 1);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 2);
    GLfloat v1       = (GLfloat)luaL_checknumber(L, 3);

    glUniform2f(location, v0, v1);
    return 0;
}

int GlUniform2fv(lua_State *L) {
    GLint           location = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 2);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glUniform2fv(location, count, value);
    return 0;
}

int GlUniform2i(lua_State *L) {
    GLint location = (GLint)luaL_checkinteger(L, 1);
    GLint v0       = (GLint)luaL_checkinteger(L, 2);
    GLint v1       = (GLint)luaL_checkinteger(L, 3);

    glUniform2i(location, v0, v1);
    return 0;
}

int GlUniform2iv(lua_State *L) {
    GLint         location = (GLint        )luaL_checkinteger(L, 1);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 2);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glUniform2iv(location, count, value);
    return 0;
}

int GlUniform3f(lua_State *L) {
    GLint   location = (GLint  )luaL_checkinteger(L, 1);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 2);
    GLfloat v1       = (GLfloat)luaL_checknumber(L, 3);
    GLfloat v2       = (GLfloat)luaL_checknumber(L, 4);

    glUniform3f(location, v0, v1, v2);
    return 0;
}

int GlUniform3fv(lua_State *L) {
    GLint           location = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 2);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glUniform3fv(location, count, value);
    return 0;
}

int GlUniform3i(lua_State *L) {
    GLint location = (GLint)luaL_checkinteger(L, 1);
    GLint v0       = (GLint)luaL_checkinteger(L, 2);
    GLint v1       = (GLint)luaL_checkinteger(L, 3);
    GLint v2       = (GLint)luaL_checkinteger(L, 4);

    glUniform3i(location, v0, v1, v2);
    return 0;
}

int GlUniform3iv(lua_State *L) {
    GLint         location = (GLint        )luaL_checkinteger(L, 1);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 2);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glUniform3iv(location, count, value);
    return 0;
}

int GlUniform4f(lua_State *L) {
    GLint   location = (GLint  )luaL_checkinteger(L, 1);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 2);
    GLfloat v1       = (GLfloat)luaL_checknumber(L, 3);
    GLfloat v2       = (GLfloat)luaL_checknumber(L, 4);
    GLfloat v3       = (GLfloat)luaL_checknumber(L, 5);

    glUniform4f(location, v0, v1, v2, v3);
    return 0;
}

int GlUniform4fv(lua_State *L) {
    GLint           location = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 2);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glUniform4fv(location, count, value);
    return 0;
}

int GlUniform4i(lua_State *L) {
    GLint location = (GLint)luaL_checkinteger(L, 1);
    GLint v0       = (GLint)luaL_checkinteger(L, 2);
    GLint v1       = (GLint)luaL_checkinteger(L, 3);
    GLint v2       = (GLint)luaL_checkinteger(L, 4);
    GLint v3       = (GLint)luaL_checkinteger(L, 5);

    glUniform4i(location, v0, v1, v2, v3);
    return 0;
}

int GlUniform4iv(lua_State *L) {
    GLint         location = (GLint        )luaL_checkinteger(L, 1);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 2);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glUniform4iv(location, count, value);
    return 0;
}

int GlUniformMatrix2fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix2fv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix3fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix3fv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix4fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix4fv(location, count, transpose, value);
    return 0;
}

int GlUseProgram(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);

    glUseProgram(program);
    return 0;
}

int GlValidateProgram(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);

    glValidateProgram(program);
    return 0;
}

int GlVertexAttrib1d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);

    glVertexAttrib1d(index, x);
    return 0;
}

int GlVertexAttrib1dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttrib1dv(index, v);
    return 0;
}

int GlVertexAttrib1f(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLfloat x     = (GLfloat)luaL_checknumber(L, 2);

    glVertexAttrib1f(index, x);
    return 0;
}

int GlVertexAttrib1fv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLfloat * v     = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glVertexAttrib1fv(index, v);
    return 0;
}

int GlVertexAttrib1s(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLshort x     = (GLshort)luaL_checkinteger(L, 2);

    glVertexAttrib1s(index, x);
    return 0;
}

int GlVertexAttrib1sv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLshort * v     = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glVertexAttrib1sv(index, v);
    return 0;
}

int GlVertexAttrib2d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y     = (GLdouble)luaL_checknumber(L, 3);

    glVertexAttrib2d(index, x, y);
    return 0;
}

int GlVertexAttrib2dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttrib2dv(index, v);
    return 0;
}

int GlVertexAttrib2f(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLfloat x     = (GLfloat)luaL_checknumber(L, 2);
    GLfloat y     = (GLfloat)luaL_checknumber(L, 3);

    glVertexAttrib2f(index, x, y);
    return 0;
}

int GlVertexAttrib2fv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLfloat * v     = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glVertexAttrib2fv(index, v);
    return 0;
}

int GlVertexAttrib2s(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLshort x     = (GLshort)luaL_checkinteger(L, 2);
    GLshort y     = (GLshort)luaL_checkinteger(L, 3);

    glVertexAttrib2s(index, x, y);
    return 0;
}

int GlVertexAttrib2sv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLshort * v     = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glVertexAttrib2sv(index, v);
    return 0;
}

int GlVertexAttrib3d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y     = (GLdouble)luaL_checknumber(L, 3);
    GLdouble z     = (GLdouble)luaL_checknumber(L, 4);

    glVertexAttrib3d(index, x, y, z);
    return 0;
}

int GlVertexAttrib3dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttrib3dv(index, v);
    return 0;
}

int GlVertexAttrib3f(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLfloat x     = (GLfloat)luaL_checknumber(L, 2);
    GLfloat y     = (GLfloat)luaL_checknumber(L, 3);
    GLfloat z     = (GLfloat)luaL_checknumber(L, 4);

    glVertexAttrib3f(index, x, y, z);
    return 0;
}

int GlVertexAttrib3fv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLfloat * v     = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glVertexAttrib3fv(index, v);
    return 0;
}

int GlVertexAttrib3s(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLshort x     = (GLshort)luaL_checkinteger(L, 2);
    GLshort y     = (GLshort)luaL_checkinteger(L, 3);
    GLshort z     = (GLshort)luaL_checkinteger(L, 4);

    glVertexAttrib3s(index, x, y, z);
    return 0;
}

int GlVertexAttrib3sv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLshort * v     = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glVertexAttrib3sv(index, v);
    return 0;
}

int GlVertexAttrib4Nbv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLbyte * v     = (const GLbyte *)luaL_checkudata(L, 2, "const GLbyte *");

    glVertexAttrib4Nbv(index, v);
    return 0;
}

int GlVertexAttrib4Niv(lua_State *L) {
    GLuint        index = (GLuint       )luaL_checkinteger(L, 1);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glVertexAttrib4Niv(index, v);
    return 0;
}

int GlVertexAttrib4Nsv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLshort * v     = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glVertexAttrib4Nsv(index, v);
    return 0;
}

int GlVertexAttrib4Nub(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLubyte x     = (GLubyte)luaL_checkinteger(L, 2);
    GLubyte y     = (GLubyte)luaL_checkinteger(L, 3);
    GLubyte z     = (GLubyte)luaL_checkinteger(L, 4);
    GLubyte w     = (GLubyte)luaL_checkinteger(L, 5);

    glVertexAttrib4Nub(index, x, y, z, w);
    return 0;
}

int GlVertexAttrib4Nubv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLubyte * v     = (const GLubyte *)luaL_checkudata(L, 2, "const GLubyte *");

    glVertexAttrib4Nubv(index, v);
    return 0;
}

int GlVertexAttrib4Nuiv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLuint * v     = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glVertexAttrib4Nuiv(index, v);
    return 0;
}

int GlVertexAttrib4Nusv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLushort * v     = (const GLushort *)luaL_checkudata(L, 2, "const GLushort *");

    glVertexAttrib4Nusv(index, v);
    return 0;
}

int GlVertexAttrib4bv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLbyte * v     = (const GLbyte *)luaL_checkudata(L, 2, "const GLbyte *");

    glVertexAttrib4bv(index, v);
    return 0;
}

int GlVertexAttrib4d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y     = (GLdouble)luaL_checknumber(L, 3);
    GLdouble z     = (GLdouble)luaL_checknumber(L, 4);
    GLdouble w     = (GLdouble)luaL_checknumber(L, 5);

    glVertexAttrib4d(index, x, y, z, w);
    return 0;
}

int GlVertexAttrib4dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttrib4dv(index, v);
    return 0;
}

int GlVertexAttrib4f(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLfloat x     = (GLfloat)luaL_checknumber(L, 2);
    GLfloat y     = (GLfloat)luaL_checknumber(L, 3);
    GLfloat z     = (GLfloat)luaL_checknumber(L, 4);
    GLfloat w     = (GLfloat)luaL_checknumber(L, 5);

    glVertexAttrib4f(index, x, y, z, w);
    return 0;
}

int GlVertexAttrib4fv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLfloat * v     = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glVertexAttrib4fv(index, v);
    return 0;
}

int GlVertexAttrib4iv(lua_State *L) {
    GLuint        index = (GLuint       )luaL_checkinteger(L, 1);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glVertexAttrib4iv(index, v);
    return 0;
}

int GlVertexAttrib4s(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLshort x     = (GLshort)luaL_checkinteger(L, 2);
    GLshort y     = (GLshort)luaL_checkinteger(L, 3);
    GLshort z     = (GLshort)luaL_checkinteger(L, 4);
    GLshort w     = (GLshort)luaL_checkinteger(L, 5);

    glVertexAttrib4s(index, x, y, z, w);
    return 0;
}

int GlVertexAttrib4sv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLshort * v     = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glVertexAttrib4sv(index, v);
    return 0;
}

int GlVertexAttrib4ubv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLubyte * v     = (const GLubyte *)luaL_checkudata(L, 2, "const GLubyte *");

    glVertexAttrib4ubv(index, v);
    return 0;
}

int GlVertexAttrib4uiv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLuint * v     = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glVertexAttrib4uiv(index, v);
    return 0;
}

int GlVertexAttrib4usv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLushort * v     = (const GLushort *)luaL_checkudata(L, 2, "const GLushort *");

    glVertexAttrib4usv(index, v);
    return 0;
}

int GlVertexAttribPointer(lua_State *L) {
    GLuint       index      = (GLuint      )luaL_checkinteger(L, 1);
    GLint        size       = (GLint       )luaL_checkinteger(L, 2);
    GLenum       type       = (GLenum      )luaL_checkinteger(L, 3);
    GLboolean    normalized = (GLboolean   )luaL_checkinteger(L, 4);
    GLsizei      stride     = (GLsizei     )luaL_checkinteger(L, 5);
    const void * pointer    = (const void *)luaL_checkudata(L, 6, "const void *");

    glVertexAttribPointer(index, size, type, normalized, stride, pointer);
    return 0;
}

int GlUniformMatrix2x3fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix2x3fv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix2x4fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix2x4fv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix3x2fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix3x2fv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix3x4fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix3x4fv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix4x2fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix4x2fv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix4x3fv(lua_State *L) {
    GLint           location  = (GLint          )luaL_checkinteger(L, 1);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 2);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 3);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glUniformMatrix4x3fv(location, count, transpose, value);
    return 0;
}

int GlBeginConditionalRender(lua_State *L) {
    GLuint id   = (GLuint)luaL_checkinteger(L, 1);
    GLenum mode = (GLenum)luaL_checkinteger(L, 2);

    glBeginConditionalRender(id, mode);
    return 0;
}

int GlBeginTransformFeedback(lua_State *L) {
    GLenum primitiveMode = (GLenum)luaL_checkinteger(L, 1);

    glBeginTransformFeedback(primitiveMode);
    return 0;
}

int GlBindBufferBase(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint index  = (GLuint)luaL_checkinteger(L, 2);
    GLuint buffer = (GLuint)luaL_checkinteger(L, 3);

    glBindBufferBase(target, index, buffer);
    return 0;
}

int GlBindBufferRange(lua_State *L) {
    GLenum     target = (GLenum    )luaL_checkinteger(L, 1);
    GLuint     index  = (GLuint    )luaL_checkinteger(L, 2);
    GLuint     buffer = (GLuint    )luaL_checkinteger(L, 3);
    GLintptr   offset = (GLintptr  )luaL_checkinteger(L, 4);
    GLsizeiptr size   = (GLsizeiptr)luaL_checkinteger(L, 5);

    glBindBufferRange(target, index, buffer, offset, size);
    return 0;
}

int GlBindFragDataLocation(lua_State *L) {
    GLuint         program = (GLuint        )luaL_checkinteger(L, 1);
    GLuint         color   = (GLuint        )luaL_checkinteger(L, 2);
    const GLchar * name    = (const GLchar *)luaL_checkstring(L, 3);

    glBindFragDataLocation(program, color, name);
    return 0;
}

int GlBindFramebuffer(lua_State *L) {
    GLenum target      = (GLenum)luaL_checkinteger(L, 1);
    GLuint framebuffer = (GLuint)luaL_checkinteger(L, 2);

    glBindFramebuffer(target, framebuffer);
    return 0;
}

int GlBindRenderbuffer(lua_State *L) {
    GLenum target       = (GLenum)luaL_checkinteger(L, 1);
    GLuint renderbuffer = (GLuint)luaL_checkinteger(L, 2);

    glBindRenderbuffer(target, renderbuffer);
    return 0;
}

int GlBindVertexArray(lua_State *L) {
    GLuint ren_array = (GLuint)luaL_checkinteger(L, 1);

    glBindVertexArray(ren_array);
    return 0;
}

int GlBlitFramebuffer(lua_State *L) {
    GLint      srcX0  = (GLint     )luaL_checkinteger(L, 1);
    GLint      srcY0  = (GLint     )luaL_checkinteger(L, 2);
    GLint      srcX1  = (GLint     )luaL_checkinteger(L, 3);
    GLint      srcY1  = (GLint     )luaL_checkinteger(L, 4);
    GLint      dstX0  = (GLint     )luaL_checkinteger(L, 5);
    GLint      dstY0  = (GLint     )luaL_checkinteger(L, 6);
    GLint      dstX1  = (GLint     )luaL_checkinteger(L, 7);
    GLint      dstY1  = (GLint     )luaL_checkinteger(L, 8);
    GLbitfield mask   = (GLbitfield)luaL_checkinteger(L, 9);
    GLenum     filter = (GLenum    )luaL_checkinteger(L, 10);

    glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
    return 0;
}

int GlCheckFramebufferStatus(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);

    glCheckFramebufferStatus(target);
    return 0;
}

int GlClampColor(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLenum clamp  = (GLenum)luaL_checkinteger(L, 2);

    glClampColor(target, clamp);
    return 0;
}

int GlClearBufferfi(lua_State *L) {
    GLenum  buffer     = (GLenum )luaL_checkinteger(L, 1);
    GLint   drawbuffer = (GLint  )luaL_checkinteger(L, 2);
    GLfloat depth      = (GLfloat)luaL_checknumber(L, 3);
    GLint   stencil    = (GLint  )luaL_checkinteger(L, 4);

    glClearBufferfi(buffer, drawbuffer, depth, stencil);
    return 0;
}

int GlClearBufferfv(lua_State *L) {
    GLenum          buffer     = (GLenum         )luaL_checkinteger(L, 1);
    GLint           drawbuffer = (GLint          )luaL_checkinteger(L, 2);
    const GLfloat * value      = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glClearBufferfv(buffer, drawbuffer, value);
    return 0;
}

int GlClearBufferiv(lua_State *L) {
    GLenum        buffer     = (GLenum       )luaL_checkinteger(L, 1);
    GLint         drawbuffer = (GLint        )luaL_checkinteger(L, 2);
    const GLint * value      = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glClearBufferiv(buffer, drawbuffer, value);
    return 0;
}

int GlClearBufferuiv(lua_State *L) {
    GLenum         buffer     = (GLenum        )luaL_checkinteger(L, 1);
    GLint          drawbuffer = (GLint         )luaL_checkinteger(L, 2);
    const GLuint * value      = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glClearBufferuiv(buffer, drawbuffer, value);
    return 0;
}

int GlColorMaski(lua_State *L) {
    GLuint    index = (GLuint   )luaL_checkinteger(L, 1);
    GLboolean r     = (GLboolean)luaL_checkinteger(L, 2);
    GLboolean g     = (GLboolean)luaL_checkinteger(L, 3);
    GLboolean b     = (GLboolean)luaL_checkinteger(L, 4);
    GLboolean a     = (GLboolean)luaL_checkinteger(L, 5);

    glColorMaski(index, r, g, b, a);
    return 0;
}

int GlDeleteFramebuffers(lua_State *L) {
    GLsizei        n            = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * framebuffers = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteFramebuffers(n, framebuffers);
    return 0;
}

int GlDeleteRenderbuffers(lua_State *L) {
    GLsizei        n             = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * renderbuffers = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteRenderbuffers(n, renderbuffers);
    return 0;
}

int GlDeleteVertexArrays(lua_State *L) {
    GLsizei        n      = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * arrays = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteVertexArrays(n, arrays);
    return 0;
}

int GlDisablei(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint index  = (GLuint)luaL_checkinteger(L, 2);

    glDisablei(target, index);
    return 0;
}

int GlEnablei(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint index  = (GLuint)luaL_checkinteger(L, 2);

    glEnablei(target, index);
    return 0;
}

int GlEndConditionalRender(lua_State *L) {

    glEndConditionalRender();
    return 0;
}

int GlEndTransformFeedback(lua_State *L) {

    glEndTransformFeedback();
    return 0;
}

int GlFlushMappedBufferRange(lua_State *L) {
    GLenum     target = (GLenum    )luaL_checkinteger(L, 1);
    GLintptr   offset = (GLintptr  )luaL_checkinteger(L, 2);
    GLsizeiptr length = (GLsizeiptr)luaL_checkinteger(L, 3);

    glFlushMappedBufferRange(target, offset, length);
    return 0;
}

int GlFramebufferRenderbuffer(lua_State *L) {
    GLenum target             = (GLenum)luaL_checkinteger(L, 1);
    GLenum attachment         = (GLenum)luaL_checkinteger(L, 2);
    GLenum renderbuffertarget = (GLenum)luaL_checkinteger(L, 3);
    GLuint renderbuffer       = (GLuint)luaL_checkinteger(L, 4);

    glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    return 0;
}

int GlFramebufferTexture1D(lua_State *L) {
    GLenum target     = (GLenum)luaL_checkinteger(L, 1);
    GLenum attachment = (GLenum)luaL_checkinteger(L, 2);
    GLenum textarget  = (GLenum)luaL_checkinteger(L, 3);
    GLuint texture    = (GLuint)luaL_checkinteger(L, 4);
    GLint  level      = (GLint )luaL_checkinteger(L, 5);

    glFramebufferTexture1D(target, attachment, textarget, texture, level);
    return 0;
}

int GlFramebufferTexture2D(lua_State *L) {
    GLenum target     = (GLenum)luaL_checkinteger(L, 1);
    GLenum attachment = (GLenum)luaL_checkinteger(L, 2);
    GLenum textarget  = (GLenum)luaL_checkinteger(L, 3);
    GLuint texture    = (GLuint)luaL_checkinteger(L, 4);
    GLint  level      = (GLint )luaL_checkinteger(L, 5);

    glFramebufferTexture2D(target, attachment, textarget, texture, level);
    return 0;
}

int GlFramebufferTexture3D(lua_State *L) {
    GLenum target     = (GLenum)luaL_checkinteger(L, 1);
    GLenum attachment = (GLenum)luaL_checkinteger(L, 2);
    GLenum textarget  = (GLenum)luaL_checkinteger(L, 3);
    GLuint texture    = (GLuint)luaL_checkinteger(L, 4);
    GLint  level      = (GLint )luaL_checkinteger(L, 5);
    GLint  zoffset    = (GLint )luaL_checkinteger(L, 6);

    glFramebufferTexture3D(target, attachment, textarget, texture, level, zoffset);
    return 0;
}

int GlFramebufferTextureLayer(lua_State *L) {
    GLenum target     = (GLenum)luaL_checkinteger(L, 1);
    GLenum attachment = (GLenum)luaL_checkinteger(L, 2);
    GLuint texture    = (GLuint)luaL_checkinteger(L, 3);
    GLint  level      = (GLint )luaL_checkinteger(L, 4);
    GLint  layer      = (GLint )luaL_checkinteger(L, 5);

    glFramebufferTextureLayer(target, attachment, texture, level, layer);
    return 0;
}

int GlGenFramebuffers(lua_State *L) {
    GLsizei  n            = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * framebuffers = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenFramebuffers(n, framebuffers);
    return 0;
}

int GlGenRenderbuffers(lua_State *L) {
    GLsizei  n             = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * renderbuffers = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenRenderbuffers(n, renderbuffers);
    return 0;
}

int GlGenVertexArrays(lua_State *L) {
    GLsizei  n      = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * arrays = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenVertexArrays(n, arrays);
    return 0;
}

int GlGenerateMipmap(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);

    glGenerateMipmap(target);
    return 0;
}

int GlGetBooleani_v(lua_State *L) {
    GLenum      target = (GLenum     )luaL_checkinteger(L, 1);
    GLuint      index  = (GLuint     )luaL_checkinteger(L, 2);
    GLboolean * data   = (GLboolean *)luaL_checkudata(L, 3, "GLboolean *");

    glGetBooleani_v(target, index, data);
    return 0;
}

int GlGetFragDataLocation(lua_State *L) {
    GLuint         program = (GLuint        )luaL_checkinteger(L, 1);
    const GLchar * name    = (const GLchar *)luaL_checkstring(L, 2);

    glGetFragDataLocation(program, name);
    return 0;
}

int GlGetFramebufferAttachmentParameteriv(lua_State *L) {
    GLenum  target     = (GLenum )luaL_checkinteger(L, 1);
    GLenum  attachment = (GLenum )luaL_checkinteger(L, 2);
    GLenum  pname      = (GLenum )luaL_checkinteger(L, 3);
    GLint * params     = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetFramebufferAttachmentParameteriv(target, attachment, pname, params);
    return 0;
}

int GlGetIntegeri_v(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLuint  index  = (GLuint )luaL_checkinteger(L, 2);
    GLint * data   = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetIntegeri_v(target, index, data);
    return 0;
}

int GlGetRenderbufferParameteriv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetRenderbufferParameteriv(target, pname, params);
    return 0;
}

int GlGetStringi(lua_State *L) {
    GLenum name  = (GLenum)luaL_checkinteger(L, 1);
    GLuint index = (GLuint)luaL_checkinteger(L, 2);

    glGetStringi(name, index);
    return 0;
}

int GlGetTexParameterIiv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetTexParameterIiv(target, pname, params);
    return 0;
}

int GlGetTexParameterIuiv(lua_State *L) {
    GLenum   target = (GLenum  )luaL_checkinteger(L, 1);
    GLenum   pname  = (GLenum  )luaL_checkinteger(L, 2);
    GLuint * params = (GLuint *)luaL_checkudata(L, 3, "GLuint *");

    glGetTexParameterIuiv(target, pname, params);
    return 0;
}

int GlGetTransformFeedbackVarying(lua_State *L) {
    GLuint    program = (GLuint   )luaL_checkinteger(L, 1);
    GLuint    index   = (GLuint   )luaL_checkinteger(L, 2);
    GLsizei   bufSize = (GLsizei  )luaL_checkinteger(L, 3);
    GLsizei * length  = (GLsizei *)luaL_checkudata(L, 4, "GLsizei *");
    GLsizei * size    = (GLsizei *)luaL_checkudata(L, 5, "GLsizei *");
    GLenum *  type    = (GLenum * )luaL_checkudata(L, 6, "GLenum *");
    GLchar *  name    = (GLchar * )luaL_checkstring(L, 7);

    glGetTransformFeedbackVarying(program, index, bufSize, length, size, type, name);
    return 0;
}

int GlGetUniformuiv(lua_State *L) {
    GLuint   program  = (GLuint  )luaL_checkinteger(L, 1);
    GLint    location = (GLint   )luaL_checkinteger(L, 2);
    GLuint * params   = (GLuint *)luaL_checkudata(L, 3, "GLuint *");

    glGetUniformuiv(program, location, params);
    return 0;
}

int GlGetVertexAttribIiv(lua_State *L) {
    GLuint  index  = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetVertexAttribIiv(index, pname, params);
    return 0;
}

int GlGetVertexAttribIuiv(lua_State *L) {
    GLuint   index  = (GLuint  )luaL_checkinteger(L, 1);
    GLenum   pname  = (GLenum  )luaL_checkinteger(L, 2);
    GLuint * params = (GLuint *)luaL_checkudata(L, 3, "GLuint *");

    glGetVertexAttribIuiv(index, pname, params);
    return 0;
}

int GlIsEnabledi(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint index  = (GLuint)luaL_checkinteger(L, 2);

    glIsEnabledi(target, index);
    return 0;
}

int GlIsFramebuffer(lua_State *L) {
    GLuint framebuffer = (GLuint)luaL_checkinteger(L, 1);

    glIsFramebuffer(framebuffer);
    return 0;
}

int GlIsRenderbuffer(lua_State *L) {
    GLuint renderbuffer = (GLuint)luaL_checkinteger(L, 1);

    glIsRenderbuffer(renderbuffer);
    return 0;
}

int GlIsVertexArray(lua_State *L) {
    GLuint ren_array = (GLuint)luaL_checkinteger(L, 1);

    glIsVertexArray(ren_array);
    return 0;
}

int GlMapBufferRange(lua_State *L) {
    GLenum     target = (GLenum    )luaL_checkinteger(L, 1);
    GLintptr   offset = (GLintptr  )luaL_checkinteger(L, 2);
    GLsizeiptr length = (GLsizeiptr)luaL_checkinteger(L, 3);
    GLbitfield access = (GLbitfield)luaL_checkinteger(L, 4);

    glMapBufferRange(target, offset, length, access);
    return 0;
}

int GlRenderbufferStorage(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 2);
    GLsizei width          = (GLsizei)luaL_checkinteger(L, 3);
    GLsizei height         = (GLsizei)luaL_checkinteger(L, 4);

    glRenderbufferStorage(target, internalformat, width, height);
    return 0;
}

int GlRenderbufferStorageMultisample(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLsizei samples        = (GLsizei)luaL_checkinteger(L, 2);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 3);
    GLsizei width          = (GLsizei)luaL_checkinteger(L, 4);
    GLsizei height         = (GLsizei)luaL_checkinteger(L, 5);

    glRenderbufferStorageMultisample(target, samples, internalformat, width, height);
    return 0;
}

int GlTexParameterIiv(lua_State *L) {
    GLenum        target = (GLenum       )luaL_checkinteger(L, 1);
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * params = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glTexParameterIiv(target, pname, params);
    return 0;
}

int GlTexParameterIuiv(lua_State *L) {
    GLenum         target = (GLenum        )luaL_checkinteger(L, 1);
    GLenum         pname  = (GLenum        )luaL_checkinteger(L, 2);
    const GLuint * params = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glTexParameterIuiv(target, pname, params);
    return 0;
}

int GlTransformFeedbackVaryings(lua_State *L) {
    GLuint               program    = (GLuint              )luaL_checkinteger(L, 1);
    GLsizei              count      = (GLsizei             )luaL_checkinteger(L, 2);
    const GLchar *const* varyings   = (const GLchar *const*)luaL_checkstring(L, 3);
    GLenum               bufferMode = (GLenum              )luaL_checkinteger(L, 4);

    glTransformFeedbackVaryings(program, count, varyings, bufferMode);
    return 0;
}

int GlUniform1ui(lua_State *L) {
    GLint  location = (GLint )luaL_checkinteger(L, 1);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 2);

    glUniform1ui(location, v0);
    return 0;
}

int GlUniform1uiv(lua_State *L) {
    GLint          location = (GLint         )luaL_checkinteger(L, 1);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glUniform1uiv(location, count, value);
    return 0;
}

int GlUniform2ui(lua_State *L) {
    GLint  location = (GLint )luaL_checkinteger(L, 1);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 2);
    GLuint v1       = (GLuint)luaL_checkinteger(L, 3);

    glUniform2ui(location, v0, v1);
    return 0;
}

int GlUniform2uiv(lua_State *L) {
    GLint          location = (GLint         )luaL_checkinteger(L, 1);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glUniform2uiv(location, count, value);
    return 0;
}

int GlUniform3ui(lua_State *L) {
    GLint  location = (GLint )luaL_checkinteger(L, 1);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 2);
    GLuint v1       = (GLuint)luaL_checkinteger(L, 3);
    GLuint v2       = (GLuint)luaL_checkinteger(L, 4);

    glUniform3ui(location, v0, v1, v2);
    return 0;
}

int GlUniform3uiv(lua_State *L) {
    GLint          location = (GLint         )luaL_checkinteger(L, 1);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glUniform3uiv(location, count, value);
    return 0;
}

int GlUniform4ui(lua_State *L) {
    GLint  location = (GLint )luaL_checkinteger(L, 1);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 2);
    GLuint v1       = (GLuint)luaL_checkinteger(L, 3);
    GLuint v2       = (GLuint)luaL_checkinteger(L, 4);
    GLuint v3       = (GLuint)luaL_checkinteger(L, 5);

    glUniform4ui(location, v0, v1, v2, v3);
    return 0;
}

int GlUniform4uiv(lua_State *L) {
    GLint          location = (GLint         )luaL_checkinteger(L, 1);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glUniform4uiv(location, count, value);
    return 0;
}

int GlVertexAttribI1i(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLint  x     = (GLint )luaL_checkinteger(L, 2);

    glVertexAttribI1i(index, x);
    return 0;
}

int GlVertexAttribI1iv(lua_State *L) {
    GLuint        index = (GLuint       )luaL_checkinteger(L, 1);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glVertexAttribI1iv(index, v);
    return 0;
}

int GlVertexAttribI1ui(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLuint x     = (GLuint)luaL_checkinteger(L, 2);

    glVertexAttribI1ui(index, x);
    return 0;
}

int GlVertexAttribI1uiv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLuint * v     = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glVertexAttribI1uiv(index, v);
    return 0;
}

int GlVertexAttribI2i(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLint  x     = (GLint )luaL_checkinteger(L, 2);
    GLint  y     = (GLint )luaL_checkinteger(L, 3);

    glVertexAttribI2i(index, x, y);
    return 0;
}

int GlVertexAttribI2iv(lua_State *L) {
    GLuint        index = (GLuint       )luaL_checkinteger(L, 1);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glVertexAttribI2iv(index, v);
    return 0;
}

int GlVertexAttribI2ui(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLuint x     = (GLuint)luaL_checkinteger(L, 2);
    GLuint y     = (GLuint)luaL_checkinteger(L, 3);

    glVertexAttribI2ui(index, x, y);
    return 0;
}

int GlVertexAttribI2uiv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLuint * v     = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glVertexAttribI2uiv(index, v);
    return 0;
}

int GlVertexAttribI3i(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLint  x     = (GLint )luaL_checkinteger(L, 2);
    GLint  y     = (GLint )luaL_checkinteger(L, 3);
    GLint  z     = (GLint )luaL_checkinteger(L, 4);

    glVertexAttribI3i(index, x, y, z);
    return 0;
}

int GlVertexAttribI3iv(lua_State *L) {
    GLuint        index = (GLuint       )luaL_checkinteger(L, 1);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glVertexAttribI3iv(index, v);
    return 0;
}

int GlVertexAttribI3ui(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLuint x     = (GLuint)luaL_checkinteger(L, 2);
    GLuint y     = (GLuint)luaL_checkinteger(L, 3);
    GLuint z     = (GLuint)luaL_checkinteger(L, 4);

    glVertexAttribI3ui(index, x, y, z);
    return 0;
}

int GlVertexAttribI3uiv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLuint * v     = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glVertexAttribI3uiv(index, v);
    return 0;
}

int GlVertexAttribI4bv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLbyte * v     = (const GLbyte *)luaL_checkudata(L, 2, "const GLbyte *");

    glVertexAttribI4bv(index, v);
    return 0;
}

int GlVertexAttribI4i(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLint  x     = (GLint )luaL_checkinteger(L, 2);
    GLint  y     = (GLint )luaL_checkinteger(L, 3);
    GLint  z     = (GLint )luaL_checkinteger(L, 4);
    GLint  w     = (GLint )luaL_checkinteger(L, 5);

    glVertexAttribI4i(index, x, y, z, w);
    return 0;
}

int GlVertexAttribI4iv(lua_State *L) {
    GLuint        index = (GLuint       )luaL_checkinteger(L, 1);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glVertexAttribI4iv(index, v);
    return 0;
}

int GlVertexAttribI4sv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLshort * v     = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glVertexAttribI4sv(index, v);
    return 0;
}

int GlVertexAttribI4ubv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLubyte * v     = (const GLubyte *)luaL_checkudata(L, 2, "const GLubyte *");

    glVertexAttribI4ubv(index, v);
    return 0;
}

int GlVertexAttribI4ui(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);
    GLuint x     = (GLuint)luaL_checkinteger(L, 2);
    GLuint y     = (GLuint)luaL_checkinteger(L, 3);
    GLuint z     = (GLuint)luaL_checkinteger(L, 4);
    GLuint w     = (GLuint)luaL_checkinteger(L, 5);

    glVertexAttribI4ui(index, x, y, z, w);
    return 0;
}

int GlVertexAttribI4uiv(lua_State *L) {
    GLuint         index = (GLuint        )luaL_checkinteger(L, 1);
    const GLuint * v     = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glVertexAttribI4uiv(index, v);
    return 0;
}

int GlVertexAttribI4usv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLushort * v     = (const GLushort *)luaL_checkudata(L, 2, "const GLushort *");

    glVertexAttribI4usv(index, v);
    return 0;
}

int GlVertexAttribIPointer(lua_State *L) {
    GLuint       index   = (GLuint      )luaL_checkinteger(L, 1);
    GLint        size    = (GLint       )luaL_checkinteger(L, 2);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 3);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 4);
    const void * pointer = (const void *)luaL_checkudata(L, 5, "const void *");

    glVertexAttribIPointer(index, size, type, stride, pointer);
    return 0;
}

int GlCopyBufferSubData(lua_State *L) {
    GLenum     readTarget  = (GLenum    )luaL_checkinteger(L, 1);
    GLenum     writeTarget = (GLenum    )luaL_checkinteger(L, 2);
    GLintptr   readOffset  = (GLintptr  )luaL_checkinteger(L, 3);
    GLintptr   writeOffset = (GLintptr  )luaL_checkinteger(L, 4);
    GLsizeiptr size        = (GLsizeiptr)luaL_checkinteger(L, 5);

    glCopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);
    return 0;
}

int GlDrawArraysInstanced(lua_State *L) {
    GLenum  mode          = (GLenum )luaL_checkinteger(L, 1);
    GLint   first         = (GLint  )luaL_checkinteger(L, 2);
    GLsizei count         = (GLsizei)luaL_checkinteger(L, 3);
    GLsizei instancecount = (GLsizei)luaL_checkinteger(L, 4);

    glDrawArraysInstanced(mode, first, count, instancecount);
    return 0;
}

int GlDrawElementsInstanced(lua_State *L) {
    GLenum       mode          = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      count         = (GLsizei     )luaL_checkinteger(L, 2);
    GLenum       type          = (GLenum      )luaL_checkinteger(L, 3);
    const void * indices       = (const void *)luaL_checkudata(L, 4, "const void *");
    GLsizei      instancecount = (GLsizei     )luaL_checkinteger(L, 5);

    glDrawElementsInstanced(mode, count, type, indices, instancecount);
    return 0;
}

int GlGetActiveUniformBlockName(lua_State *L) {
    GLuint    program           = (GLuint   )luaL_checkinteger(L, 1);
    GLuint    uniformBlockIndex = (GLuint   )luaL_checkinteger(L, 2);
    GLsizei   bufSize           = (GLsizei  )luaL_checkinteger(L, 3);
    GLsizei * length            = (GLsizei *)luaL_checkudata(L, 4, "GLsizei *");
    GLchar *  uniformBlockName  = (GLchar * )luaL_checkstring(L, 5);

    glGetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName);
    return 0;
}

int GlGetActiveUniformBlockiv(lua_State *L) {
    GLuint  program           = (GLuint )luaL_checkinteger(L, 1);
    GLuint  uniformBlockIndex = (GLuint )luaL_checkinteger(L, 2);
    GLenum  pname             = (GLenum )luaL_checkinteger(L, 3);
    GLint * params            = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetActiveUniformBlockiv(program, uniformBlockIndex, pname, params);
    return 0;
}

int GlGetActiveUniformName(lua_State *L) {
    GLuint    program      = (GLuint   )luaL_checkinteger(L, 1);
    GLuint    uniformIndex = (GLuint   )luaL_checkinteger(L, 2);
    GLsizei   bufSize      = (GLsizei  )luaL_checkinteger(L, 3);
    GLsizei * length       = (GLsizei *)luaL_checkudata(L, 4, "GLsizei *");
    GLchar *  uniformName  = (GLchar * )luaL_checkstring(L, 5);

    glGetActiveUniformName(program, uniformIndex, bufSize, length, uniformName);
    return 0;
}

int GlGetActiveUniformsiv(lua_State *L) {
    GLuint         program        = (GLuint        )luaL_checkinteger(L, 1);
    GLsizei        uniformCount   = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * uniformIndices = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");
    GLenum         pname          = (GLenum        )luaL_checkinteger(L, 4);
    GLint *        params         = (GLint *       )luaL_checkudata(L, 5, "GLint *");

    glGetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params);
    return 0;
}

int GlGetUniformBlockIndex(lua_State *L) {
    GLuint         program          = (GLuint        )luaL_checkinteger(L, 1);
    const GLchar * uniformBlockName = (const GLchar *)luaL_checkstring(L, 2);

    glGetUniformBlockIndex(program, uniformBlockName);
    return 0;
}

int GlGetUniformIndices(lua_State *L) {
    GLuint               program        = (GLuint              )luaL_checkinteger(L, 1);
    GLsizei              uniformCount   = (GLsizei             )luaL_checkinteger(L, 2);
    const GLchar *const* uniformNames   = (const GLchar *const*)luaL_checkstring(L, 3);
    GLuint *             uniformIndices = (GLuint *            )luaL_checkudata(L, 4, "GLuint *");

    glGetUniformIndices(program, uniformCount, uniformNames, uniformIndices);
    return 0;
}

int GlPrimitiveRestartIndex(lua_State *L) {
    GLuint index = (GLuint)luaL_checkinteger(L, 1);

    glPrimitiveRestartIndex(index);
    return 0;
}

int GlTexBuffer(lua_State *L) {
    GLenum target         = (GLenum)luaL_checkinteger(L, 1);
    GLenum internalformat = (GLenum)luaL_checkinteger(L, 2);
    GLuint buffer         = (GLuint)luaL_checkinteger(L, 3);

    glTexBuffer(target, internalformat, buffer);
    return 0;
}

int GlUniformBlockBinding(lua_State *L) {
    GLuint program             = (GLuint)luaL_checkinteger(L, 1);
    GLuint uniformBlockIndex   = (GLuint)luaL_checkinteger(L, 2);
    GLuint uniformBlockBinding = (GLuint)luaL_checkinteger(L, 3);

    glUniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);
    return 0;
}

int GlClientWaitSync(lua_State *L) {
    GLsync     sync    = (GLsync    )luaL_checkinteger(L, 1);
    GLbitfield flags   = (GLbitfield)luaL_checkinteger(L, 2);
    GLuint64   timeout = (GLuint64  )luaL_checkinteger(L, 3);

    glClientWaitSync(sync, flags, timeout);
    return 0;
}

int GlDeleteSync(lua_State *L) {
    GLsync sync = (GLsync)luaL_checkinteger(L, 1);

    glDeleteSync(sync);
    return 0;
}

int GlDrawElementsBaseVertex(lua_State *L) {
    GLenum       mode       = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      count      = (GLsizei     )luaL_checkinteger(L, 2);
    GLenum       type       = (GLenum      )luaL_checkinteger(L, 3);
    const void * indices    = (const void *)luaL_checkudata(L, 4, "const void *");
    GLint        basevertex = (GLint       )luaL_checkinteger(L, 5);

    glDrawElementsBaseVertex(mode, count, type, indices, basevertex);
    return 0;
}

int GlDrawElementsInstancedBaseVertex(lua_State *L) {
    GLenum       mode          = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      count         = (GLsizei     )luaL_checkinteger(L, 2);
    GLenum       type          = (GLenum      )luaL_checkinteger(L, 3);
    const void * indices       = (const void *)luaL_checkudata(L, 4, "const void *");
    GLsizei      instancecount = (GLsizei     )luaL_checkinteger(L, 5);
    GLint        basevertex    = (GLint       )luaL_checkinteger(L, 6);

    glDrawElementsInstancedBaseVertex(mode, count, type, indices, instancecount, basevertex);
    return 0;
}

int GlDrawRangeElementsBaseVertex(lua_State *L) {
    GLenum       mode       = (GLenum      )luaL_checkinteger(L, 1);
    GLuint       start      = (GLuint      )luaL_checkinteger(L, 2);
    GLuint       end        = (GLuint      )luaL_checkinteger(L, 3);
    GLsizei      count      = (GLsizei     )luaL_checkinteger(L, 4);
    GLenum       type       = (GLenum      )luaL_checkinteger(L, 5);
    const void * indices    = (const void *)luaL_checkudata(L, 6, "const void *");
    GLint        basevertex = (GLint       )luaL_checkinteger(L, 7);

    glDrawRangeElementsBaseVertex(mode, start, end, count, type, indices, basevertex);
    return 0;
}

int GlFenceSync(lua_State *L) {
    GLenum     condition = (GLenum    )luaL_checkinteger(L, 1);
    GLbitfield flags     = (GLbitfield)luaL_checkinteger(L, 2);

    glFenceSync(condition, flags);
    return 0;
}

int GlFramebufferTexture(lua_State *L) {
    GLenum target     = (GLenum)luaL_checkinteger(L, 1);
    GLenum attachment = (GLenum)luaL_checkinteger(L, 2);
    GLuint texture    = (GLuint)luaL_checkinteger(L, 3);
    GLint  level      = (GLint )luaL_checkinteger(L, 4);

    glFramebufferTexture(target, attachment, texture, level);
    return 0;
}

int GlGetBufferParameteri64v(lua_State *L) {
    GLenum    target = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLint64 * params = (GLint64 *)luaL_checkudata(L, 3, "GLint64 *");

    glGetBufferParameteri64v(target, pname, params);
    return 0;
}

int GlGetInteger64i_v(lua_State *L) {
    GLenum    target = (GLenum   )luaL_checkinteger(L, 1);
    GLuint    index  = (GLuint   )luaL_checkinteger(L, 2);
    GLint64 * data   = (GLint64 *)luaL_checkudata(L, 3, "GLint64 *");

    glGetInteger64i_v(target, index, data);
    return 0;
}

int GlGetInteger64v(lua_State *L) {
    GLenum    pname = (GLenum   )luaL_checkinteger(L, 1);
    GLint64 * data  = (GLint64 *)luaL_checkudata(L, 2, "GLint64 *");

    glGetInteger64v(pname, data);
    return 0;
}

int GlGetMultisamplefv(lua_State *L) {
    GLenum    pname = (GLenum   )luaL_checkinteger(L, 1);
    GLuint    index = (GLuint   )luaL_checkinteger(L, 2);
    GLfloat * val   = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetMultisamplefv(pname, index, val);
    return 0;
}

int GlGetSynciv(lua_State *L) {
    GLsync    sync    = (GLsync   )luaL_checkinteger(L, 1);
    GLenum    pname   = (GLenum   )luaL_checkinteger(L, 2);
    GLsizei   bufSize = (GLsizei  )luaL_checkinteger(L, 3);
    GLsizei * length  = (GLsizei *)luaL_checkudata(L, 4, "GLsizei *");
    GLint *   values  = (GLint *  )luaL_checkudata(L, 5, "GLint *");

    glGetSynciv(sync, pname, bufSize, length, values);
    return 0;
}

int GlIsSync(lua_State *L) {
    GLsync sync = (GLsync)luaL_checkinteger(L, 1);

    glIsSync(sync);
    return 0;
}

int GlMultiDrawElementsBaseVertex(lua_State *L) {
    GLenum             mode       = (GLenum            )luaL_checkinteger(L, 1);
    const GLsizei *    count      = (const GLsizei *   )luaL_checkudata(L, 2, "const GLsizei *");
    GLenum             type       = (GLenum            )luaL_checkinteger(L, 3);
    const void *const* indices    = (const void *const*)luaL_checkudata(L, 4, "const void *const*");
    GLsizei            drawcount  = (GLsizei           )luaL_checkinteger(L, 5);
    const GLint *      basevertex = (const GLint *     )luaL_checkudata(L, 6, "const GLint *");

    glMultiDrawElementsBaseVertex(mode, count, type, indices, drawcount, basevertex);
    return 0;
}

int GlProvokingVertex(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glProvokingVertex(mode);
    return 0;
}

int GlSampleMaski(lua_State *L) {
    GLuint     maskNumber = (GLuint    )luaL_checkinteger(L, 1);
    GLbitfield mask       = (GLbitfield)luaL_checkinteger(L, 2);

    glSampleMaski(maskNumber, mask);
    return 0;
}

int GlTexImage2DMultisample(lua_State *L) {
    GLenum    target               = (GLenum   )luaL_checkinteger(L, 1);
    GLsizei   samples              = (GLsizei  )luaL_checkinteger(L, 2);
    GLenum    internalformat       = (GLenum   )luaL_checkinteger(L, 3);
    GLsizei   width                = (GLsizei  )luaL_checkinteger(L, 4);
    GLsizei   height               = (GLsizei  )luaL_checkinteger(L, 5);
    GLboolean fixedsamplelocations = (GLboolean)luaL_checkinteger(L, 6);

    glTexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
    return 0;
}

int GlTexImage3DMultisample(lua_State *L) {
    GLenum    target               = (GLenum   )luaL_checkinteger(L, 1);
    GLsizei   samples              = (GLsizei  )luaL_checkinteger(L, 2);
    GLenum    internalformat       = (GLenum   )luaL_checkinteger(L, 3);
    GLsizei   width                = (GLsizei  )luaL_checkinteger(L, 4);
    GLsizei   height               = (GLsizei  )luaL_checkinteger(L, 5);
    GLsizei   depth                = (GLsizei  )luaL_checkinteger(L, 6);
    GLboolean fixedsamplelocations = (GLboolean)luaL_checkinteger(L, 7);

    glTexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    return 0;
}

int GlWaitSync(lua_State *L) {
    GLsync     sync    = (GLsync    )luaL_checkinteger(L, 1);
    GLbitfield flags   = (GLbitfield)luaL_checkinteger(L, 2);
    GLuint64   timeout = (GLuint64  )luaL_checkinteger(L, 3);

    glWaitSync(sync, flags, timeout);
    return 0;
}

int GlBindFragDataLocationIndexed(lua_State *L) {
    GLuint         program     = (GLuint        )luaL_checkinteger(L, 1);
    GLuint         colorNumber = (GLuint        )luaL_checkinteger(L, 2);
    GLuint         index       = (GLuint        )luaL_checkinteger(L, 3);
    const GLchar * name        = (const GLchar *)luaL_checkstring(L, 4);

    glBindFragDataLocationIndexed(program, colorNumber, index, name);
    return 0;
}

int GlBindSampler(lua_State *L) {
    GLuint unit    = (GLuint)luaL_checkinteger(L, 1);
    GLuint sampler = (GLuint)luaL_checkinteger(L, 2);

    glBindSampler(unit, sampler);
    return 0;
}

int GlDeleteSamplers(lua_State *L) {
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * samplers = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteSamplers(count, samplers);
    return 0;
}

int GlGenSamplers(lua_State *L) {
    GLsizei  count    = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * samplers = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenSamplers(count, samplers);
    return 0;
}

int GlGetFragDataIndex(lua_State *L) {
    GLuint         program = (GLuint        )luaL_checkinteger(L, 1);
    const GLchar * name    = (const GLchar *)luaL_checkstring(L, 2);

    glGetFragDataIndex(program, name);
    return 0;
}

int GlGetQueryObjecti64v(lua_State *L) {
    GLuint    id     = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLint64 * params = (GLint64 *)luaL_checkudata(L, 3, "GLint64 *");

    glGetQueryObjecti64v(id, pname, params);
    return 0;
}

int GlGetQueryObjectui64v(lua_State *L) {
    GLuint     id     = (GLuint    )luaL_checkinteger(L, 1);
    GLenum     pname  = (GLenum    )luaL_checkinteger(L, 2);
    GLuint64 * params = (GLuint64 *)luaL_checkudata(L, 3, "GLuint64 *");

    glGetQueryObjectui64v(id, pname, params);
    return 0;
}

int GlGetSamplerParameterIiv(lua_State *L) {
    GLuint  sampler = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname   = (GLenum )luaL_checkinteger(L, 2);
    GLint * params  = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetSamplerParameterIiv(sampler, pname, params);
    return 0;
}

int GlGetSamplerParameterIuiv(lua_State *L) {
    GLuint   sampler = (GLuint  )luaL_checkinteger(L, 1);
    GLenum   pname   = (GLenum  )luaL_checkinteger(L, 2);
    GLuint * params  = (GLuint *)luaL_checkudata(L, 3, "GLuint *");

    glGetSamplerParameterIuiv(sampler, pname, params);
    return 0;
}

int GlGetSamplerParameterfv(lua_State *L) {
    GLuint    sampler = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    pname   = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * params  = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetSamplerParameterfv(sampler, pname, params);
    return 0;
}

int GlGetSamplerParameteriv(lua_State *L) {
    GLuint  sampler = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname   = (GLenum )luaL_checkinteger(L, 2);
    GLint * params  = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetSamplerParameteriv(sampler, pname, params);
    return 0;
}

int GlIsSampler(lua_State *L) {
    GLuint sampler = (GLuint)luaL_checkinteger(L, 1);

    glIsSampler(sampler);
    return 0;
}

int GlQueryCounter(lua_State *L) {
    GLuint id     = (GLuint)luaL_checkinteger(L, 1);
    GLenum target = (GLenum)luaL_checkinteger(L, 2);

    glQueryCounter(id, target);
    return 0;
}

int GlSamplerParameterIiv(lua_State *L) {
    GLuint        sampler = (GLuint       )luaL_checkinteger(L, 1);
    GLenum        pname   = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * param   = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glSamplerParameterIiv(sampler, pname, param);
    return 0;
}

int GlSamplerParameterIuiv(lua_State *L) {
    GLuint         sampler = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         pname   = (GLenum        )luaL_checkinteger(L, 2);
    const GLuint * param   = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glSamplerParameterIuiv(sampler, pname, param);
    return 0;
}

int GlSamplerParameterf(lua_State *L) {
    GLuint  sampler = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname   = (GLenum )luaL_checkinteger(L, 2);
    GLfloat param   = (GLfloat)luaL_checknumber(L, 3);

    glSamplerParameterf(sampler, pname, param);
    return 0;
}

int GlSamplerParameterfv(lua_State *L) {
    GLuint          sampler = (GLuint         )luaL_checkinteger(L, 1);
    GLenum          pname   = (GLenum         )luaL_checkinteger(L, 2);
    const GLfloat * param   = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glSamplerParameterfv(sampler, pname, param);
    return 0;
}

int GlSamplerParameteri(lua_State *L) {
    GLuint sampler = (GLuint)luaL_checkinteger(L, 1);
    GLenum pname   = (GLenum)luaL_checkinteger(L, 2);
    GLint  param   = (GLint )luaL_checkinteger(L, 3);

    glSamplerParameteri(sampler, pname, param);
    return 0;
}

int GlSamplerParameteriv(lua_State *L) {
    GLuint        sampler = (GLuint       )luaL_checkinteger(L, 1);
    GLenum        pname   = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * param   = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glSamplerParameteriv(sampler, pname, param);
    return 0;
}

int GlVertexAttribDivisor(lua_State *L) {
    GLuint index   = (GLuint)luaL_checkinteger(L, 1);
    GLuint divisor = (GLuint)luaL_checkinteger(L, 2);

    glVertexAttribDivisor(index, divisor);
    return 0;
}

int GlVertexAttribP1ui(lua_State *L) {
    GLuint    index      = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    type       = (GLenum   )luaL_checkinteger(L, 2);
    GLboolean normalized = (GLboolean)luaL_checkinteger(L, 3);
    GLuint    value      = (GLuint   )luaL_checkinteger(L, 4);

    glVertexAttribP1ui(index, type, normalized, value);
    return 0;
}

int GlVertexAttribP1uiv(lua_State *L) {
    GLuint         index      = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         type       = (GLenum        )luaL_checkinteger(L, 2);
    GLboolean      normalized = (GLboolean     )luaL_checkinteger(L, 3);
    const GLuint * value      = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glVertexAttribP1uiv(index, type, normalized, value);
    return 0;
}

int GlVertexAttribP2ui(lua_State *L) {
    GLuint    index      = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    type       = (GLenum   )luaL_checkinteger(L, 2);
    GLboolean normalized = (GLboolean)luaL_checkinteger(L, 3);
    GLuint    value      = (GLuint   )luaL_checkinteger(L, 4);

    glVertexAttribP2ui(index, type, normalized, value);
    return 0;
}

int GlVertexAttribP2uiv(lua_State *L) {
    GLuint         index      = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         type       = (GLenum        )luaL_checkinteger(L, 2);
    GLboolean      normalized = (GLboolean     )luaL_checkinteger(L, 3);
    const GLuint * value      = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glVertexAttribP2uiv(index, type, normalized, value);
    return 0;
}

int GlVertexAttribP3ui(lua_State *L) {
    GLuint    index      = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    type       = (GLenum   )luaL_checkinteger(L, 2);
    GLboolean normalized = (GLboolean)luaL_checkinteger(L, 3);
    GLuint    value      = (GLuint   )luaL_checkinteger(L, 4);

    glVertexAttribP3ui(index, type, normalized, value);
    return 0;
}

int GlVertexAttribP3uiv(lua_State *L) {
    GLuint         index      = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         type       = (GLenum        )luaL_checkinteger(L, 2);
    GLboolean      normalized = (GLboolean     )luaL_checkinteger(L, 3);
    const GLuint * value      = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glVertexAttribP3uiv(index, type, normalized, value);
    return 0;
}

int GlVertexAttribP4ui(lua_State *L) {
    GLuint    index      = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    type       = (GLenum   )luaL_checkinteger(L, 2);
    GLboolean normalized = (GLboolean)luaL_checkinteger(L, 3);
    GLuint    value      = (GLuint   )luaL_checkinteger(L, 4);

    glVertexAttribP4ui(index, type, normalized, value);
    return 0;
}

int GlVertexAttribP4uiv(lua_State *L) {
    GLuint         index      = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         type       = (GLenum        )luaL_checkinteger(L, 2);
    GLboolean      normalized = (GLboolean     )luaL_checkinteger(L, 3);
    const GLuint * value      = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glVertexAttribP4uiv(index, type, normalized, value);
    return 0;
}

int GlBeginQueryIndexed(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint index  = (GLuint)luaL_checkinteger(L, 2);
    GLuint id     = (GLuint)luaL_checkinteger(L, 3);

    glBeginQueryIndexed(target, index, id);
    return 0;
}

int GlBindTransformFeedback(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint id     = (GLuint)luaL_checkinteger(L, 2);

    glBindTransformFeedback(target, id);
    return 0;
}

int GlBlendEquationSeparatei(lua_State *L) {
    GLuint buf       = (GLuint)luaL_checkinteger(L, 1);
    GLenum modeRGB   = (GLenum)luaL_checkinteger(L, 2);
    GLenum modeAlpha = (GLenum)luaL_checkinteger(L, 3);

    glBlendEquationSeparatei(buf, modeRGB, modeAlpha);
    return 0;
}

int GlBlendEquationi(lua_State *L) {
    GLuint buf  = (GLuint)luaL_checkinteger(L, 1);
    GLenum mode = (GLenum)luaL_checkinteger(L, 2);

    glBlendEquationi(buf, mode);
    return 0;
}

int GlBlendFuncSeparatei(lua_State *L) {
    GLuint buf      = (GLuint)luaL_checkinteger(L, 1);
    GLenum srcRGB   = (GLenum)luaL_checkinteger(L, 2);
    GLenum dstRGB   = (GLenum)luaL_checkinteger(L, 3);
    GLenum srcAlpha = (GLenum)luaL_checkinteger(L, 4);
    GLenum dstAlpha = (GLenum)luaL_checkinteger(L, 5);

    glBlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
    return 0;
}

int GlBlendFunci(lua_State *L) {
    GLuint buf = (GLuint)luaL_checkinteger(L, 1);
    GLenum src = (GLenum)luaL_checkinteger(L, 2);
    GLenum dst = (GLenum)luaL_checkinteger(L, 3);

    glBlendFunci(buf, src, dst);
    return 0;
}

int GlDeleteTransformFeedbacks(lua_State *L) {
    GLsizei        n   = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * ids = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteTransformFeedbacks(n, ids);
    return 0;
}

int GlDrawArraysIndirect(lua_State *L) {
    GLenum       mode     = (GLenum      )luaL_checkinteger(L, 1);
    const void * indirect = (const void *)luaL_checkudata(L, 2, "const void *");

    glDrawArraysIndirect(mode, indirect);
    return 0;
}

int GlDrawElementsIndirect(lua_State *L) {
    GLenum       mode     = (GLenum      )luaL_checkinteger(L, 1);
    GLenum       type     = (GLenum      )luaL_checkinteger(L, 2);
    const void * indirect = (const void *)luaL_checkudata(L, 3, "const void *");

    glDrawElementsIndirect(mode, type, indirect);
    return 0;
}

int GlDrawTransformFeedback(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);
    GLuint id   = (GLuint)luaL_checkinteger(L, 2);

    glDrawTransformFeedback(mode, id);
    return 0;
}

int GlDrawTransformFeedbackStream(lua_State *L) {
    GLenum mode   = (GLenum)luaL_checkinteger(L, 1);
    GLuint id     = (GLuint)luaL_checkinteger(L, 2);
    GLuint stream = (GLuint)luaL_checkinteger(L, 3);

    glDrawTransformFeedbackStream(mode, id, stream);
    return 0;
}

int GlEndQueryIndexed(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLuint index  = (GLuint)luaL_checkinteger(L, 2);

    glEndQueryIndexed(target, index);
    return 0;
}

int GlGenTransformFeedbacks(lua_State *L) {
    GLsizei  n   = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * ids = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenTransformFeedbacks(n, ids);
    return 0;
}

int GlGetActiveSubroutineName(lua_State *L) {
    GLuint    program    = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    shadertype = (GLenum   )luaL_checkinteger(L, 2);
    GLuint    index      = (GLuint   )luaL_checkinteger(L, 3);
    GLsizei   bufsize    = (GLsizei  )luaL_checkinteger(L, 4);
    GLsizei * length     = (GLsizei *)luaL_checkudata(L, 5, "GLsizei *");
    GLchar *  name       = (GLchar * )luaL_checkstring(L, 6);

    glGetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
    return 0;
}

int GlGetActiveSubroutineUniformName(lua_State *L) {
    GLuint    program    = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    shadertype = (GLenum   )luaL_checkinteger(L, 2);
    GLuint    index      = (GLuint   )luaL_checkinteger(L, 3);
    GLsizei   bufsize    = (GLsizei  )luaL_checkinteger(L, 4);
    GLsizei * length     = (GLsizei *)luaL_checkudata(L, 5, "GLsizei *");
    GLchar *  name       = (GLchar * )luaL_checkstring(L, 6);

    glGetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
    return 0;
}

int GlGetActiveSubroutineUniformiv(lua_State *L) {
    GLuint  program    = (GLuint )luaL_checkinteger(L, 1);
    GLenum  shadertype = (GLenum )luaL_checkinteger(L, 2);
    GLuint  index      = (GLuint )luaL_checkinteger(L, 3);
    GLenum  pname      = (GLenum )luaL_checkinteger(L, 4);
    GLint * values     = (GLint *)luaL_checkudata(L, 5, "GLint *");

    glGetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
    return 0;
}

int GlGetProgramStageiv(lua_State *L) {
    GLuint  program    = (GLuint )luaL_checkinteger(L, 1);
    GLenum  shadertype = (GLenum )luaL_checkinteger(L, 2);
    GLenum  pname      = (GLenum )luaL_checkinteger(L, 3);
    GLint * values     = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetProgramStageiv(program, shadertype, pname, values);
    return 0;
}

int GlGetQueryIndexediv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLuint  index  = (GLuint )luaL_checkinteger(L, 2);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 3);
    GLint * params = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetQueryIndexediv(target, index, pname, params);
    return 0;
}

int GlGetSubroutineIndex(lua_State *L) {
    GLuint         program    = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         shadertype = (GLenum        )luaL_checkinteger(L, 2);
    const GLchar * name       = (const GLchar *)luaL_checkstring(L, 3);

    glGetSubroutineIndex(program, shadertype, name);
    return 0;
}

int GlGetSubroutineUniformLocation(lua_State *L) {
    GLuint         program    = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         shadertype = (GLenum        )luaL_checkinteger(L, 2);
    const GLchar * name       = (const GLchar *)luaL_checkstring(L, 3);

    glGetSubroutineUniformLocation(program, shadertype, name);
    return 0;
}

int GlGetUniformSubroutineuiv(lua_State *L) {
    GLenum   shadertype = (GLenum  )luaL_checkinteger(L, 1);
    GLint    location   = (GLint   )luaL_checkinteger(L, 2);
    GLuint * params     = (GLuint *)luaL_checkudata(L, 3, "GLuint *");

    glGetUniformSubroutineuiv(shadertype, location, params);
    return 0;
}

int GlGetUniformdv(lua_State *L) {
    GLuint     program  = (GLuint    )luaL_checkinteger(L, 1);
    GLint      location = (GLint     )luaL_checkinteger(L, 2);
    GLdouble * params   = (GLdouble *)luaL_checkudata(L, 3, "GLdouble *");

    glGetUniformdv(program, location, params);
    return 0;
}

int GlIsTransformFeedback(lua_State *L) {
    GLuint id = (GLuint)luaL_checkinteger(L, 1);

    glIsTransformFeedback(id);
    return 0;
}

int GlMinSampleShading(lua_State *L) {
    GLfloat value = (GLfloat)luaL_checknumber(L, 1);

    glMinSampleShading(value);
    return 0;
}

int GlPatchParameterfv(lua_State *L) {
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * values = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glPatchParameterfv(pname, values);
    return 0;
}

int GlPatchParameteri(lua_State *L) {
    GLenum pname = (GLenum)luaL_checkinteger(L, 1);
    GLint  value = (GLint )luaL_checkinteger(L, 2);

    glPatchParameteri(pname, value);
    return 0;
}

int GlPauseTransformFeedback(lua_State *L) {

    glPauseTransformFeedback();
    return 0;
}

int GlResumeTransformFeedback(lua_State *L) {

    glResumeTransformFeedback();
    return 0;
}

int GlUniform1d(lua_State *L) {
    GLint    location = (GLint   )luaL_checkinteger(L, 1);
    GLdouble x        = (GLdouble)luaL_checknumber(L, 2);

    glUniform1d(location, x);
    return 0;
}

int GlUniform1dv(lua_State *L) {
    GLint            location = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 2);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 3, "const GLdouble *");

    glUniform1dv(location, count, value);
    return 0;
}

int GlUniform2d(lua_State *L) {
    GLint    location = (GLint   )luaL_checkinteger(L, 1);
    GLdouble x        = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y        = (GLdouble)luaL_checknumber(L, 3);

    glUniform2d(location, x, y);
    return 0;
}

int GlUniform2dv(lua_State *L) {
    GLint            location = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 2);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 3, "const GLdouble *");

    glUniform2dv(location, count, value);
    return 0;
}

int GlUniform3d(lua_State *L) {
    GLint    location = (GLint   )luaL_checkinteger(L, 1);
    GLdouble x        = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y        = (GLdouble)luaL_checknumber(L, 3);
    GLdouble z        = (GLdouble)luaL_checknumber(L, 4);

    glUniform3d(location, x, y, z);
    return 0;
}

int GlUniform3dv(lua_State *L) {
    GLint            location = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 2);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 3, "const GLdouble *");

    glUniform3dv(location, count, value);
    return 0;
}

int GlUniform4d(lua_State *L) {
    GLint    location = (GLint   )luaL_checkinteger(L, 1);
    GLdouble x        = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y        = (GLdouble)luaL_checknumber(L, 3);
    GLdouble z        = (GLdouble)luaL_checknumber(L, 4);
    GLdouble w        = (GLdouble)luaL_checknumber(L, 5);

    glUniform4d(location, x, y, z, w);
    return 0;
}

int GlUniform4dv(lua_State *L) {
    GLint            location = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 2);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 3, "const GLdouble *");

    glUniform4dv(location, count, value);
    return 0;
}

int GlUniformMatrix2dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix2dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix2x3dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix2x3dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix2x4dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix2x4dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix3dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix3dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix3x2dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix3x2dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix3x4dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix3x4dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix4dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix4dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix4x2dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix4x2dv(location, count, transpose, value);
    return 0;
}

int GlUniformMatrix4x3dv(lua_State *L) {
    GLint            location  = (GLint           )luaL_checkinteger(L, 1);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 2);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 3);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glUniformMatrix4x3dv(location, count, transpose, value);
    return 0;
}

int GlUniformSubroutinesuiv(lua_State *L) {
    GLenum         shadertype = (GLenum        )luaL_checkinteger(L, 1);
    GLsizei        count      = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * indices    = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glUniformSubroutinesuiv(shadertype, count, indices);
    return 0;
}

int GlActiveShaderProgram(lua_State *L) {
    GLuint pipeline = (GLuint)luaL_checkinteger(L, 1);
    GLuint program  = (GLuint)luaL_checkinteger(L, 2);

    glActiveShaderProgram(pipeline, program);
    return 0;
}

int GlBindProgramPipeline(lua_State *L) {
    GLuint pipeline = (GLuint)luaL_checkinteger(L, 1);

    glBindProgramPipeline(pipeline);
    return 0;
}

int GlClearDepthf(lua_State *L) {
    GLfloat d = (GLfloat)luaL_checknumber(L, 1);

    glClearDepthf(d);
    return 0;
}

int GlCreateShaderProgramv(lua_State *L) {
    GLenum               type    = (GLenum              )luaL_checkinteger(L, 1);
    GLsizei              count   = (GLsizei             )luaL_checkinteger(L, 2);
    const GLchar *const* strings = (const GLchar *const*)luaL_checkstring(L, 3);

    glCreateShaderProgramv(type, count, strings);
    return 0;
}

int GlDeleteProgramPipelines(lua_State *L) {
    GLsizei        n         = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * pipelines = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteProgramPipelines(n, pipelines);
    return 0;
}

int GlDepthRangeArrayv(lua_State *L) {
    GLuint           first = (GLuint          )luaL_checkinteger(L, 1);
    GLsizei          count = (GLsizei         )luaL_checkinteger(L, 2);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 3, "const GLdouble *");

    glDepthRangeArrayv(first, count, v);
    return 0;
}

int GlDepthRangeIndexed(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble n     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble f     = (GLdouble)luaL_checknumber(L, 3);

    glDepthRangeIndexed(index, n, f);
    return 0;
}

int GlDepthRangef(lua_State *L) {
    GLfloat n = (GLfloat)luaL_checknumber(L, 1);
    GLfloat f = (GLfloat)luaL_checknumber(L, 2);

    glDepthRangef(n, f);
    return 0;
}

int GlGenProgramPipelines(lua_State *L) {
    GLsizei  n         = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * pipelines = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenProgramPipelines(n, pipelines);
    return 0;
}

int GlGetDoublei_v(lua_State *L) {
    GLenum     target = (GLenum    )luaL_checkinteger(L, 1);
    GLuint     index  = (GLuint    )luaL_checkinteger(L, 2);
    GLdouble * data   = (GLdouble *)luaL_checkudata(L, 3, "GLdouble *");

    glGetDoublei_v(target, index, data);
    return 0;
}

int GlGetFloati_v(lua_State *L) {
    GLenum    target = (GLenum   )luaL_checkinteger(L, 1);
    GLuint    index  = (GLuint   )luaL_checkinteger(L, 2);
    GLfloat * data   = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetFloati_v(target, index, data);
    return 0;
}

int GlGetProgramBinary(lua_State *L) {
    GLuint    program      = (GLuint   )luaL_checkinteger(L, 1);
    GLsizei   bufSize      = (GLsizei  )luaL_checkinteger(L, 2);
    GLsizei * length       = (GLsizei *)luaL_checkudata(L, 3, "GLsizei *");
    GLenum *  binaryFormat = (GLenum * )luaL_checkudata(L, 4, "GLenum *");
    void *    binary       = (void *   )luaL_checkudata(L, 5, "void *");

    glGetProgramBinary(program, bufSize, length, binaryFormat, binary);
    return 0;
}

int GlGetProgramPipelineInfoLog(lua_State *L) {
    GLuint    pipeline = (GLuint   )luaL_checkinteger(L, 1);
    GLsizei   bufSize  = (GLsizei  )luaL_checkinteger(L, 2);
    GLsizei * length   = (GLsizei *)luaL_checkudata(L, 3, "GLsizei *");
    GLchar *  infoLog  = (GLchar * )luaL_checkstring(L, 4);

    glGetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
    return 0;
}

int GlGetProgramPipelineiv(lua_State *L) {
    GLuint  pipeline = (GLuint )luaL_checkinteger(L, 1);
    GLenum  pname    = (GLenum )luaL_checkinteger(L, 2);
    GLint * params   = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetProgramPipelineiv(pipeline, pname, params);
    return 0;
}

int GlGetShaderPrecisionFormat(lua_State *L) {
    GLenum  shadertype    = (GLenum )luaL_checkinteger(L, 1);
    GLenum  precisiontype = (GLenum )luaL_checkinteger(L, 2);
    GLint * range         = (GLint *)luaL_checkudata(L, 3, "GLint *");
    GLint * precision     = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
    return 0;
}

int GlGetVertexAttribLdv(lua_State *L) {
    GLuint     index  = (GLuint    )luaL_checkinteger(L, 1);
    GLenum     pname  = (GLenum    )luaL_checkinteger(L, 2);
    GLdouble * params = (GLdouble *)luaL_checkudata(L, 3, "GLdouble *");

    glGetVertexAttribLdv(index, pname, params);
    return 0;
}

int GlIsProgramPipeline(lua_State *L) {
    GLuint pipeline = (GLuint)luaL_checkinteger(L, 1);

    glIsProgramPipeline(pipeline);
    return 0;
}

int GlProgramBinary(lua_State *L) {
    GLuint       program      = (GLuint      )luaL_checkinteger(L, 1);
    GLenum       binaryFormat = (GLenum      )luaL_checkinteger(L, 2);
    const void * binary       = (const void *)luaL_checkudata(L, 3, "const void *");
    GLsizei      length       = (GLsizei     )luaL_checkinteger(L, 4);

    glProgramBinary(program, binaryFormat, binary, length);
    return 0;
}

int GlProgramParameteri(lua_State *L) {
    GLuint program = (GLuint)luaL_checkinteger(L, 1);
    GLenum pname   = (GLenum)luaL_checkinteger(L, 2);
    GLint  value   = (GLint )luaL_checkinteger(L, 3);

    glProgramParameteri(program, pname, value);
    return 0;
}

int GlProgramUniform1d(lua_State *L) {
    GLuint   program  = (GLuint  )luaL_checkinteger(L, 1);
    GLint    location = (GLint   )luaL_checkinteger(L, 2);
    GLdouble v0       = (GLdouble)luaL_checknumber(L, 3);

    glProgramUniform1d(program, location, v0);
    return 0;
}

int GlProgramUniform1dv(lua_State *L) {
    GLuint           program  = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 3);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glProgramUniform1dv(program, location, count, value);
    return 0;
}

int GlProgramUniform1f(lua_State *L) {
    GLuint  program  = (GLuint )luaL_checkinteger(L, 1);
    GLint   location = (GLint  )luaL_checkinteger(L, 2);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 3);

    glProgramUniform1f(program, location, v0);
    return 0;
}

int GlProgramUniform1fv(lua_State *L) {
    GLuint          program  = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 3);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glProgramUniform1fv(program, location, count, value);
    return 0;
}

int GlProgramUniform1i(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLint  v0       = (GLint )luaL_checkinteger(L, 3);

    glProgramUniform1i(program, location, v0);
    return 0;
}

int GlProgramUniform1iv(lua_State *L) {
    GLuint        program  = (GLuint       )luaL_checkinteger(L, 1);
    GLint         location = (GLint        )luaL_checkinteger(L, 2);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 3);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 4, "const GLint *");

    glProgramUniform1iv(program, location, count, value);
    return 0;
}

int GlProgramUniform1ui(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 3);

    glProgramUniform1ui(program, location, v0);
    return 0;
}

int GlProgramUniform1uiv(lua_State *L) {
    GLuint         program  = (GLuint        )luaL_checkinteger(L, 1);
    GLint          location = (GLint         )luaL_checkinteger(L, 2);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 3);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glProgramUniform1uiv(program, location, count, value);
    return 0;
}

int GlProgramUniform2d(lua_State *L) {
    GLuint   program  = (GLuint  )luaL_checkinteger(L, 1);
    GLint    location = (GLint   )luaL_checkinteger(L, 2);
    GLdouble v0       = (GLdouble)luaL_checknumber(L, 3);
    GLdouble v1       = (GLdouble)luaL_checknumber(L, 4);

    glProgramUniform2d(program, location, v0, v1);
    return 0;
}

int GlProgramUniform2dv(lua_State *L) {
    GLuint           program  = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 3);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glProgramUniform2dv(program, location, count, value);
    return 0;
}

int GlProgramUniform2f(lua_State *L) {
    GLuint  program  = (GLuint )luaL_checkinteger(L, 1);
    GLint   location = (GLint  )luaL_checkinteger(L, 2);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 3);
    GLfloat v1       = (GLfloat)luaL_checknumber(L, 4);

    glProgramUniform2f(program, location, v0, v1);
    return 0;
}

int GlProgramUniform2fv(lua_State *L) {
    GLuint          program  = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 3);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glProgramUniform2fv(program, location, count, value);
    return 0;
}

int GlProgramUniform2i(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLint  v0       = (GLint )luaL_checkinteger(L, 3);
    GLint  v1       = (GLint )luaL_checkinteger(L, 4);

    glProgramUniform2i(program, location, v0, v1);
    return 0;
}

int GlProgramUniform2iv(lua_State *L) {
    GLuint        program  = (GLuint       )luaL_checkinteger(L, 1);
    GLint         location = (GLint        )luaL_checkinteger(L, 2);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 3);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 4, "const GLint *");

    glProgramUniform2iv(program, location, count, value);
    return 0;
}

int GlProgramUniform2ui(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 3);
    GLuint v1       = (GLuint)luaL_checkinteger(L, 4);

    glProgramUniform2ui(program, location, v0, v1);
    return 0;
}

int GlProgramUniform2uiv(lua_State *L) {
    GLuint         program  = (GLuint        )luaL_checkinteger(L, 1);
    GLint          location = (GLint         )luaL_checkinteger(L, 2);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 3);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glProgramUniform2uiv(program, location, count, value);
    return 0;
}

int GlProgramUniform3d(lua_State *L) {
    GLuint   program  = (GLuint  )luaL_checkinteger(L, 1);
    GLint    location = (GLint   )luaL_checkinteger(L, 2);
    GLdouble v0       = (GLdouble)luaL_checknumber(L, 3);
    GLdouble v1       = (GLdouble)luaL_checknumber(L, 4);
    GLdouble v2       = (GLdouble)luaL_checknumber(L, 5);

    glProgramUniform3d(program, location, v0, v1, v2);
    return 0;
}

int GlProgramUniform3dv(lua_State *L) {
    GLuint           program  = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 3);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glProgramUniform3dv(program, location, count, value);
    return 0;
}

int GlProgramUniform3f(lua_State *L) {
    GLuint  program  = (GLuint )luaL_checkinteger(L, 1);
    GLint   location = (GLint  )luaL_checkinteger(L, 2);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 3);
    GLfloat v1       = (GLfloat)luaL_checknumber(L, 4);
    GLfloat v2       = (GLfloat)luaL_checknumber(L, 5);

    glProgramUniform3f(program, location, v0, v1, v2);
    return 0;
}

int GlProgramUniform3fv(lua_State *L) {
    GLuint          program  = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 3);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glProgramUniform3fv(program, location, count, value);
    return 0;
}

int GlProgramUniform3i(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLint  v0       = (GLint )luaL_checkinteger(L, 3);
    GLint  v1       = (GLint )luaL_checkinteger(L, 4);
    GLint  v2       = (GLint )luaL_checkinteger(L, 5);

    glProgramUniform3i(program, location, v0, v1, v2);
    return 0;
}

int GlProgramUniform3iv(lua_State *L) {
    GLuint        program  = (GLuint       )luaL_checkinteger(L, 1);
    GLint         location = (GLint        )luaL_checkinteger(L, 2);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 3);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 4, "const GLint *");

    glProgramUniform3iv(program, location, count, value);
    return 0;
}

int GlProgramUniform3ui(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 3);
    GLuint v1       = (GLuint)luaL_checkinteger(L, 4);
    GLuint v2       = (GLuint)luaL_checkinteger(L, 5);

    glProgramUniform3ui(program, location, v0, v1, v2);
    return 0;
}

int GlProgramUniform3uiv(lua_State *L) {
    GLuint         program  = (GLuint        )luaL_checkinteger(L, 1);
    GLint          location = (GLint         )luaL_checkinteger(L, 2);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 3);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glProgramUniform3uiv(program, location, count, value);
    return 0;
}

int GlProgramUniform4d(lua_State *L) {
    GLuint   program  = (GLuint  )luaL_checkinteger(L, 1);
    GLint    location = (GLint   )luaL_checkinteger(L, 2);
    GLdouble v0       = (GLdouble)luaL_checknumber(L, 3);
    GLdouble v1       = (GLdouble)luaL_checknumber(L, 4);
    GLdouble v2       = (GLdouble)luaL_checknumber(L, 5);
    GLdouble v3       = (GLdouble)luaL_checknumber(L, 6);

    glProgramUniform4d(program, location, v0, v1, v2, v3);
    return 0;
}

int GlProgramUniform4dv(lua_State *L) {
    GLuint           program  = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count    = (GLsizei         )luaL_checkinteger(L, 3);
    const GLdouble * value    = (const GLdouble *)luaL_checkudata(L, 4, "const GLdouble *");

    glProgramUniform4dv(program, location, count, value);
    return 0;
}

int GlProgramUniform4f(lua_State *L) {
    GLuint  program  = (GLuint )luaL_checkinteger(L, 1);
    GLint   location = (GLint  )luaL_checkinteger(L, 2);
    GLfloat v0       = (GLfloat)luaL_checknumber(L, 3);
    GLfloat v1       = (GLfloat)luaL_checknumber(L, 4);
    GLfloat v2       = (GLfloat)luaL_checknumber(L, 5);
    GLfloat v3       = (GLfloat)luaL_checknumber(L, 6);

    glProgramUniform4f(program, location, v0, v1, v2, v3);
    return 0;
}

int GlProgramUniform4fv(lua_State *L) {
    GLuint          program  = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count    = (GLsizei        )luaL_checkinteger(L, 3);
    const GLfloat * value    = (const GLfloat *)luaL_checkudata(L, 4, "const GLfloat *");

    glProgramUniform4fv(program, location, count, value);
    return 0;
}

int GlProgramUniform4i(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLint  v0       = (GLint )luaL_checkinteger(L, 3);
    GLint  v1       = (GLint )luaL_checkinteger(L, 4);
    GLint  v2       = (GLint )luaL_checkinteger(L, 5);
    GLint  v3       = (GLint )luaL_checkinteger(L, 6);

    glProgramUniform4i(program, location, v0, v1, v2, v3);
    return 0;
}

int GlProgramUniform4iv(lua_State *L) {
    GLuint        program  = (GLuint       )luaL_checkinteger(L, 1);
    GLint         location = (GLint        )luaL_checkinteger(L, 2);
    GLsizei       count    = (GLsizei      )luaL_checkinteger(L, 3);
    const GLint * value    = (const GLint *)luaL_checkudata(L, 4, "const GLint *");

    glProgramUniform4iv(program, location, count, value);
    return 0;
}

int GlProgramUniform4ui(lua_State *L) {
    GLuint program  = (GLuint)luaL_checkinteger(L, 1);
    GLint  location = (GLint )luaL_checkinteger(L, 2);
    GLuint v0       = (GLuint)luaL_checkinteger(L, 3);
    GLuint v1       = (GLuint)luaL_checkinteger(L, 4);
    GLuint v2       = (GLuint)luaL_checkinteger(L, 5);
    GLuint v3       = (GLuint)luaL_checkinteger(L, 6);

    glProgramUniform4ui(program, location, v0, v1, v2, v3);
    return 0;
}

int GlProgramUniform4uiv(lua_State *L) {
    GLuint         program  = (GLuint        )luaL_checkinteger(L, 1);
    GLint          location = (GLint         )luaL_checkinteger(L, 2);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 3);
    const GLuint * value    = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glProgramUniform4uiv(program, location, count, value);
    return 0;
}

int GlProgramUniformMatrix2dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix2dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix2fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix2fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix2x3dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix2x3dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix2x3fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix2x3fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix2x4dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix2x4dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix2x4fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix2x4fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix3dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix3dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix3fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix3fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix3x2dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix3x2dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix3x2fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix3x2fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix3x4dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix3x4dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix3x4fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix3x4fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix4dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix4dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix4fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix4fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix4x2dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix4x2dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix4x2fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix4x2fv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix4x3dv(lua_State *L) {
    GLuint           program   = (GLuint          )luaL_checkinteger(L, 1);
    GLint            location  = (GLint           )luaL_checkinteger(L, 2);
    GLsizei          count     = (GLsizei         )luaL_checkinteger(L, 3);
    GLboolean        transpose = (GLboolean       )luaL_checkinteger(L, 4);
    const GLdouble * value     = (const GLdouble *)luaL_checkudata(L, 5, "const GLdouble *");

    glProgramUniformMatrix4x3dv(program, location, count, transpose, value);
    return 0;
}

int GlProgramUniformMatrix4x3fv(lua_State *L) {
    GLuint          program   = (GLuint         )luaL_checkinteger(L, 1);
    GLint           location  = (GLint          )luaL_checkinteger(L, 2);
    GLsizei         count     = (GLsizei        )luaL_checkinteger(L, 3);
    GLboolean       transpose = (GLboolean      )luaL_checkinteger(L, 4);
    const GLfloat * value     = (const GLfloat *)luaL_checkudata(L, 5, "const GLfloat *");

    glProgramUniformMatrix4x3fv(program, location, count, transpose, value);
    return 0;
}

int GlReleaseShaderCompiler(lua_State *L) {

    glReleaseShaderCompiler();
    return 0;
}

int GlScissorArrayv(lua_State *L) {
    GLuint        first = (GLuint       )luaL_checkinteger(L, 1);
    GLsizei       count = (GLsizei      )luaL_checkinteger(L, 2);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glScissorArrayv(first, count, v);
    return 0;
}

int GlScissorIndexed(lua_State *L) {
    GLuint  index  = (GLuint )luaL_checkinteger(L, 1);
    GLint   left   = (GLint  )luaL_checkinteger(L, 2);
    GLint   bottom = (GLint  )luaL_checkinteger(L, 3);
    GLsizei width  = (GLsizei)luaL_checkinteger(L, 4);
    GLsizei height = (GLsizei)luaL_checkinteger(L, 5);

    glScissorIndexed(index, left, bottom, width, height);
    return 0;
}

int GlScissorIndexedv(lua_State *L) {
    GLuint        index = (GLuint       )luaL_checkinteger(L, 1);
    const GLint * v     = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glScissorIndexedv(index, v);
    return 0;
}

int GlShaderBinary(lua_State *L) {
    GLsizei        count        = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * shaders      = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");
    GLenum         binaryformat = (GLenum        )luaL_checkinteger(L, 3);
    const void *   binary       = (const void *  )luaL_checkudata(L, 4, "const void *");
    GLsizei        length       = (GLsizei       )luaL_checkinteger(L, 5);

    glShaderBinary(count, shaders, binaryformat, binary, length);
    return 0;
}

int GlUseProgramStages(lua_State *L) {
    GLuint     pipeline = (GLuint    )luaL_checkinteger(L, 1);
    GLbitfield stages   = (GLbitfield)luaL_checkinteger(L, 2);
    GLuint     program  = (GLuint    )luaL_checkinteger(L, 3);

    glUseProgramStages(pipeline, stages, program);
    return 0;
}

int GlValidateProgramPipeline(lua_State *L) {
    GLuint pipeline = (GLuint)luaL_checkinteger(L, 1);

    glValidateProgramPipeline(pipeline);
    return 0;
}

int GlVertexAttribL1d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);

    glVertexAttribL1d(index, x);
    return 0;
}

int GlVertexAttribL1dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttribL1dv(index, v);
    return 0;
}

int GlVertexAttribL2d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y     = (GLdouble)luaL_checknumber(L, 3);

    glVertexAttribL2d(index, x, y);
    return 0;
}

int GlVertexAttribL2dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttribL2dv(index, v);
    return 0;
}

int GlVertexAttribL3d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y     = (GLdouble)luaL_checknumber(L, 3);
    GLdouble z     = (GLdouble)luaL_checknumber(L, 4);

    glVertexAttribL3d(index, x, y, z);
    return 0;
}

int GlVertexAttribL3dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttribL3dv(index, v);
    return 0;
}

int GlVertexAttribL4d(lua_State *L) {
    GLuint   index = (GLuint  )luaL_checkinteger(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y     = (GLdouble)luaL_checknumber(L, 3);
    GLdouble z     = (GLdouble)luaL_checknumber(L, 4);
    GLdouble w     = (GLdouble)luaL_checknumber(L, 5);

    glVertexAttribL4d(index, x, y, z, w);
    return 0;
}

int GlVertexAttribL4dv(lua_State *L) {
    GLuint           index = (GLuint          )luaL_checkinteger(L, 1);
    const GLdouble * v     = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glVertexAttribL4dv(index, v);
    return 0;
}

int GlVertexAttribLPointer(lua_State *L) {
    GLuint       index   = (GLuint      )luaL_checkinteger(L, 1);
    GLint        size    = (GLint       )luaL_checkinteger(L, 2);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 3);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 4);
    const void * pointer = (const void *)luaL_checkudata(L, 5, "const void *");

    glVertexAttribLPointer(index, size, type, stride, pointer);
    return 0;
}

int GlViewportArrayv(lua_State *L) {
    GLuint          first = (GLuint         )luaL_checkinteger(L, 1);
    GLsizei         count = (GLsizei        )luaL_checkinteger(L, 2);
    const GLfloat * v     = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glViewportArrayv(first, count, v);
    return 0;
}

int GlViewportIndexedf(lua_State *L) {
    GLuint  index = (GLuint )luaL_checkinteger(L, 1);
    GLfloat x     = (GLfloat)luaL_checknumber(L, 2);
    GLfloat y     = (GLfloat)luaL_checknumber(L, 3);
    GLfloat w     = (GLfloat)luaL_checknumber(L, 4);
    GLfloat h     = (GLfloat)luaL_checknumber(L, 5);

    glViewportIndexedf(index, x, y, w, h);
    return 0;
}

int GlViewportIndexedfv(lua_State *L) {
    GLuint          index = (GLuint         )luaL_checkinteger(L, 1);
    const GLfloat * v     = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glViewportIndexedfv(index, v);
    return 0;
}

int GlBindImageTexture(lua_State *L) {
    GLuint    unit    = (GLuint   )luaL_checkinteger(L, 1);
    GLuint    texture = (GLuint   )luaL_checkinteger(L, 2);
    GLint     level   = (GLint    )luaL_checkinteger(L, 3);
    GLboolean layered = (GLboolean)luaL_checkinteger(L, 4);
    GLint     layer   = (GLint    )luaL_checkinteger(L, 5);
    GLenum    access  = (GLenum   )luaL_checkinteger(L, 6);
    GLenum    format  = (GLenum   )luaL_checkinteger(L, 7);

    glBindImageTexture(unit, texture, level, layered, layer, access, format);
    return 0;
}

int GlDrawArraysInstancedBaseInstance(lua_State *L) {
    GLenum  mode          = (GLenum )luaL_checkinteger(L, 1);
    GLint   first         = (GLint  )luaL_checkinteger(L, 2);
    GLsizei count         = (GLsizei)luaL_checkinteger(L, 3);
    GLsizei instancecount = (GLsizei)luaL_checkinteger(L, 4);
    GLuint  baseinstance  = (GLuint )luaL_checkinteger(L, 5);

    glDrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
    return 0;
}

int GlDrawElementsInstancedBaseInstance(lua_State *L) {
    GLenum       mode          = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      count         = (GLsizei     )luaL_checkinteger(L, 2);
    GLenum       type          = (GLenum      )luaL_checkinteger(L, 3);
    const void * indices       = (const void *)luaL_checkudata(L, 4, "const void *");
    GLsizei      instancecount = (GLsizei     )luaL_checkinteger(L, 5);
    GLuint       baseinstance  = (GLuint      )luaL_checkinteger(L, 6);

    glDrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
    return 0;
}

int GlDrawElementsInstancedBaseVertexBaseInstance(lua_State *L) {
    GLenum       mode          = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      count         = (GLsizei     )luaL_checkinteger(L, 2);
    GLenum       type          = (GLenum      )luaL_checkinteger(L, 3);
    const void * indices       = (const void *)luaL_checkudata(L, 4, "const void *");
    GLsizei      instancecount = (GLsizei     )luaL_checkinteger(L, 5);
    GLint        basevertex    = (GLint       )luaL_checkinteger(L, 6);
    GLuint       baseinstance  = (GLuint      )luaL_checkinteger(L, 7);

    glDrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
    return 0;
}

int GlDrawTransformFeedbackInstanced(lua_State *L) {
    GLenum  mode          = (GLenum )luaL_checkinteger(L, 1);
    GLuint  id            = (GLuint )luaL_checkinteger(L, 2);
    GLsizei instancecount = (GLsizei)luaL_checkinteger(L, 3);

    glDrawTransformFeedbackInstanced(mode, id, instancecount);
    return 0;
}

int GlDrawTransformFeedbackStreamInstanced(lua_State *L) {
    GLenum  mode          = (GLenum )luaL_checkinteger(L, 1);
    GLuint  id            = (GLuint )luaL_checkinteger(L, 2);
    GLuint  stream        = (GLuint )luaL_checkinteger(L, 3);
    GLsizei instancecount = (GLsizei)luaL_checkinteger(L, 4);

    glDrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
    return 0;
}

int GlGetActiveAtomicCounterBufferiv(lua_State *L) {
    GLuint  program     = (GLuint )luaL_checkinteger(L, 1);
    GLuint  bufferIndex = (GLuint )luaL_checkinteger(L, 2);
    GLenum  pname       = (GLenum )luaL_checkinteger(L, 3);
    GLint * params      = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
    return 0;
}

int GlGetInternalformativ(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 2);
    GLenum  pname          = (GLenum )luaL_checkinteger(L, 3);
    GLsizei bufSize        = (GLsizei)luaL_checkinteger(L, 4);
    GLint * params         = (GLint *)luaL_checkudata(L, 5, "GLint *");

    glGetInternalformativ(target, internalformat, pname, bufSize, params);
    return 0;
}

int GlMemoryBarrier(lua_State *L) {
    GLbitfield barriers = (GLbitfield)luaL_checkinteger(L, 1);

    glMemoryBarrier(barriers);
    return 0;
}

int GlTexStorage1D(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLsizei levels         = (GLsizei)luaL_checkinteger(L, 2);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 3);
    GLsizei width          = (GLsizei)luaL_checkinteger(L, 4);

    glTexStorage1D(target, levels, internalformat, width);
    return 0;
}

int GlTexStorage2D(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLsizei levels         = (GLsizei)luaL_checkinteger(L, 2);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 3);
    GLsizei width          = (GLsizei)luaL_checkinteger(L, 4);
    GLsizei height         = (GLsizei)luaL_checkinteger(L, 5);

    glTexStorage2D(target, levels, internalformat, width, height);
    return 0;
}

int GlTexStorage3D(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLsizei levels         = (GLsizei)luaL_checkinteger(L, 2);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 3);
    GLsizei width          = (GLsizei)luaL_checkinteger(L, 4);
    GLsizei height         = (GLsizei)luaL_checkinteger(L, 5);
    GLsizei depth          = (GLsizei)luaL_checkinteger(L, 6);

    glTexStorage3D(target, levels, internalformat, width, height, depth);
    return 0;
}

int GlBindVertexBuffer(lua_State *L) {
    GLuint   bindingindex = (GLuint  )luaL_checkinteger(L, 1);
    GLuint   buffer       = (GLuint  )luaL_checkinteger(L, 2);
    GLintptr offset       = (GLintptr)luaL_checkinteger(L, 3);
    GLsizei  stride       = (GLsizei )luaL_checkinteger(L, 4);

    glBindVertexBuffer(bindingindex, buffer, offset, stride);
    return 0;
}

int GlClearBufferData(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLenum       internalformat = (GLenum      )luaL_checkinteger(L, 2);
    GLenum       format         = (GLenum      )luaL_checkinteger(L, 3);
    GLenum       type           = (GLenum      )luaL_checkinteger(L, 4);
    const void * data           = (const void *)luaL_checkudata(L, 5, "const void *");

    glClearBufferData(target, internalformat, format, type, data);
    return 0;
}

int GlClearBufferSubData(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLenum       internalformat = (GLenum      )luaL_checkinteger(L, 2);
    GLintptr     offset         = (GLintptr    )luaL_checkinteger(L, 3);
    GLsizeiptr   size           = (GLsizeiptr  )luaL_checkinteger(L, 4);
    GLenum       format         = (GLenum      )luaL_checkinteger(L, 5);
    GLenum       type           = (GLenum      )luaL_checkinteger(L, 6);
    const void * data           = (const void *)luaL_checkudata(L, 7, "const void *");

    glClearBufferSubData(target, internalformat, offset, size, format, type, data);
    return 0;
}

int GlCopyImageSubData(lua_State *L) {
    GLuint  srcName   = (GLuint )luaL_checkinteger(L, 1);
    GLenum  srcTarget = (GLenum )luaL_checkinteger(L, 2);
    GLint   srcLevel  = (GLint  )luaL_checkinteger(L, 3);
    GLint   srcX      = (GLint  )luaL_checkinteger(L, 4);
    GLint   srcY      = (GLint  )luaL_checkinteger(L, 5);
    GLint   srcZ      = (GLint  )luaL_checkinteger(L, 6);
    GLuint  dstName   = (GLuint )luaL_checkinteger(L, 7);
    GLenum  dstTarget = (GLenum )luaL_checkinteger(L, 8);
    GLint   dstLevel  = (GLint  )luaL_checkinteger(L, 9);
    GLint   dstX      = (GLint  )luaL_checkinteger(L, 10);
    GLint   dstY      = (GLint  )luaL_checkinteger(L, 11);
    GLint   dstZ      = (GLint  )luaL_checkinteger(L, 12);
    GLsizei srcWidth  = (GLsizei)luaL_checkinteger(L, 13);
    GLsizei srcHeight = (GLsizei)luaL_checkinteger(L, 14);
    GLsizei srcDepth  = (GLsizei)luaL_checkinteger(L, 15);

    glCopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
    return 0;
}

int GlDebugMessageCallback(lua_State *L) {
    GLDEBUGPROC  callback  = (GLDEBUGPROC )luaL_checkinteger(L, 1);
    const void * userParam = (const void *)luaL_checkudata(L, 2, "const void *");

    glDebugMessageCallback(callback, userParam);
    return 0;
}

int GlDebugMessageControl(lua_State *L) {
    GLenum         source   = (GLenum        )luaL_checkinteger(L, 1);
    GLenum         type     = (GLenum        )luaL_checkinteger(L, 2);
    GLenum         severity = (GLenum        )luaL_checkinteger(L, 3);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 4);
    const GLuint * ids      = (const GLuint *)luaL_checkudata(L, 5, "const GLuint *");
    GLboolean      enabled  = (GLboolean     )luaL_checkinteger(L, 6);

    glDebugMessageControl(source, type, severity, count, ids, enabled);
    return 0;
}

int GlDebugMessageInsert(lua_State *L) {
    GLenum         source   = (GLenum        )luaL_checkinteger(L, 1);
    GLenum         type     = (GLenum        )luaL_checkinteger(L, 2);
    GLuint         id       = (GLuint        )luaL_checkinteger(L, 3);
    GLenum         severity = (GLenum        )luaL_checkinteger(L, 4);
    GLsizei        length   = (GLsizei       )luaL_checkinteger(L, 5);
    const GLchar * buf      = (const GLchar *)luaL_checkstring(L, 6);

    glDebugMessageInsert(source, type, id, severity, length, buf);
    return 0;
}

int GlDispatchCompute(lua_State *L) {
    GLuint num_groups_x = (GLuint)luaL_checkinteger(L, 1);
    GLuint num_groups_y = (GLuint)luaL_checkinteger(L, 2);
    GLuint num_groups_z = (GLuint)luaL_checkinteger(L, 3);

    glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
    return 0;
}

int GlDispatchComputeIndirect(lua_State *L) {
    GLintptr indirect = (GLintptr)luaL_checkinteger(L, 1);

    glDispatchComputeIndirect(indirect);
    return 0;
}

int GlFramebufferParameteri(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLenum pname  = (GLenum)luaL_checkinteger(L, 2);
    GLint  param  = (GLint )luaL_checkinteger(L, 3);

    glFramebufferParameteri(target, pname, param);
    return 0;
}

int GlGetDebugMessageLog(lua_State *L) {
    GLuint    count      = (GLuint   )luaL_checkinteger(L, 1);
    GLsizei   bufSize    = (GLsizei  )luaL_checkinteger(L, 2);
    GLenum *  sources    = (GLenum * )luaL_checkudata(L, 3, "GLenum *");
    GLenum *  types      = (GLenum * )luaL_checkudata(L, 4, "GLenum *");
    GLuint *  ids        = (GLuint * )luaL_checkudata(L, 5, "GLuint *");
    GLenum *  severities = (GLenum * )luaL_checkudata(L, 6, "GLenum *");
    GLsizei * lengths    = (GLsizei *)luaL_checkudata(L, 7, "GLsizei *");
    GLchar *  messageLog = (GLchar * )luaL_checkstring(L, 8);

    glGetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
    return 0;
}

int GlGetFramebufferParameteriv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetFramebufferParameteriv(target, pname, params);
    return 0;
}

int GlGetInternalformati64v(lua_State *L) {
    GLenum    target         = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    internalformat = (GLenum   )luaL_checkinteger(L, 2);
    GLenum    pname          = (GLenum   )luaL_checkinteger(L, 3);
    GLsizei   bufSize        = (GLsizei  )luaL_checkinteger(L, 4);
    GLint64 * params         = (GLint64 *)luaL_checkudata(L, 5, "GLint64 *");

    glGetInternalformati64v(target, internalformat, pname, bufSize, params);
    return 0;
}

int GlGetObjectLabel(lua_State *L) {
    GLenum    identifier = (GLenum   )luaL_checkinteger(L, 1);
    GLuint    name       = (GLuint   )luaL_checkinteger(L, 2);
    GLsizei   bufSize    = (GLsizei  )luaL_checkinteger(L, 3);
    GLsizei * length     = (GLsizei *)luaL_checkudata(L, 4, "GLsizei *");
    GLchar *  label      = (GLchar * )luaL_checkstring(L, 5);

    glGetObjectLabel(identifier, name, bufSize, length, label);
    return 0;
}

int GlGetObjectPtrLabel(lua_State *L) {
    const void * ptr     = (const void *)luaL_checkudata(L, 1, "const void *");
    GLsizei      bufSize = (GLsizei     )luaL_checkinteger(L, 2);
    GLsizei *    length  = (GLsizei *   )luaL_checkudata(L, 3, "GLsizei *");
    GLchar *     label   = (GLchar *    )luaL_checkstring(L, 4);

    glGetObjectPtrLabel(ptr, bufSize, length, label);
    return 0;
}

int GlGetProgramInterfaceiv(lua_State *L) {
    GLuint  program          = (GLuint )luaL_checkinteger(L, 1);
    GLenum  programInterface = (GLenum )luaL_checkinteger(L, 2);
    GLenum  pname            = (GLenum )luaL_checkinteger(L, 3);
    GLint * params           = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetProgramInterfaceiv(program, programInterface, pname, params);
    return 0;
}

int GlGetProgramResourceIndex(lua_State *L) {
    GLuint         program          = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         programInterface = (GLenum        )luaL_checkinteger(L, 2);
    const GLchar * name             = (const GLchar *)luaL_checkstring(L, 3);

    glGetProgramResourceIndex(program, programInterface, name);
    return 0;
}

int GlGetProgramResourceLocation(lua_State *L) {
    GLuint         program          = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         programInterface = (GLenum        )luaL_checkinteger(L, 2);
    const GLchar * name             = (const GLchar *)luaL_checkstring(L, 3);

    glGetProgramResourceLocation(program, programInterface, name);
    return 0;
}

int GlGetProgramResourceLocationIndex(lua_State *L) {
    GLuint         program          = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         programInterface = (GLenum        )luaL_checkinteger(L, 2);
    const GLchar * name             = (const GLchar *)luaL_checkstring(L, 3);

    glGetProgramResourceLocationIndex(program, programInterface, name);
    return 0;
}

int GlGetProgramResourceName(lua_State *L) {
    GLuint    program          = (GLuint   )luaL_checkinteger(L, 1);
    GLenum    programInterface = (GLenum   )luaL_checkinteger(L, 2);
    GLuint    index            = (GLuint   )luaL_checkinteger(L, 3);
    GLsizei   bufSize          = (GLsizei  )luaL_checkinteger(L, 4);
    GLsizei * length           = (GLsizei *)luaL_checkudata(L, 5, "GLsizei *");
    GLchar *  name             = (GLchar * )luaL_checkstring(L, 6);

    glGetProgramResourceName(program, programInterface, index, bufSize, length, name);
    return 0;
}

int GlGetProgramResourceiv(lua_State *L) {
    GLuint         program          = (GLuint        )luaL_checkinteger(L, 1);
    GLenum         programInterface = (GLenum        )luaL_checkinteger(L, 2);
    GLuint         index            = (GLuint        )luaL_checkinteger(L, 3);
    GLsizei        propCount        = (GLsizei       )luaL_checkinteger(L, 4);
    const GLenum * props            = (const GLenum *)luaL_checkudata(L, 5, "const GLenum *");
    GLsizei        bufSize          = (GLsizei       )luaL_checkinteger(L, 6);
    GLsizei *      length           = (GLsizei *     )luaL_checkudata(L, 7, "GLsizei *");
    GLint *        params           = (GLint *       )luaL_checkudata(L, 8, "GLint *");

    glGetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
    return 0;
}

int GlInvalidateBufferData(lua_State *L) {
    GLuint buffer = (GLuint)luaL_checkinteger(L, 1);

    glInvalidateBufferData(buffer);
    return 0;
}

int GlInvalidateBufferSubData(lua_State *L) {
    GLuint     buffer = (GLuint    )luaL_checkinteger(L, 1);
    GLintptr   offset = (GLintptr  )luaL_checkinteger(L, 2);
    GLsizeiptr length = (GLsizeiptr)luaL_checkinteger(L, 3);

    glInvalidateBufferSubData(buffer, offset, length);
    return 0;
}

int GlInvalidateFramebuffer(lua_State *L) {
    GLenum         target         = (GLenum        )luaL_checkinteger(L, 1);
    GLsizei        numAttachments = (GLsizei       )luaL_checkinteger(L, 2);
    const GLenum * attachments    = (const GLenum *)luaL_checkudata(L, 3, "const GLenum *");

    glInvalidateFramebuffer(target, numAttachments, attachments);
    return 0;
}

int GlInvalidateSubFramebuffer(lua_State *L) {
    GLenum         target         = (GLenum        )luaL_checkinteger(L, 1);
    GLsizei        numAttachments = (GLsizei       )luaL_checkinteger(L, 2);
    const GLenum * attachments    = (const GLenum *)luaL_checkudata(L, 3, "const GLenum *");
    GLint          x              = (GLint         )luaL_checkinteger(L, 4);
    GLint          y              = (GLint         )luaL_checkinteger(L, 5);
    GLsizei        width          = (GLsizei       )luaL_checkinteger(L, 6);
    GLsizei        height         = (GLsizei       )luaL_checkinteger(L, 7);

    glInvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
    return 0;
}

int GlInvalidateTexImage(lua_State *L) {
    GLuint texture = (GLuint)luaL_checkinteger(L, 1);
    GLint  level   = (GLint )luaL_checkinteger(L, 2);

    glInvalidateTexImage(texture, level);
    return 0;
}

int GlInvalidateTexSubImage(lua_State *L) {
    GLuint  texture = (GLuint )luaL_checkinteger(L, 1);
    GLint   level   = (GLint  )luaL_checkinteger(L, 2);
    GLint   xoffset = (GLint  )luaL_checkinteger(L, 3);
    GLint   yoffset = (GLint  )luaL_checkinteger(L, 4);
    GLint   zoffset = (GLint  )luaL_checkinteger(L, 5);
    GLsizei width   = (GLsizei)luaL_checkinteger(L, 6);
    GLsizei height  = (GLsizei)luaL_checkinteger(L, 7);
    GLsizei depth   = (GLsizei)luaL_checkinteger(L, 8);

    glInvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
    return 0;
}

int GlMultiDrawArraysIndirect(lua_State *L) {
    GLenum       mode      = (GLenum      )luaL_checkinteger(L, 1);
    const void * indirect  = (const void *)luaL_checkudata(L, 2, "const void *");
    GLsizei      drawcount = (GLsizei     )luaL_checkinteger(L, 3);
    GLsizei      stride    = (GLsizei     )luaL_checkinteger(L, 4);

    glMultiDrawArraysIndirect(mode, indirect, drawcount, stride);
    return 0;
}

int GlMultiDrawElementsIndirect(lua_State *L) {
    GLenum       mode      = (GLenum      )luaL_checkinteger(L, 1);
    GLenum       type      = (GLenum      )luaL_checkinteger(L, 2);
    const void * indirect  = (const void *)luaL_checkudata(L, 3, "const void *");
    GLsizei      drawcount = (GLsizei     )luaL_checkinteger(L, 4);
    GLsizei      stride    = (GLsizei     )luaL_checkinteger(L, 5);

    glMultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
    return 0;
}

int GlObjectLabel(lua_State *L) {
    GLenum         identifier = (GLenum        )luaL_checkinteger(L, 1);
    GLuint         name       = (GLuint        )luaL_checkinteger(L, 2);
    GLsizei        length     = (GLsizei       )luaL_checkinteger(L, 3);
    const GLchar * label      = (const GLchar *)luaL_checkstring(L, 4);

    glObjectLabel(identifier, name, length, label);
    return 0;
}

int GlObjectPtrLabel(lua_State *L) {
    const void *   ptr    = (const void *  )luaL_checkudata(L, 1, "const void *");
    GLsizei        length = (GLsizei       )luaL_checkinteger(L, 2);
    const GLchar * label  = (const GLchar *)luaL_checkstring(L, 3);

    glObjectPtrLabel(ptr, length, label);
    return 0;
}

int GlPopDebugGroup(lua_State *L) {

    glPopDebugGroup();
    return 0;
}

int GlPushDebugGroup(lua_State *L) {
    GLenum         source  = (GLenum        )luaL_checkinteger(L, 1);
    GLuint         id      = (GLuint        )luaL_checkinteger(L, 2);
    GLsizei        length  = (GLsizei       )luaL_checkinteger(L, 3);
    const GLchar * message = (const GLchar *)luaL_checkstring(L, 4);

    glPushDebugGroup(source, id, length, message);
    return 0;
}

int GlShaderStorageBlockBinding(lua_State *L) {
    GLuint program             = (GLuint)luaL_checkinteger(L, 1);
    GLuint storageBlockIndex   = (GLuint)luaL_checkinteger(L, 2);
    GLuint storageBlockBinding = (GLuint)luaL_checkinteger(L, 3);

    glShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
    return 0;
}

int GlTexBufferRange(lua_State *L) {
    GLenum     target         = (GLenum    )luaL_checkinteger(L, 1);
    GLenum     internalformat = (GLenum    )luaL_checkinteger(L, 2);
    GLuint     buffer         = (GLuint    )luaL_checkinteger(L, 3);
    GLintptr   offset         = (GLintptr  )luaL_checkinteger(L, 4);
    GLsizeiptr size           = (GLsizeiptr)luaL_checkinteger(L, 5);

    glTexBufferRange(target, internalformat, buffer, offset, size);
    return 0;
}

int GlTexStorage2DMultisample(lua_State *L) {
    GLenum    target               = (GLenum   )luaL_checkinteger(L, 1);
    GLsizei   samples              = (GLsizei  )luaL_checkinteger(L, 2);
    GLenum    internalformat       = (GLenum   )luaL_checkinteger(L, 3);
    GLsizei   width                = (GLsizei  )luaL_checkinteger(L, 4);
    GLsizei   height               = (GLsizei  )luaL_checkinteger(L, 5);
    GLboolean fixedsamplelocations = (GLboolean)luaL_checkinteger(L, 6);

    glTexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
    return 0;
}

int GlTexStorage3DMultisample(lua_State *L) {
    GLenum    target               = (GLenum   )luaL_checkinteger(L, 1);
    GLsizei   samples              = (GLsizei  )luaL_checkinteger(L, 2);
    GLenum    internalformat       = (GLenum   )luaL_checkinteger(L, 3);
    GLsizei   width                = (GLsizei  )luaL_checkinteger(L, 4);
    GLsizei   height               = (GLsizei  )luaL_checkinteger(L, 5);
    GLsizei   depth                = (GLsizei  )luaL_checkinteger(L, 6);
    GLboolean fixedsamplelocations = (GLboolean)luaL_checkinteger(L, 7);

    glTexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
    return 0;
}

int GlTextureView(lua_State *L) {
    GLuint texture        = (GLuint)luaL_checkinteger(L, 1);
    GLenum target         = (GLenum)luaL_checkinteger(L, 2);
    GLuint origtexture    = (GLuint)luaL_checkinteger(L, 3);
    GLenum internalformat = (GLenum)luaL_checkinteger(L, 4);
    GLuint minlevel       = (GLuint)luaL_checkinteger(L, 5);
    GLuint numlevels      = (GLuint)luaL_checkinteger(L, 6);
    GLuint minlayer       = (GLuint)luaL_checkinteger(L, 7);
    GLuint numlayers      = (GLuint)luaL_checkinteger(L, 8);

    glTextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
    return 0;
}

int GlVertexAttribBinding(lua_State *L) {
    GLuint attribindex  = (GLuint)luaL_checkinteger(L, 1);
    GLuint bindingindex = (GLuint)luaL_checkinteger(L, 2);

    glVertexAttribBinding(attribindex, bindingindex);
    return 0;
}

int GlVertexAttribFormat(lua_State *L) {
    GLuint    attribindex    = (GLuint   )luaL_checkinteger(L, 1);
    GLint     size           = (GLint    )luaL_checkinteger(L, 2);
    GLenum    type           = (GLenum   )luaL_checkinteger(L, 3);
    GLboolean normalized     = (GLboolean)luaL_checkinteger(L, 4);
    GLuint    relativeoffset = (GLuint   )luaL_checkinteger(L, 5);

    glVertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
    return 0;
}

int GlVertexAttribIFormat(lua_State *L) {
    GLuint attribindex    = (GLuint)luaL_checkinteger(L, 1);
    GLint  size           = (GLint )luaL_checkinteger(L, 2);
    GLenum type           = (GLenum)luaL_checkinteger(L, 3);
    GLuint relativeoffset = (GLuint)luaL_checkinteger(L, 4);

    glVertexAttribIFormat(attribindex, size, type, relativeoffset);
    return 0;
}

int GlVertexAttribLFormat(lua_State *L) {
    GLuint attribindex    = (GLuint)luaL_checkinteger(L, 1);
    GLint  size           = (GLint )luaL_checkinteger(L, 2);
    GLenum type           = (GLenum)luaL_checkinteger(L, 3);
    GLuint relativeoffset = (GLuint)luaL_checkinteger(L, 4);

    glVertexAttribLFormat(attribindex, size, type, relativeoffset);
    return 0;
}

int GlVertexBindingDivisor(lua_State *L) {
    GLuint bindingindex = (GLuint)luaL_checkinteger(L, 1);
    GLuint divisor      = (GLuint)luaL_checkinteger(L, 2);

    glVertexBindingDivisor(bindingindex, divisor);
    return 0;
}

int GlBindBuffersBase(lua_State *L) {
    GLenum         target  = (GLenum        )luaL_checkinteger(L, 1);
    GLuint         first   = (GLuint        )luaL_checkinteger(L, 2);
    GLsizei        count   = (GLsizei       )luaL_checkinteger(L, 3);
    const GLuint * buffers = (const GLuint *)luaL_checkudata(L, 4, "const GLuint *");

    glBindBuffersBase(target, first, count, buffers);
    return 0;
}

int GlBindBuffersRange(lua_State *L) {
    GLenum             target  = (GLenum            )luaL_checkinteger(L, 1);
    GLuint             first   = (GLuint            )luaL_checkinteger(L, 2);
    GLsizei            count   = (GLsizei           )luaL_checkinteger(L, 3);
    const GLuint *     buffers = (const GLuint *    )luaL_checkudata(L, 4, "const GLuint *");
    const GLintptr *   offsets = (const GLintptr *  )luaL_checkudata(L, 5, "const GLintptr *");
    const GLsizeiptr * sizes   = (const GLsizeiptr *)luaL_checkudata(L, 6, "const GLsizeiptr *");

    glBindBuffersRange(target, first, count, buffers, offsets, sizes);
    return 0;
}

int GlBindImageTextures(lua_State *L) {
    GLuint         first    = (GLuint        )luaL_checkinteger(L, 1);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * textures = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glBindImageTextures(first, count, textures);
    return 0;
}

int GlBindSamplers(lua_State *L) {
    GLuint         first    = (GLuint        )luaL_checkinteger(L, 1);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * samplers = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glBindSamplers(first, count, samplers);
    return 0;
}

int GlBindTextures(lua_State *L) {
    GLuint         first    = (GLuint        )luaL_checkinteger(L, 1);
    GLsizei        count    = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * textures = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glBindTextures(first, count, textures);
    return 0;
}

int GlBindVertexBuffers(lua_State *L) {
    GLuint           first   = (GLuint          )luaL_checkinteger(L, 1);
    GLsizei          count   = (GLsizei         )luaL_checkinteger(L, 2);
    const GLuint *   buffers = (const GLuint *  )luaL_checkudata(L, 3, "const GLuint *");
    const GLintptr * offsets = (const GLintptr *)luaL_checkudata(L, 4, "const GLintptr *");
    const GLsizei *  strides = (const GLsizei * )luaL_checkudata(L, 5, "const GLsizei *");

    glBindVertexBuffers(first, count, buffers, offsets, strides);
    return 0;
}

int GlBufferStorage(lua_State *L) {
    GLenum       target = (GLenum      )luaL_checkinteger(L, 1);
    GLsizeiptr   size   = (GLsizeiptr  )luaL_checkinteger(L, 2);
    const void * data   = (const void *)luaL_checkudata(L, 3, "const void *");
    GLbitfield   flags  = (GLbitfield  )luaL_checkinteger(L, 4);

    glBufferStorage(target, size, data, flags);
    return 0;
}

int GlClearTexImage(lua_State *L) {
    GLuint       texture = (GLuint      )luaL_checkinteger(L, 1);
    GLint        level   = (GLint       )luaL_checkinteger(L, 2);
    GLenum       format  = (GLenum      )luaL_checkinteger(L, 3);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 4);
    const void * data    = (const void *)luaL_checkudata(L, 5, "const void *");

    glClearTexImage(texture, level, format, type, data);
    return 0;
}

int GlClearTexSubImage(lua_State *L) {
    GLuint       texture = (GLuint      )luaL_checkinteger(L, 1);
    GLint        level   = (GLint       )luaL_checkinteger(L, 2);
    GLint        xoffset = (GLint       )luaL_checkinteger(L, 3);
    GLint        yoffset = (GLint       )luaL_checkinteger(L, 4);
    GLint        zoffset = (GLint       )luaL_checkinteger(L, 5);
    GLsizei      width   = (GLsizei     )luaL_checkinteger(L, 6);
    GLsizei      height  = (GLsizei     )luaL_checkinteger(L, 7);
    GLsizei      depth   = (GLsizei     )luaL_checkinteger(L, 8);
    GLenum       format  = (GLenum      )luaL_checkinteger(L, 9);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 10);
    const void * data    = (const void *)luaL_checkudata(L, 11, "const void *");

    glClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
    return 0;
}

int GlAccum(lua_State *L) {
    GLenum  op    = (GLenum )luaL_checkinteger(L, 1);
    GLfloat value = (GLfloat)luaL_checknumber(L, 2);

    glAccum(op, value);
    return 0;
}

int GlAlphaFunc(lua_State *L) {
    GLenum  func = (GLenum )luaL_checkinteger(L, 1);
    GLfloat ref  = (GLfloat)luaL_checknumber(L, 2);

    glAlphaFunc(func, ref);
    return 0;
}

int GlBegin(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glBegin(mode);
    return 0;
}

int GlBitmap(lua_State *L) {
    GLsizei         width  = (GLsizei        )luaL_checkinteger(L, 1);
    GLsizei         height = (GLsizei        )luaL_checkinteger(L, 2);
    GLfloat         xorig  = (GLfloat        )luaL_checknumber(L, 3);
    GLfloat         yorig  = (GLfloat        )luaL_checknumber(L, 4);
    GLfloat         xmove  = (GLfloat        )luaL_checknumber(L, 5);
    GLfloat         ymove  = (GLfloat        )luaL_checknumber(L, 6);
    const GLubyte * bitmap = (const GLubyte *)luaL_checkudata(L, 7, "const GLubyte *");

    glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
    return 0;
}

int GlBlendFunc(lua_State *L) {
    GLenum sfactor = (GLenum)luaL_checkinteger(L, 1);
    GLenum dfactor = (GLenum)luaL_checkinteger(L, 2);

    glBlendFunc(sfactor, dfactor);
    return 0;
}

int GlCallList(lua_State *L) {
    GLuint list = (GLuint)luaL_checkinteger(L, 1);

    glCallList(list);
    return 0;
}

int GlCallLists(lua_State *L) {
    GLsizei      n     = (GLsizei     )luaL_checkinteger(L, 1);
    GLenum       type  = (GLenum      )luaL_checkinteger(L, 2);
    const void * lists = (const void *)luaL_checkudata(L, 3, "const void *");

    glCallLists(n, type, lists);
    return 0;
}

int GlClear(lua_State *L) {
    GLbitfield mask = (GLbitfield)luaL_checkinteger(L, 1);

    glClear(mask);
    return 0;
}

int GlClearAccum(lua_State *L) {
    GLfloat red   = (GLfloat)luaL_checknumber(L, 1);
    GLfloat green = (GLfloat)luaL_checknumber(L, 2);
    GLfloat blue  = (GLfloat)luaL_checknumber(L, 3);
    GLfloat alpha = (GLfloat)luaL_checknumber(L, 4);

    glClearAccum(red, green, blue, alpha);
    return 0;
}

int GlClearColor(lua_State *L) {
    GLfloat red   = (GLfloat)luaL_checknumber(L, 1);
    GLfloat green = (GLfloat)luaL_checknumber(L, 2);
    GLfloat blue  = (GLfloat)luaL_checknumber(L, 3);
    GLfloat alpha = (GLfloat)luaL_checknumber(L, 4);

    glClearColor(red, green, blue, alpha);
    return 0;
}

int GlClearDepth(lua_State *L) {
    GLdouble depth = (GLdouble)luaL_checknumber(L, 1);

    glClearDepth(depth);
    return 0;
}

int GlClearIndex(lua_State *L) {
    GLfloat c = (GLfloat)luaL_checknumber(L, 1);

    glClearIndex(c);
    return 0;
}

int GlClearStencil(lua_State *L) {
    GLint s = (GLint)luaL_checkinteger(L, 1);

    glClearStencil(s);
    return 0;
}

int GlClipPlane(lua_State *L) {
    GLenum           plane    = (GLenum          )luaL_checkinteger(L, 1);
    const GLdouble * equation = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glClipPlane(plane, equation);
    return 0;
}

int GlColor3b(lua_State *L) {
    GLbyte red   = (GLbyte)luaL_checkinteger(L, 1);
    GLbyte green = (GLbyte)luaL_checkinteger(L, 2);
    GLbyte blue  = (GLbyte)luaL_checkinteger(L, 3);

    glColor3b(red, green, blue);
    return 0;
}

int GlColor3bv(lua_State *L) {
    const GLbyte * v = (const GLbyte *)luaL_checkudata(L, 1, "const GLbyte *");

    glColor3bv(v);
    return 0;
}

int GlColor3d(lua_State *L) {
    GLdouble red   = (GLdouble)luaL_checknumber(L, 1);
    GLdouble green = (GLdouble)luaL_checknumber(L, 2);
    GLdouble blue  = (GLdouble)luaL_checknumber(L, 3);

    glColor3d(red, green, blue);
    return 0;
}

int GlColor3dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glColor3dv(v);
    return 0;
}

int GlColor3f(lua_State *L) {
    GLfloat red   = (GLfloat)luaL_checknumber(L, 1);
    GLfloat green = (GLfloat)luaL_checknumber(L, 2);
    GLfloat blue  = (GLfloat)luaL_checknumber(L, 3);

    glColor3f(red, green, blue);
    return 0;
}

int GlColor3fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glColor3fv(v);
    return 0;
}

int GlColor3i(lua_State *L) {
    GLint red   = (GLint)luaL_checkinteger(L, 1);
    GLint green = (GLint)luaL_checkinteger(L, 2);
    GLint blue  = (GLint)luaL_checkinteger(L, 3);

    glColor3i(red, green, blue);
    return 0;
}

int GlColor3iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glColor3iv(v);
    return 0;
}

int GlColor3s(lua_State *L) {
    GLshort red   = (GLshort)luaL_checkinteger(L, 1);
    GLshort green = (GLshort)luaL_checkinteger(L, 2);
    GLshort blue  = (GLshort)luaL_checkinteger(L, 3);

    glColor3s(red, green, blue);
    return 0;
}

int GlColor3sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glColor3sv(v);
    return 0;
}

int GlColor3ub(lua_State *L) {
    GLubyte red   = (GLubyte)luaL_checkinteger(L, 1);
    GLubyte green = (GLubyte)luaL_checkinteger(L, 2);
    GLubyte blue  = (GLubyte)luaL_checkinteger(L, 3);

    glColor3ub(red, green, blue);
    return 0;
}

int GlColor3ubv(lua_State *L) {
    const GLubyte * v = (const GLubyte *)luaL_checkudata(L, 1, "const GLubyte *");

    glColor3ubv(v);
    return 0;
}

int GlColor3ui(lua_State *L) {
    GLuint red   = (GLuint)luaL_checkinteger(L, 1);
    GLuint green = (GLuint)luaL_checkinteger(L, 2);
    GLuint blue  = (GLuint)luaL_checkinteger(L, 3);

    glColor3ui(red, green, blue);
    return 0;
}

int GlColor3uiv(lua_State *L) {
    const GLuint * v = (const GLuint *)luaL_checkudata(L, 1, "const GLuint *");

    glColor3uiv(v);
    return 0;
}

int GlColor3us(lua_State *L) {
    GLushort red   = (GLushort)luaL_checkinteger(L, 1);
    GLushort green = (GLushort)luaL_checkinteger(L, 2);
    GLushort blue  = (GLushort)luaL_checkinteger(L, 3);

    glColor3us(red, green, blue);
    return 0;
}

int GlColor3usv(lua_State *L) {
    const GLushort * v = (const GLushort *)luaL_checkudata(L, 1, "const GLushort *");

    glColor3usv(v);
    return 0;
}

int GlColor4b(lua_State *L) {
    GLbyte red   = (GLbyte)luaL_checkinteger(L, 1);
    GLbyte green = (GLbyte)luaL_checkinteger(L, 2);
    GLbyte blue  = (GLbyte)luaL_checkinteger(L, 3);
    GLbyte alpha = (GLbyte)luaL_checkinteger(L, 4);

    glColor4b(red, green, blue, alpha);
    return 0;
}

int GlColor4bv(lua_State *L) {
    const GLbyte * v = (const GLbyte *)luaL_checkudata(L, 1, "const GLbyte *");

    glColor4bv(v);
    return 0;
}

int GlColor4d(lua_State *L) {
    GLdouble red   = (GLdouble)luaL_checknumber(L, 1);
    GLdouble green = (GLdouble)luaL_checknumber(L, 2);
    GLdouble blue  = (GLdouble)luaL_checknumber(L, 3);
    GLdouble alpha = (GLdouble)luaL_checknumber(L, 4);

    glColor4d(red, green, blue, alpha);
    return 0;
}

int GlColor4dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glColor4dv(v);
    return 0;
}

int GlColor4f(lua_State *L) {
    GLfloat red   = (GLfloat)luaL_checknumber(L, 1);
    GLfloat green = (GLfloat)luaL_checknumber(L, 2);
    GLfloat blue  = (GLfloat)luaL_checknumber(L, 3);
    GLfloat alpha = (GLfloat)luaL_checknumber(L, 4);

    glColor4f(red, green, blue, alpha);
    return 0;
}

int GlColor4fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glColor4fv(v);
    return 0;
}

int GlColor4i(lua_State *L) {
    GLint red   = (GLint)luaL_checkinteger(L, 1);
    GLint green = (GLint)luaL_checkinteger(L, 2);
    GLint blue  = (GLint)luaL_checkinteger(L, 3);
    GLint alpha = (GLint)luaL_checkinteger(L, 4);

    glColor4i(red, green, blue, alpha);
    return 0;
}

int GlColor4iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glColor4iv(v);
    return 0;
}

int GlColor4s(lua_State *L) {
    GLshort red   = (GLshort)luaL_checkinteger(L, 1);
    GLshort green = (GLshort)luaL_checkinteger(L, 2);
    GLshort blue  = (GLshort)luaL_checkinteger(L, 3);
    GLshort alpha = (GLshort)luaL_checkinteger(L, 4);

    glColor4s(red, green, blue, alpha);
    return 0;
}

int GlColor4sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glColor4sv(v);
    return 0;
}

int GlColor4ub(lua_State *L) {
    GLubyte red   = (GLubyte)luaL_checkinteger(L, 1);
    GLubyte green = (GLubyte)luaL_checkinteger(L, 2);
    GLubyte blue  = (GLubyte)luaL_checkinteger(L, 3);
    GLubyte alpha = (GLubyte)luaL_checkinteger(L, 4);

    glColor4ub(red, green, blue, alpha);
    return 0;
}

int GlColor4ubv(lua_State *L) {
    const GLubyte * v = (const GLubyte *)luaL_checkudata(L, 1, "const GLubyte *");

    glColor4ubv(v);
    return 0;
}

int GlColor4ui(lua_State *L) {
    GLuint red   = (GLuint)luaL_checkinteger(L, 1);
    GLuint green = (GLuint)luaL_checkinteger(L, 2);
    GLuint blue  = (GLuint)luaL_checkinteger(L, 3);
    GLuint alpha = (GLuint)luaL_checkinteger(L, 4);

    glColor4ui(red, green, blue, alpha);
    return 0;
}

int GlColor4uiv(lua_State *L) {
    const GLuint * v = (const GLuint *)luaL_checkudata(L, 1, "const GLuint *");

    glColor4uiv(v);
    return 0;
}

int GlColor4us(lua_State *L) {
    GLushort red   = (GLushort)luaL_checkinteger(L, 1);
    GLushort green = (GLushort)luaL_checkinteger(L, 2);
    GLushort blue  = (GLushort)luaL_checkinteger(L, 3);
    GLushort alpha = (GLushort)luaL_checkinteger(L, 4);

    glColor4us(red, green, blue, alpha);
    return 0;
}

int GlColor4usv(lua_State *L) {
    const GLushort * v = (const GLushort *)luaL_checkudata(L, 1, "const GLushort *");

    glColor4usv(v);
    return 0;
}

int GlColorMask(lua_State *L) {
    GLboolean red   = (GLboolean)luaL_checkinteger(L, 1);
    GLboolean green = (GLboolean)luaL_checkinteger(L, 2);
    GLboolean blue  = (GLboolean)luaL_checkinteger(L, 3);
    GLboolean alpha = (GLboolean)luaL_checkinteger(L, 4);

    glColorMask(red, green, blue, alpha);
    return 0;
}

int GlColorMaterial(lua_State *L) {
    GLenum face = (GLenum)luaL_checkinteger(L, 1);
    GLenum mode = (GLenum)luaL_checkinteger(L, 2);

    glColorMaterial(face, mode);
    return 0;
}

int GlCopyPixels(lua_State *L) {
    GLint   x      = (GLint  )luaL_checkinteger(L, 1);
    GLint   y      = (GLint  )luaL_checkinteger(L, 2);
    GLsizei width  = (GLsizei)luaL_checkinteger(L, 3);
    GLsizei height = (GLsizei)luaL_checkinteger(L, 4);
    GLenum  type   = (GLenum )luaL_checkinteger(L, 5);

    glCopyPixels(x, y, width, height, type);
    return 0;
}

int GlCullFace(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glCullFace(mode);
    return 0;
}

int GlDeleteLists(lua_State *L) {
    GLuint  list  = (GLuint )luaL_checkinteger(L, 1);
    GLsizei range = (GLsizei)luaL_checkinteger(L, 2);

    glDeleteLists(list, range);
    return 0;
}

int GlDepthFunc(lua_State *L) {
    GLenum func = (GLenum)luaL_checkinteger(L, 1);

    glDepthFunc(func);
    return 0;
}

int GlDepthMask(lua_State *L) {
    GLboolean flag = (GLboolean)luaL_checkinteger(L, 1);

    glDepthMask(flag);
    return 0;
}

int GlDepthRange(lua_State *L) {
    GLdouble ren_near = (GLdouble)luaL_checknumber(L, 1);
    GLdouble ren_far  = (GLdouble)luaL_checknumber(L, 2);

    glDepthRange(ren_near, ren_far);
    return 0;
}

int GlDisable(lua_State *L) {
    GLenum cap = (GLenum)luaL_checkinteger(L, 1);

    glDisable(cap);
    return 0;
}

int GlDrawBuffer(lua_State *L) {
    GLenum buf = (GLenum)luaL_checkinteger(L, 1);

    glDrawBuffer(buf);
    return 0;
}

int GlDrawPixels(lua_State *L) {
    GLsizei      width  = (GLsizei     )luaL_checkinteger(L, 1);
    GLsizei      height = (GLsizei     )luaL_checkinteger(L, 2);
    GLenum       format = (GLenum      )luaL_checkinteger(L, 3);
    GLenum       type   = (GLenum      )luaL_checkinteger(L, 4);
    const void * pixels = (const void *)luaL_checkudata(L, 5, "const void *");

    glDrawPixels(width, height, format, type, pixels);
    return 0;
}

int GlEdgeFlag(lua_State *L) {
    GLboolean flag = (GLboolean)luaL_checkinteger(L, 1);

    glEdgeFlag(flag);
    return 0;
}

int GlEdgeFlagv(lua_State *L) {
    const GLboolean * flag = (const GLboolean *)luaL_checkudata(L, 1, "const GLboolean *");

    glEdgeFlagv(flag);
    return 0;
}

int GlEnable(lua_State *L) {
    GLenum cap = (GLenum)luaL_checkinteger(L, 1);

    glEnable(cap);
    return 0;
}

int GlEnd(lua_State *L) {

    glEnd();
    return 0;
}

int GlEndList(lua_State *L) {

    glEndList();
    return 0;
}

int GlEvalCoord1d(lua_State *L) {
    GLdouble u = (GLdouble)luaL_checknumber(L, 1);

    glEvalCoord1d(u);
    return 0;
}

int GlEvalCoord1dv(lua_State *L) {
    const GLdouble * u = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glEvalCoord1dv(u);
    return 0;
}

int GlEvalCoord1f(lua_State *L) {
    GLfloat u = (GLfloat)luaL_checknumber(L, 1);

    glEvalCoord1f(u);
    return 0;
}

int GlEvalCoord1fv(lua_State *L) {
    const GLfloat * u = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glEvalCoord1fv(u);
    return 0;
}

int GlEvalCoord2d(lua_State *L) {
    GLdouble u = (GLdouble)luaL_checknumber(L, 1);
    GLdouble v = (GLdouble)luaL_checknumber(L, 2);

    glEvalCoord2d(u, v);
    return 0;
}

int GlEvalCoord2dv(lua_State *L) {
    const GLdouble * u = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glEvalCoord2dv(u);
    return 0;
}

int GlEvalCoord2f(lua_State *L) {
    GLfloat u = (GLfloat)luaL_checknumber(L, 1);
    GLfloat v = (GLfloat)luaL_checknumber(L, 2);

    glEvalCoord2f(u, v);
    return 0;
}

int GlEvalCoord2fv(lua_State *L) {
    const GLfloat * u = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glEvalCoord2fv(u);
    return 0;
}

int GlEvalMesh1(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);
    GLint  i1   = (GLint )luaL_checkinteger(L, 2);
    GLint  i2   = (GLint )luaL_checkinteger(L, 3);

    glEvalMesh1(mode, i1, i2);
    return 0;
}

int GlEvalMesh2(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);
    GLint  i1   = (GLint )luaL_checkinteger(L, 2);
    GLint  i2   = (GLint )luaL_checkinteger(L, 3);
    GLint  j1   = (GLint )luaL_checkinteger(L, 4);
    GLint  j2   = (GLint )luaL_checkinteger(L, 5);

    glEvalMesh2(mode, i1, i2, j1, j2);
    return 0;
}

int GlEvalPoint1(lua_State *L) {
    GLint i = (GLint)luaL_checkinteger(L, 1);

    glEvalPoint1(i);
    return 0;
}

int GlEvalPoint2(lua_State *L) {
    GLint i = (GLint)luaL_checkinteger(L, 1);
    GLint j = (GLint)luaL_checkinteger(L, 2);

    glEvalPoint2(i, j);
    return 0;
}

int GlFeedbackBuffer(lua_State *L) {
    GLsizei   size   = (GLsizei  )luaL_checkinteger(L, 1);
    GLenum    type   = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * buffer = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glFeedbackBuffer(size, type, buffer);
    return 0;
}

int GlFinish(lua_State *L) {

    glFinish();
    return 0;
}

int GlFlush(lua_State *L) {

    glFlush();
    return 0;
}

int GlFogf(lua_State *L) {
    GLenum  pname = (GLenum )luaL_checkinteger(L, 1);
    GLfloat param = (GLfloat)luaL_checknumber(L, 2);

    glFogf(pname, param);
    return 0;
}

int GlFogfv(lua_State *L) {
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glFogfv(pname, params);
    return 0;
}

int GlFogi(lua_State *L) {
    GLenum pname = (GLenum)luaL_checkinteger(L, 1);
    GLint  param = (GLint )luaL_checkinteger(L, 2);

    glFogi(pname, param);
    return 0;
}

int GlFogiv(lua_State *L) {
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 1);
    const GLint * params = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glFogiv(pname, params);
    return 0;
}

int GlFrontFace(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glFrontFace(mode);
    return 0;
}

int GlFrustum(lua_State *L) {
    GLdouble left   = (GLdouble)luaL_checknumber(L, 1);
    GLdouble right  = (GLdouble)luaL_checknumber(L, 2);
    GLdouble bottom = (GLdouble)luaL_checknumber(L, 3);
    GLdouble top    = (GLdouble)luaL_checknumber(L, 4);
    GLdouble zNear  = (GLdouble)luaL_checknumber(L, 5);
    GLdouble zFar   = (GLdouble)luaL_checknumber(L, 6);

    glFrustum(left, right, bottom, top, zNear, zFar);
    return 0;
}

int GlGenLists(lua_State *L) {
    GLsizei range = (GLsizei)luaL_checkinteger(L, 1);

    glGenLists(range);
    return 0;
}

int GlGetBooleanv(lua_State *L) {
    GLenum      pname = (GLenum     )luaL_checkinteger(L, 1);
    GLboolean * data  = (GLboolean *)luaL_checkudata(L, 2, "GLboolean *");

    glGetBooleanv(pname, data);
    return 0;
}

int GlGetClipPlane(lua_State *L) {
    GLenum     plane    = (GLenum    )luaL_checkinteger(L, 1);
    GLdouble * equation = (GLdouble *)luaL_checkudata(L, 2, "GLdouble *");

    glGetClipPlane(plane, equation);
    return 0;
}

int GlGetDoublev(lua_State *L) {
    GLenum     pname = (GLenum    )luaL_checkinteger(L, 1);
    GLdouble * data  = (GLdouble *)luaL_checkudata(L, 2, "GLdouble *");

    glGetDoublev(pname, data);
    return 0;
}

int GlGetError(lua_State *L) {

    glGetError();
    return 0;
}

int GlGetFloatv(lua_State *L) {
    GLenum    pname = (GLenum   )luaL_checkinteger(L, 1);
    GLfloat * data  = (GLfloat *)luaL_checkudata(L, 2, "GLfloat *");

    glGetFloatv(pname, data);
    return 0;
}

int GlGetIntegerv(lua_State *L) {
    GLenum  pname = (GLenum )luaL_checkinteger(L, 1);
    GLint * data  = (GLint *)luaL_checkudata(L, 2, "GLint *");

    glGetIntegerv(pname, data);
    return 0;
}

int GlGetLightfv(lua_State *L) {
    GLenum    light  = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * params = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetLightfv(light, pname, params);
    return 0;
}

int GlGetLightiv(lua_State *L) {
    GLenum  light  = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetLightiv(light, pname, params);
    return 0;
}

int GlGetMapdv(lua_State *L) {
    GLenum     target = (GLenum    )luaL_checkinteger(L, 1);
    GLenum     query  = (GLenum    )luaL_checkinteger(L, 2);
    GLdouble * v      = (GLdouble *)luaL_checkudata(L, 3, "GLdouble *");

    glGetMapdv(target, query, v);
    return 0;
}

int GlGetMapfv(lua_State *L) {
    GLenum    target = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    query  = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * v      = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetMapfv(target, query, v);
    return 0;
}

int GlGetMapiv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  query  = (GLenum )luaL_checkinteger(L, 2);
    GLint * v      = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetMapiv(target, query, v);
    return 0;
}

int GlGetMaterialfv(lua_State *L) {
    GLenum    face   = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * params = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetMaterialfv(face, pname, params);
    return 0;
}

int GlGetMaterialiv(lua_State *L) {
    GLenum  face   = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetMaterialiv(face, pname, params);
    return 0;
}

int GlGetPixelMapfv(lua_State *L) {
    GLenum    map    = (GLenum   )luaL_checkinteger(L, 1);
    GLfloat * values = (GLfloat *)luaL_checkudata(L, 2, "GLfloat *");

    glGetPixelMapfv(map, values);
    return 0;
}

int GlGetPixelMapuiv(lua_State *L) {
    GLenum   map    = (GLenum  )luaL_checkinteger(L, 1);
    GLuint * values = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGetPixelMapuiv(map, values);
    return 0;
}

int GlGetPixelMapusv(lua_State *L) {
    GLenum     map    = (GLenum    )luaL_checkinteger(L, 1);
    GLushort * values = (GLushort *)luaL_checkudata(L, 2, "GLushort *");

    glGetPixelMapusv(map, values);
    return 0;
}

int GlGetPolygonStipple(lua_State *L) {
    GLubyte * mask = (GLubyte *)luaL_checkudata(L, 1, "GLubyte *");

    glGetPolygonStipple(mask);
    return 0;
}

int GlGetString(lua_State *L) {
    GLenum name = (GLenum)luaL_checkinteger(L, 1);

    glGetString(name);
    return 0;
}

int GlGetTexEnvfv(lua_State *L) {
    GLenum    target = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * params = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetTexEnvfv(target, pname, params);
    return 0;
}

int GlGetTexEnviv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetTexEnviv(target, pname, params);
    return 0;
}

int GlGetTexGendv(lua_State *L) {
    GLenum     coord  = (GLenum    )luaL_checkinteger(L, 1);
    GLenum     pname  = (GLenum    )luaL_checkinteger(L, 2);
    GLdouble * params = (GLdouble *)luaL_checkudata(L, 3, "GLdouble *");

    glGetTexGendv(coord, pname, params);
    return 0;
}

int GlGetTexGenfv(lua_State *L) {
    GLenum    coord  = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * params = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetTexGenfv(coord, pname, params);
    return 0;
}

int GlGetTexGeniv(lua_State *L) {
    GLenum  coord  = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetTexGeniv(coord, pname, params);
    return 0;
}

int GlGetTexImage(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLint  level  = (GLint )luaL_checkinteger(L, 2);
    GLenum format = (GLenum)luaL_checkinteger(L, 3);
    GLenum type   = (GLenum)luaL_checkinteger(L, 4);
    void * pixels = (void *)luaL_checkudata(L, 5, "void *");

    glGetTexImage(target, level, format, type, pixels);
    return 0;
}

int GlGetTexLevelParameterfv(lua_State *L) {
    GLenum    target = (GLenum   )luaL_checkinteger(L, 1);
    GLint     level  = (GLint    )luaL_checkinteger(L, 2);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 3);
    GLfloat * params = (GLfloat *)luaL_checkudata(L, 4, "GLfloat *");

    glGetTexLevelParameterfv(target, level, pname, params);
    return 0;
}

int GlGetTexLevelParameteriv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLint   level  = (GLint  )luaL_checkinteger(L, 2);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 3);
    GLint * params = (GLint *)luaL_checkudata(L, 4, "GLint *");

    glGetTexLevelParameteriv(target, level, pname, params);
    return 0;
}

int GlGetTexParameterfv(lua_State *L) {
    GLenum    target = (GLenum   )luaL_checkinteger(L, 1);
    GLenum    pname  = (GLenum   )luaL_checkinteger(L, 2);
    GLfloat * params = (GLfloat *)luaL_checkudata(L, 3, "GLfloat *");

    glGetTexParameterfv(target, pname, params);
    return 0;
}

int GlGetTexParameteriv(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLint * params = (GLint *)luaL_checkudata(L, 3, "GLint *");

    glGetTexParameteriv(target, pname, params);
    return 0;
}

int GlHint(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLenum mode   = (GLenum)luaL_checkinteger(L, 2);

    glHint(target, mode);
    return 0;
}

int GlIndexMask(lua_State *L) {
    GLuint mask = (GLuint)luaL_checkinteger(L, 1);

    glIndexMask(mask);
    return 0;
}

int GlIndexd(lua_State *L) {
    GLdouble c = (GLdouble)luaL_checknumber(L, 1);

    glIndexd(c);
    return 0;
}

int GlIndexdv(lua_State *L) {
    const GLdouble * c = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glIndexdv(c);
    return 0;
}

int GlIndexf(lua_State *L) {
    GLfloat c = (GLfloat)luaL_checknumber(L, 1);

    glIndexf(c);
    return 0;
}

int GlIndexfv(lua_State *L) {
    const GLfloat * c = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glIndexfv(c);
    return 0;
}

int GlIndexi(lua_State *L) {
    GLint c = (GLint)luaL_checkinteger(L, 1);

    glIndexi(c);
    return 0;
}

int GlIndexiv(lua_State *L) {
    const GLint * c = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glIndexiv(c);
    return 0;
}

int GlIndexs(lua_State *L) {
    GLshort c = (GLshort)luaL_checkinteger(L, 1);

    glIndexs(c);
    return 0;
}

int GlIndexsv(lua_State *L) {
    const GLshort * c = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glIndexsv(c);
    return 0;
}

int GlInitNames(lua_State *L) {

    glInitNames();
    return 0;
}

int GlIsEnabled(lua_State *L) {
    GLenum cap = (GLenum)luaL_checkinteger(L, 1);

    glIsEnabled(cap);
    return 0;
}

int GlIsList(lua_State *L) {
    GLuint list = (GLuint)luaL_checkinteger(L, 1);

    glIsList(list);
    return 0;
}

int GlLightModelf(lua_State *L) {
    GLenum  pname = (GLenum )luaL_checkinteger(L, 1);
    GLfloat param = (GLfloat)luaL_checknumber(L, 2);

    glLightModelf(pname, param);
    return 0;
}

int GlLightModelfv(lua_State *L) {
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 1);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glLightModelfv(pname, params);
    return 0;
}

int GlLightModeli(lua_State *L) {
    GLenum pname = (GLenum)luaL_checkinteger(L, 1);
    GLint  param = (GLint )luaL_checkinteger(L, 2);

    glLightModeli(pname, param);
    return 0;
}

int GlLightModeliv(lua_State *L) {
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 1);
    const GLint * params = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glLightModeliv(pname, params);
    return 0;
}

int GlLightf(lua_State *L) {
    GLenum  light = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname = (GLenum )luaL_checkinteger(L, 2);
    GLfloat param = (GLfloat)luaL_checknumber(L, 3);

    glLightf(light, pname, param);
    return 0;
}

int GlLightfv(lua_State *L) {
    GLenum          light  = (GLenum         )luaL_checkinteger(L, 1);
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 2);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glLightfv(light, pname, params);
    return 0;
}

int GlLighti(lua_State *L) {
    GLenum light = (GLenum)luaL_checkinteger(L, 1);
    GLenum pname = (GLenum)luaL_checkinteger(L, 2);
    GLint  param = (GLint )luaL_checkinteger(L, 3);

    glLighti(light, pname, param);
    return 0;
}

int GlLightiv(lua_State *L) {
    GLenum        light  = (GLenum       )luaL_checkinteger(L, 1);
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * params = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glLightiv(light, pname, params);
    return 0;
}

int GlLineStipple(lua_State *L) {
    GLint    factor  = (GLint   )luaL_checkinteger(L, 1);
    GLushort pattern = (GLushort)luaL_checkinteger(L, 2);

    glLineStipple(factor, pattern);
    return 0;
}

int GlLineWidth(lua_State *L) {
    GLfloat width = (GLfloat)luaL_checknumber(L, 1);

    glLineWidth(width);
    return 0;
}

int GlListBase(lua_State *L) {
    GLuint base = (GLuint)luaL_checkinteger(L, 1);

    glListBase(base);
    return 0;
}

int GlLoadIdentity(lua_State *L) {

    glLoadIdentity();
    return 0;
}

int GlLoadMatrixd(lua_State *L) {
    const GLdouble * m = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glLoadMatrixd(m);
    return 0;
}

int GlLoadMatrixf(lua_State *L) {
    const GLfloat * m = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glLoadMatrixf(m);
    return 0;
}

int GlLoadName(lua_State *L) {
    GLuint name = (GLuint)luaL_checkinteger(L, 1);

    glLoadName(name);
    return 0;
}

int GlLogicOp(lua_State *L) {
    GLenum opcode = (GLenum)luaL_checkinteger(L, 1);

    glLogicOp(opcode);
    return 0;
}

int GlMap1d(lua_State *L) {
    GLenum           target = (GLenum          )luaL_checkinteger(L, 1);
    GLdouble         u1     = (GLdouble        )luaL_checknumber(L, 2);
    GLdouble         u2     = (GLdouble        )luaL_checknumber(L, 3);
    GLint            stride = (GLint           )luaL_checkinteger(L, 4);
    GLint            order  = (GLint           )luaL_checkinteger(L, 5);
    const GLdouble * points = (const GLdouble *)luaL_checkudata(L, 6, "const GLdouble *");

    glMap1d(target, u1, u2, stride, order, points);
    return 0;
}

int GlMap1f(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    GLfloat         u1     = (GLfloat        )luaL_checknumber(L, 2);
    GLfloat         u2     = (GLfloat        )luaL_checknumber(L, 3);
    GLint           stride = (GLint          )luaL_checkinteger(L, 4);
    GLint           order  = (GLint          )luaL_checkinteger(L, 5);
    const GLfloat * points = (const GLfloat *)luaL_checkudata(L, 6, "const GLfloat *");

    glMap1f(target, u1, u2, stride, order, points);
    return 0;
}

int GlMap2d(lua_State *L) {
    GLenum           target  = (GLenum          )luaL_checkinteger(L, 1);
    GLdouble         u1      = (GLdouble        )luaL_checknumber(L, 2);
    GLdouble         u2      = (GLdouble        )luaL_checknumber(L, 3);
    GLint            ustride = (GLint           )luaL_checkinteger(L, 4);
    GLint            uorder  = (GLint           )luaL_checkinteger(L, 5);
    GLdouble         v1      = (GLdouble        )luaL_checknumber(L, 6);
    GLdouble         v2      = (GLdouble        )luaL_checknumber(L, 7);
    GLint            vstride = (GLint           )luaL_checkinteger(L, 8);
    GLint            vorder  = (GLint           )luaL_checkinteger(L, 9);
    const GLdouble * points  = (const GLdouble *)luaL_checkudata(L, 10, "const GLdouble *");

    glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    return 0;
}

int GlMap2f(lua_State *L) {
    GLenum          target  = (GLenum         )luaL_checkinteger(L, 1);
    GLfloat         u1      = (GLfloat        )luaL_checknumber(L, 2);
    GLfloat         u2      = (GLfloat        )luaL_checknumber(L, 3);
    GLint           ustride = (GLint          )luaL_checkinteger(L, 4);
    GLint           uorder  = (GLint          )luaL_checkinteger(L, 5);
    GLfloat         v1      = (GLfloat        )luaL_checknumber(L, 6);
    GLfloat         v2      = (GLfloat        )luaL_checknumber(L, 7);
    GLint           vstride = (GLint          )luaL_checkinteger(L, 8);
    GLint           vorder  = (GLint          )luaL_checkinteger(L, 9);
    const GLfloat * points  = (const GLfloat *)luaL_checkudata(L, 10, "const GLfloat *");

    glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
    return 0;
}

int GlMapGrid1d(lua_State *L) {
    GLint    un = (GLint   )luaL_checkinteger(L, 1);
    GLdouble u1 = (GLdouble)luaL_checknumber(L, 2);
    GLdouble u2 = (GLdouble)luaL_checknumber(L, 3);

    glMapGrid1d(un, u1, u2);
    return 0;
}

int GlMapGrid1f(lua_State *L) {
    GLint   un = (GLint  )luaL_checkinteger(L, 1);
    GLfloat u1 = (GLfloat)luaL_checknumber(L, 2);
    GLfloat u2 = (GLfloat)luaL_checknumber(L, 3);

    glMapGrid1f(un, u1, u2);
    return 0;
}

int GlMapGrid2d(lua_State *L) {
    GLint    un = (GLint   )luaL_checkinteger(L, 1);
    GLdouble u1 = (GLdouble)luaL_checknumber(L, 2);
    GLdouble u2 = (GLdouble)luaL_checknumber(L, 3);
    GLint    vn = (GLint   )luaL_checkinteger(L, 4);
    GLdouble v1 = (GLdouble)luaL_checknumber(L, 5);
    GLdouble v2 = (GLdouble)luaL_checknumber(L, 6);

    glMapGrid2d(un, u1, u2, vn, v1, v2);
    return 0;
}

int GlMapGrid2f(lua_State *L) {
    GLint   un = (GLint  )luaL_checkinteger(L, 1);
    GLfloat u1 = (GLfloat)luaL_checknumber(L, 2);
    GLfloat u2 = (GLfloat)luaL_checknumber(L, 3);
    GLint   vn = (GLint  )luaL_checkinteger(L, 4);
    GLfloat v1 = (GLfloat)luaL_checknumber(L, 5);
    GLfloat v2 = (GLfloat)luaL_checknumber(L, 6);

    glMapGrid2f(un, u1, u2, vn, v1, v2);
    return 0;
}

int GlMaterialf(lua_State *L) {
    GLenum  face  = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname = (GLenum )luaL_checkinteger(L, 2);
    GLfloat param = (GLfloat)luaL_checknumber(L, 3);

    glMaterialf(face, pname, param);
    return 0;
}

int GlMaterialfv(lua_State *L) {
    GLenum          face   = (GLenum         )luaL_checkinteger(L, 1);
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 2);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glMaterialfv(face, pname, params);
    return 0;
}

int GlMateriali(lua_State *L) {
    GLenum face  = (GLenum)luaL_checkinteger(L, 1);
    GLenum pname = (GLenum)luaL_checkinteger(L, 2);
    GLint  param = (GLint )luaL_checkinteger(L, 3);

    glMateriali(face, pname, param);
    return 0;
}

int GlMaterialiv(lua_State *L) {
    GLenum        face   = (GLenum       )luaL_checkinteger(L, 1);
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * params = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glMaterialiv(face, pname, params);
    return 0;
}

int GlMatrixMode(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glMatrixMode(mode);
    return 0;
}

int GlMultMatrixd(lua_State *L) {
    const GLdouble * m = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glMultMatrixd(m);
    return 0;
}

int GlMultMatrixf(lua_State *L) {
    const GLfloat * m = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glMultMatrixf(m);
    return 0;
}

int GlNewList(lua_State *L) {
    GLuint list = (GLuint)luaL_checkinteger(L, 1);
    GLenum mode = (GLenum)luaL_checkinteger(L, 2);

    glNewList(list, mode);
    return 0;
}

int GlNormal3b(lua_State *L) {
    GLbyte nx = (GLbyte)luaL_checkinteger(L, 1);
    GLbyte ny = (GLbyte)luaL_checkinteger(L, 2);
    GLbyte nz = (GLbyte)luaL_checkinteger(L, 3);

    glNormal3b(nx, ny, nz);
    return 0;
}

int GlNormal3bv(lua_State *L) {
    const GLbyte * v = (const GLbyte *)luaL_checkudata(L, 1, "const GLbyte *");

    glNormal3bv(v);
    return 0;
}

int GlNormal3d(lua_State *L) {
    GLdouble nx = (GLdouble)luaL_checknumber(L, 1);
    GLdouble ny = (GLdouble)luaL_checknumber(L, 2);
    GLdouble nz = (GLdouble)luaL_checknumber(L, 3);

    glNormal3d(nx, ny, nz);
    return 0;
}

int GlNormal3dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glNormal3dv(v);
    return 0;
}

int GlNormal3f(lua_State *L) {
    GLfloat nx = (GLfloat)luaL_checknumber(L, 1);
    GLfloat ny = (GLfloat)luaL_checknumber(L, 2);
    GLfloat nz = (GLfloat)luaL_checknumber(L, 3);

    glNormal3f(nx, ny, nz);
    return 0;
}

int GlNormal3fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glNormal3fv(v);
    return 0;
}

int GlNormal3i(lua_State *L) {
    GLint nx = (GLint)luaL_checkinteger(L, 1);
    GLint ny = (GLint)luaL_checkinteger(L, 2);
    GLint nz = (GLint)luaL_checkinteger(L, 3);

    glNormal3i(nx, ny, nz);
    return 0;
}

int GlNormal3iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glNormal3iv(v);
    return 0;
}

int GlNormal3s(lua_State *L) {
    GLshort nx = (GLshort)luaL_checkinteger(L, 1);
    GLshort ny = (GLshort)luaL_checkinteger(L, 2);
    GLshort nz = (GLshort)luaL_checkinteger(L, 3);

    glNormal3s(nx, ny, nz);
    return 0;
}

int GlNormal3sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glNormal3sv(v);
    return 0;
}

int GlOrtho(lua_State *L) {
    GLdouble left   = (GLdouble)luaL_checknumber(L, 1);
    GLdouble right  = (GLdouble)luaL_checknumber(L, 2);
    GLdouble bottom = (GLdouble)luaL_checknumber(L, 3);
    GLdouble top    = (GLdouble)luaL_checknumber(L, 4);
    GLdouble zNear  = (GLdouble)luaL_checknumber(L, 5);
    GLdouble zFar   = (GLdouble)luaL_checknumber(L, 6);

    glOrtho(left, right, bottom, top, zNear, zFar);
    return 0;
}

int GlPassThrough(lua_State *L) {
    GLfloat token = (GLfloat)luaL_checknumber(L, 1);

    glPassThrough(token);
    return 0;
}

int GlPixelMapfv(lua_State *L) {
    GLenum          map     = (GLenum         )luaL_checkinteger(L, 1);
    GLsizei         mapsize = (GLsizei        )luaL_checkinteger(L, 2);
    const GLfloat * values  = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glPixelMapfv(map, mapsize, values);
    return 0;
}

int GlPixelMapuiv(lua_State *L) {
    GLenum         map     = (GLenum        )luaL_checkinteger(L, 1);
    GLsizei        mapsize = (GLsizei       )luaL_checkinteger(L, 2);
    const GLuint * values  = (const GLuint *)luaL_checkudata(L, 3, "const GLuint *");

    glPixelMapuiv(map, mapsize, values);
    return 0;
}

int GlPixelMapusv(lua_State *L) {
    GLenum           map     = (GLenum          )luaL_checkinteger(L, 1);
    GLsizei          mapsize = (GLsizei         )luaL_checkinteger(L, 2);
    const GLushort * values  = (const GLushort *)luaL_checkudata(L, 3, "const GLushort *");

    glPixelMapusv(map, mapsize, values);
    return 0;
}

int GlPixelStoref(lua_State *L) {
    GLenum  pname = (GLenum )luaL_checkinteger(L, 1);
    GLfloat param = (GLfloat)luaL_checknumber(L, 2);

    glPixelStoref(pname, param);
    return 0;
}

int GlPixelStorei(lua_State *L) {
    GLenum pname = (GLenum)luaL_checkinteger(L, 1);
    GLint  param = (GLint )luaL_checkinteger(L, 2);

    glPixelStorei(pname, param);
    return 0;
}

int GlPixelTransferf(lua_State *L) {
    GLenum  pname = (GLenum )luaL_checkinteger(L, 1);
    GLfloat param = (GLfloat)luaL_checknumber(L, 2);

    glPixelTransferf(pname, param);
    return 0;
}

int GlPixelTransferi(lua_State *L) {
    GLenum pname = (GLenum)luaL_checkinteger(L, 1);
    GLint  param = (GLint )luaL_checkinteger(L, 2);

    glPixelTransferi(pname, param);
    return 0;
}

int GlPixelZoom(lua_State *L) {
    GLfloat xfactor = (GLfloat)luaL_checknumber(L, 1);
    GLfloat yfactor = (GLfloat)luaL_checknumber(L, 2);

    glPixelZoom(xfactor, yfactor);
    return 0;
}

int GlPointSize(lua_State *L) {
    GLfloat size = (GLfloat)luaL_checknumber(L, 1);

    glPointSize(size);
    return 0;
}

int GlPolygonMode(lua_State *L) {
    GLenum face = (GLenum)luaL_checkinteger(L, 1);
    GLenum mode = (GLenum)luaL_checkinteger(L, 2);

    glPolygonMode(face, mode);
    return 0;
}

int GlPolygonStipple(lua_State *L) {
    const GLubyte * mask = (const GLubyte *)luaL_checkudata(L, 1, "const GLubyte *");

    glPolygonStipple(mask);
    return 0;
}

int GlPopAttrib(lua_State *L) {

    glPopAttrib();
    return 0;
}

int GlPopMatrix(lua_State *L) {

    glPopMatrix();
    return 0;
}

int GlPopName(lua_State *L) {

    glPopName();
    return 0;
}

int GlPushAttrib(lua_State *L) {
    GLbitfield mask = (GLbitfield)luaL_checkinteger(L, 1);

    glPushAttrib(mask);
    return 0;
}

int GlPushMatrix(lua_State *L) {

    glPushMatrix();
    return 0;
}

int GlPushName(lua_State *L) {
    GLuint name = (GLuint)luaL_checkinteger(L, 1);

    glPushName(name);
    return 0;
}

int GlRasterPos2d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);

    glRasterPos2d(x, y);
    return 0;
}

int GlRasterPos2dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glRasterPos2dv(v);
    return 0;
}

int GlRasterPos2f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);

    glRasterPos2f(x, y);
    return 0;
}

int GlRasterPos2fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glRasterPos2fv(v);
    return 0;
}

int GlRasterPos2i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);

    glRasterPos2i(x, y);
    return 0;
}

int GlRasterPos2iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glRasterPos2iv(v);
    return 0;
}

int GlRasterPos2s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);

    glRasterPos2s(x, y);
    return 0;
}

int GlRasterPos2sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glRasterPos2sv(v);
    return 0;
}

int GlRasterPos3d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);
    GLdouble z = (GLdouble)luaL_checknumber(L, 3);

    glRasterPos3d(x, y, z);
    return 0;
}

int GlRasterPos3dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glRasterPos3dv(v);
    return 0;
}

int GlRasterPos3f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);
    GLfloat z = (GLfloat)luaL_checknumber(L, 3);

    glRasterPos3f(x, y, z);
    return 0;
}

int GlRasterPos3fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glRasterPos3fv(v);
    return 0;
}

int GlRasterPos3i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);
    GLint z = (GLint)luaL_checkinteger(L, 3);

    glRasterPos3i(x, y, z);
    return 0;
}

int GlRasterPos3iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glRasterPos3iv(v);
    return 0;
}

int GlRasterPos3s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);
    GLshort z = (GLshort)luaL_checkinteger(L, 3);

    glRasterPos3s(x, y, z);
    return 0;
}

int GlRasterPos3sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glRasterPos3sv(v);
    return 0;
}

int GlRasterPos4d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);
    GLdouble z = (GLdouble)luaL_checknumber(L, 3);
    GLdouble w = (GLdouble)luaL_checknumber(L, 4);

    glRasterPos4d(x, y, z, w);
    return 0;
}

int GlRasterPos4dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glRasterPos4dv(v);
    return 0;
}

int GlRasterPos4f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);
    GLfloat z = (GLfloat)luaL_checknumber(L, 3);
    GLfloat w = (GLfloat)luaL_checknumber(L, 4);

    glRasterPos4f(x, y, z, w);
    return 0;
}

int GlRasterPos4fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glRasterPos4fv(v);
    return 0;
}

int GlRasterPos4i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);
    GLint z = (GLint)luaL_checkinteger(L, 3);
    GLint w = (GLint)luaL_checkinteger(L, 4);

    glRasterPos4i(x, y, z, w);
    return 0;
}

int GlRasterPos4iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glRasterPos4iv(v);
    return 0;
}

int GlRasterPos4s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);
    GLshort z = (GLshort)luaL_checkinteger(L, 3);
    GLshort w = (GLshort)luaL_checkinteger(L, 4);

    glRasterPos4s(x, y, z, w);
    return 0;
}

int GlRasterPos4sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glRasterPos4sv(v);
    return 0;
}

int GlReadBuffer(lua_State *L) {
    GLenum src = (GLenum)luaL_checkinteger(L, 1);

    glReadBuffer(src);
    return 0;
}

int GlReadPixels(lua_State *L) {
    GLint   x      = (GLint  )luaL_checkinteger(L, 1);
    GLint   y      = (GLint  )luaL_checkinteger(L, 2);
    GLsizei width  = (GLsizei)luaL_checkinteger(L, 3);
    GLsizei height = (GLsizei)luaL_checkinteger(L, 4);
    GLenum  format = (GLenum )luaL_checkinteger(L, 5);
    GLenum  type   = (GLenum )luaL_checkinteger(L, 6);
    void *  pixels = (void * )luaL_checkudata(L, 7, "void *");

    glReadPixels(x, y, width, height, format, type, pixels);
    return 0;
}

int GlRectd(lua_State *L) {
    GLdouble x1 = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y1 = (GLdouble)luaL_checknumber(L, 2);
    GLdouble x2 = (GLdouble)luaL_checknumber(L, 3);
    GLdouble y2 = (GLdouble)luaL_checknumber(L, 4);

    glRectd(x1, y1, x2, y2);
    return 0;
}

int GlRectdv(lua_State *L) {
    const GLdouble * v1 = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");
    const GLdouble * v2 = (const GLdouble *)luaL_checkudata(L, 2, "const GLdouble *");

    glRectdv(v1, v2);
    return 0;
}

int GlRectf(lua_State *L) {
    GLfloat x1 = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y1 = (GLfloat)luaL_checknumber(L, 2);
    GLfloat x2 = (GLfloat)luaL_checknumber(L, 3);
    GLfloat y2 = (GLfloat)luaL_checknumber(L, 4);

    glRectf(x1, y1, x2, y2);
    return 0;
}

int GlRectfv(lua_State *L) {
    const GLfloat * v1 = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");
    const GLfloat * v2 = (const GLfloat *)luaL_checkudata(L, 2, "const GLfloat *");

    glRectfv(v1, v2);
    return 0;
}

int GlRecti(lua_State *L) {
    GLint x1 = (GLint)luaL_checkinteger(L, 1);
    GLint y1 = (GLint)luaL_checkinteger(L, 2);
    GLint x2 = (GLint)luaL_checkinteger(L, 3);
    GLint y2 = (GLint)luaL_checkinteger(L, 4);

    glRecti(x1, y1, x2, y2);
    return 0;
}

int GlRectiv(lua_State *L) {
    const GLint * v1 = (const GLint *)luaL_checkudata(L, 1, "const GLint *");
    const GLint * v2 = (const GLint *)luaL_checkudata(L, 2, "const GLint *");

    glRectiv(v1, v2);
    return 0;
}

int GlRects(lua_State *L) {
    GLshort x1 = (GLshort)luaL_checkinteger(L, 1);
    GLshort y1 = (GLshort)luaL_checkinteger(L, 2);
    GLshort x2 = (GLshort)luaL_checkinteger(L, 3);
    GLshort y2 = (GLshort)luaL_checkinteger(L, 4);

    glRects(x1, y1, x2, y2);
    return 0;
}

int GlRectsv(lua_State *L) {
    const GLshort * v1 = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");
    const GLshort * v2 = (const GLshort *)luaL_checkudata(L, 2, "const GLshort *");

    glRectsv(v1, v2);
    return 0;
}

int GlRenderMode(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glRenderMode(mode);
    return 0;
}

int GlRotated(lua_State *L) {
    GLdouble angle = (GLdouble)luaL_checknumber(L, 1);
    GLdouble x     = (GLdouble)luaL_checknumber(L, 2);
    GLdouble y     = (GLdouble)luaL_checknumber(L, 3);
    GLdouble z     = (GLdouble)luaL_checknumber(L, 4);

    glRotated(angle, x, y, z);
    return 0;
}

int GlRotatef(lua_State *L) {
    GLfloat angle = (GLfloat)luaL_checknumber(L, 1);
    GLfloat x     = (GLfloat)luaL_checknumber(L, 2);
    GLfloat y     = (GLfloat)luaL_checknumber(L, 3);
    GLfloat z     = (GLfloat)luaL_checknumber(L, 4);

    glRotatef(angle, x, y, z);
    return 0;
}

int GlScaled(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);
    GLdouble z = (GLdouble)luaL_checknumber(L, 3);

    glScaled(x, y, z);
    return 0;
}

int GlScalef(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);
    GLfloat z = (GLfloat)luaL_checknumber(L, 3);

    glScalef(x, y, z);
    return 0;
}

int GlScissor(lua_State *L) {
    GLint   x      = (GLint  )luaL_checkinteger(L, 1);
    GLint   y      = (GLint  )luaL_checkinteger(L, 2);
    GLsizei width  = (GLsizei)luaL_checkinteger(L, 3);
    GLsizei height = (GLsizei)luaL_checkinteger(L, 4);

    glScissor(x, y, width, height);
    return 0;
}

int GlSelectBuffer(lua_State *L) {
    GLsizei  size   = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * buffer = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glSelectBuffer(size, buffer);
    return 0;
}

int GlShadeModel(lua_State *L) {
    GLenum mode = (GLenum)luaL_checkinteger(L, 1);

    glShadeModel(mode);
    return 0;
}

int GlStencilFunc(lua_State *L) {
    GLenum func = (GLenum)luaL_checkinteger(L, 1);
    GLint  ref  = (GLint )luaL_checkinteger(L, 2);
    GLuint mask = (GLuint)luaL_checkinteger(L, 3);

    glStencilFunc(func, ref, mask);
    return 0;
}

int GlStencilMask(lua_State *L) {
    GLuint mask = (GLuint)luaL_checkinteger(L, 1);

    glStencilMask(mask);
    return 0;
}

int GlStencilOp(lua_State *L) {
    GLenum fail  = (GLenum)luaL_checkinteger(L, 1);
    GLenum zfail = (GLenum)luaL_checkinteger(L, 2);
    GLenum zpass = (GLenum)luaL_checkinteger(L, 3);

    glStencilOp(fail, zfail, zpass);
    return 0;
}

int GlTexCoord1d(lua_State *L) {
    GLdouble s = (GLdouble)luaL_checknumber(L, 1);

    glTexCoord1d(s);
    return 0;
}

int GlTexCoord1dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glTexCoord1dv(v);
    return 0;
}

int GlTexCoord1f(lua_State *L) {
    GLfloat s = (GLfloat)luaL_checknumber(L, 1);

    glTexCoord1f(s);
    return 0;
}

int GlTexCoord1fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glTexCoord1fv(v);
    return 0;
}

int GlTexCoord1i(lua_State *L) {
    GLint s = (GLint)luaL_checkinteger(L, 1);

    glTexCoord1i(s);
    return 0;
}

int GlTexCoord1iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glTexCoord1iv(v);
    return 0;
}

int GlTexCoord1s(lua_State *L) {
    GLshort s = (GLshort)luaL_checkinteger(L, 1);

    glTexCoord1s(s);
    return 0;
}

int GlTexCoord1sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glTexCoord1sv(v);
    return 0;
}

int GlTexCoord2d(lua_State *L) {
    GLdouble s = (GLdouble)luaL_checknumber(L, 1);
    GLdouble t = (GLdouble)luaL_checknumber(L, 2);

    glTexCoord2d(s, t);
    return 0;
}

int GlTexCoord2dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glTexCoord2dv(v);
    return 0;
}

int GlTexCoord2f(lua_State *L) {
    GLfloat s = (GLfloat)luaL_checknumber(L, 1);
    GLfloat t = (GLfloat)luaL_checknumber(L, 2);

    glTexCoord2f(s, t);
    return 0;
}

int GlTexCoord2fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glTexCoord2fv(v);
    return 0;
}

int GlTexCoord2i(lua_State *L) {
    GLint s = (GLint)luaL_checkinteger(L, 1);
    GLint t = (GLint)luaL_checkinteger(L, 2);

    glTexCoord2i(s, t);
    return 0;
}

int GlTexCoord2iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glTexCoord2iv(v);
    return 0;
}

int GlTexCoord2s(lua_State *L) {
    GLshort s = (GLshort)luaL_checkinteger(L, 1);
    GLshort t = (GLshort)luaL_checkinteger(L, 2);

    glTexCoord2s(s, t);
    return 0;
}

int GlTexCoord2sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glTexCoord2sv(v);
    return 0;
}

int GlTexCoord3d(lua_State *L) {
    GLdouble s = (GLdouble)luaL_checknumber(L, 1);
    GLdouble t = (GLdouble)luaL_checknumber(L, 2);
    GLdouble r = (GLdouble)luaL_checknumber(L, 3);

    glTexCoord3d(s, t, r);
    return 0;
}

int GlTexCoord3dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glTexCoord3dv(v);
    return 0;
}

int GlTexCoord3f(lua_State *L) {
    GLfloat s = (GLfloat)luaL_checknumber(L, 1);
    GLfloat t = (GLfloat)luaL_checknumber(L, 2);
    GLfloat r = (GLfloat)luaL_checknumber(L, 3);

    glTexCoord3f(s, t, r);
    return 0;
}

int GlTexCoord3fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glTexCoord3fv(v);
    return 0;
}

int GlTexCoord3i(lua_State *L) {
    GLint s = (GLint)luaL_checkinteger(L, 1);
    GLint t = (GLint)luaL_checkinteger(L, 2);
    GLint r = (GLint)luaL_checkinteger(L, 3);

    glTexCoord3i(s, t, r);
    return 0;
}

int GlTexCoord3iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glTexCoord3iv(v);
    return 0;
}

int GlTexCoord3s(lua_State *L) {
    GLshort s = (GLshort)luaL_checkinteger(L, 1);
    GLshort t = (GLshort)luaL_checkinteger(L, 2);
    GLshort r = (GLshort)luaL_checkinteger(L, 3);

    glTexCoord3s(s, t, r);
    return 0;
}

int GlTexCoord3sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glTexCoord3sv(v);
    return 0;
}

int GlTexCoord4d(lua_State *L) {
    GLdouble s = (GLdouble)luaL_checknumber(L, 1);
    GLdouble t = (GLdouble)luaL_checknumber(L, 2);
    GLdouble r = (GLdouble)luaL_checknumber(L, 3);
    GLdouble q = (GLdouble)luaL_checknumber(L, 4);

    glTexCoord4d(s, t, r, q);
    return 0;
}

int GlTexCoord4dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glTexCoord4dv(v);
    return 0;
}

int GlTexCoord4f(lua_State *L) {
    GLfloat s = (GLfloat)luaL_checknumber(L, 1);
    GLfloat t = (GLfloat)luaL_checknumber(L, 2);
    GLfloat r = (GLfloat)luaL_checknumber(L, 3);
    GLfloat q = (GLfloat)luaL_checknumber(L, 4);

    glTexCoord4f(s, t, r, q);
    return 0;
}

int GlTexCoord4fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glTexCoord4fv(v);
    return 0;
}

int GlTexCoord4i(lua_State *L) {
    GLint s = (GLint)luaL_checkinteger(L, 1);
    GLint t = (GLint)luaL_checkinteger(L, 2);
    GLint r = (GLint)luaL_checkinteger(L, 3);
    GLint q = (GLint)luaL_checkinteger(L, 4);

    glTexCoord4i(s, t, r, q);
    return 0;
}

int GlTexCoord4iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glTexCoord4iv(v);
    return 0;
}

int GlTexCoord4s(lua_State *L) {
    GLshort s = (GLshort)luaL_checkinteger(L, 1);
    GLshort t = (GLshort)luaL_checkinteger(L, 2);
    GLshort r = (GLshort)luaL_checkinteger(L, 3);
    GLshort q = (GLshort)luaL_checkinteger(L, 4);

    glTexCoord4s(s, t, r, q);
    return 0;
}

int GlTexCoord4sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glTexCoord4sv(v);
    return 0;
}

int GlTexEnvf(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLfloat param  = (GLfloat)luaL_checknumber(L, 3);

    glTexEnvf(target, pname, param);
    return 0;
}

int GlTexEnvfv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 2);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glTexEnvfv(target, pname, params);
    return 0;
}

int GlTexEnvi(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLenum pname  = (GLenum)luaL_checkinteger(L, 2);
    GLint  param  = (GLint )luaL_checkinteger(L, 3);

    glTexEnvi(target, pname, param);
    return 0;
}

int GlTexEnviv(lua_State *L) {
    GLenum        target = (GLenum       )luaL_checkinteger(L, 1);
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * params = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glTexEnviv(target, pname, params);
    return 0;
}

int GlTexGend(lua_State *L) {
    GLenum   coord = (GLenum  )luaL_checkinteger(L, 1);
    GLenum   pname = (GLenum  )luaL_checkinteger(L, 2);
    GLdouble param = (GLdouble)luaL_checknumber(L, 3);

    glTexGend(coord, pname, param);
    return 0;
}

int GlTexGendv(lua_State *L) {
    GLenum           coord  = (GLenum          )luaL_checkinteger(L, 1);
    GLenum           pname  = (GLenum          )luaL_checkinteger(L, 2);
    const GLdouble * params = (const GLdouble *)luaL_checkudata(L, 3, "const GLdouble *");

    glTexGendv(coord, pname, params);
    return 0;
}

int GlTexGenf(lua_State *L) {
    GLenum  coord = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname = (GLenum )luaL_checkinteger(L, 2);
    GLfloat param = (GLfloat)luaL_checknumber(L, 3);

    glTexGenf(coord, pname, param);
    return 0;
}

int GlTexGenfv(lua_State *L) {
    GLenum          coord  = (GLenum         )luaL_checkinteger(L, 1);
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 2);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glTexGenfv(coord, pname, params);
    return 0;
}

int GlTexGeni(lua_State *L) {
    GLenum coord = (GLenum)luaL_checkinteger(L, 1);
    GLenum pname = (GLenum)luaL_checkinteger(L, 2);
    GLint  param = (GLint )luaL_checkinteger(L, 3);

    glTexGeni(coord, pname, param);
    return 0;
}

int GlTexGeniv(lua_State *L) {
    GLenum        coord  = (GLenum       )luaL_checkinteger(L, 1);
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * params = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glTexGeniv(coord, pname, params);
    return 0;
}

int GlTexImage1D(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level          = (GLint       )luaL_checkinteger(L, 2);
    GLint        internalformat = (GLint       )luaL_checkinteger(L, 3);
    GLsizei      width          = (GLsizei     )luaL_checkinteger(L, 4);
    GLint        border         = (GLint       )luaL_checkinteger(L, 5);
    GLenum       format         = (GLenum      )luaL_checkinteger(L, 6);
    GLenum       type           = (GLenum      )luaL_checkinteger(L, 7);
    const void * pixels         = (const void *)luaL_checkudata(L, 8, "const void *");

    glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
    return 0;
}

int GlTexImage2D(lua_State *L) {
    GLenum       target         = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level          = (GLint       )luaL_checkinteger(L, 2);
    GLint        internalformat = (GLint       )luaL_checkinteger(L, 3);
    GLsizei      width          = (GLsizei     )luaL_checkinteger(L, 4);
    GLsizei      height         = (GLsizei     )luaL_checkinteger(L, 5);
    GLint        border         = (GLint       )luaL_checkinteger(L, 6);
    GLenum       format         = (GLenum      )luaL_checkinteger(L, 7);
    GLenum       type           = (GLenum      )luaL_checkinteger(L, 8);
    const void * pixels         = (const void *)luaL_checkudata(L, 9, "const void *");

    glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    return 0;
}

int GlTexParameterf(lua_State *L) {
    GLenum  target = (GLenum )luaL_checkinteger(L, 1);
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 2);
    GLfloat param  = (GLfloat)luaL_checknumber(L, 3);

    glTexParameterf(target, pname, param);
    return 0;
}

int GlTexParameterfv(lua_State *L) {
    GLenum          target = (GLenum         )luaL_checkinteger(L, 1);
    GLenum          pname  = (GLenum         )luaL_checkinteger(L, 2);
    const GLfloat * params = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glTexParameterfv(target, pname, params);
    return 0;
}

int GlTexParameteri(lua_State *L) {
    GLenum target = (GLenum)luaL_checkinteger(L, 1);
    GLenum pname  = (GLenum)luaL_checkinteger(L, 2);
    GLint  param  = (GLint )luaL_checkinteger(L, 3);

    glTexParameteri(target, pname, param);
    return 0;
}

int GlTexParameteriv(lua_State *L) {
    GLenum        target = (GLenum       )luaL_checkinteger(L, 1);
    GLenum        pname  = (GLenum       )luaL_checkinteger(L, 2);
    const GLint * params = (const GLint *)luaL_checkudata(L, 3, "const GLint *");

    glTexParameteriv(target, pname, params);
    return 0;
}

int GlTranslated(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);
    GLdouble z = (GLdouble)luaL_checknumber(L, 3);

    glTranslated(x, y, z);
    return 0;
}

int GlTranslatef(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);
    GLfloat z = (GLfloat)luaL_checknumber(L, 3);

    glTranslatef(x, y, z);
    return 0;
}

int GlVertex2d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);

    glVertex2d(x, y);
    return 0;
}

int GlVertex2dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glVertex2dv(v);
    return 0;
}

int GlVertex2f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);

    glVertex2f(x, y);
    return 0;
}

int GlVertex2fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glVertex2fv(v);
    return 0;
}

int GlVertex2i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);

    glVertex2i(x, y);
    return 0;
}

int GlVertex2iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glVertex2iv(v);
    return 0;
}

int GlVertex2s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);

    glVertex2s(x, y);
    return 0;
}

int GlVertex2sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glVertex2sv(v);
    return 0;
}

int GlVertex3d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);
    GLdouble z = (GLdouble)luaL_checknumber(L, 3);

    glVertex3d(x, y, z);
    return 0;
}

int GlVertex3dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glVertex3dv(v);
    return 0;
}

int GlVertex3f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);
    GLfloat z = (GLfloat)luaL_checknumber(L, 3);

    glVertex3f(x, y, z);
    return 0;
}

int GlVertex3fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glVertex3fv(v);
    return 0;
}

int GlVertex3i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);
    GLint z = (GLint)luaL_checkinteger(L, 3);

    glVertex3i(x, y, z);
    return 0;
}

int GlVertex3iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glVertex3iv(v);
    return 0;
}

int GlVertex3s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);
    GLshort z = (GLshort)luaL_checkinteger(L, 3);

    glVertex3s(x, y, z);
    return 0;
}

int GlVertex3sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glVertex3sv(v);
    return 0;
}

int GlVertex4d(lua_State *L) {
    GLdouble x = (GLdouble)luaL_checknumber(L, 1);
    GLdouble y = (GLdouble)luaL_checknumber(L, 2);
    GLdouble z = (GLdouble)luaL_checknumber(L, 3);
    GLdouble w = (GLdouble)luaL_checknumber(L, 4);

    glVertex4d(x, y, z, w);
    return 0;
}

int GlVertex4dv(lua_State *L) {
    const GLdouble * v = (const GLdouble *)luaL_checkudata(L, 1, "const GLdouble *");

    glVertex4dv(v);
    return 0;
}

int GlVertex4f(lua_State *L) {
    GLfloat x = (GLfloat)luaL_checknumber(L, 1);
    GLfloat y = (GLfloat)luaL_checknumber(L, 2);
    GLfloat z = (GLfloat)luaL_checknumber(L, 3);
    GLfloat w = (GLfloat)luaL_checknumber(L, 4);

    glVertex4f(x, y, z, w);
    return 0;
}

int GlVertex4fv(lua_State *L) {
    const GLfloat * v = (const GLfloat *)luaL_checkudata(L, 1, "const GLfloat *");

    glVertex4fv(v);
    return 0;
}

int GlVertex4i(lua_State *L) {
    GLint x = (GLint)luaL_checkinteger(L, 1);
    GLint y = (GLint)luaL_checkinteger(L, 2);
    GLint z = (GLint)luaL_checkinteger(L, 3);
    GLint w = (GLint)luaL_checkinteger(L, 4);

    glVertex4i(x, y, z, w);
    return 0;
}

int GlVertex4iv(lua_State *L) {
    const GLint * v = (const GLint *)luaL_checkudata(L, 1, "const GLint *");

    glVertex4iv(v);
    return 0;
}

int GlVertex4s(lua_State *L) {
    GLshort x = (GLshort)luaL_checkinteger(L, 1);
    GLshort y = (GLshort)luaL_checkinteger(L, 2);
    GLshort z = (GLshort)luaL_checkinteger(L, 3);
    GLshort w = (GLshort)luaL_checkinteger(L, 4);

    glVertex4s(x, y, z, w);
    return 0;
}

int GlVertex4sv(lua_State *L) {
    const GLshort * v = (const GLshort *)luaL_checkudata(L, 1, "const GLshort *");

    glVertex4sv(v);
    return 0;
}

int GlViewport(lua_State *L) {
    GLint   x      = (GLint  )luaL_checkinteger(L, 1);
    GLint   y      = (GLint  )luaL_checkinteger(L, 2);
    GLsizei width  = (GLsizei)luaL_checkinteger(L, 3);
    GLsizei height = (GLsizei)luaL_checkinteger(L, 4);

    glViewport(x, y, width, height);
    return 0;
}

int GlAreTexturesResident(lua_State *L) {
    GLsizei        n          = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * textures   = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");
    GLboolean *    residences = (GLboolean *   )luaL_checkudata(L, 3, "GLboolean *");

    glAreTexturesResident(n, textures, residences);
    return 0;
}

int GlArrayElement(lua_State *L) {
    GLint i = (GLint)luaL_checkinteger(L, 1);

    glArrayElement(i);
    return 0;
}

int GlBindTexture(lua_State *L) {
    GLenum target  = (GLenum)luaL_checkinteger(L, 1);
    GLuint texture = (GLuint)luaL_checkinteger(L, 2);

    glBindTexture(target, texture);
    return 0;
}

int GlColorPointer(lua_State *L) {
    GLint        size    = (GLint       )luaL_checkinteger(L, 1);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 2);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 3);
    const void * pointer = (const void *)luaL_checkudata(L, 4, "const void *");

    glColorPointer(size, type, stride, pointer);
    return 0;
}

int GlCopyTexImage1D(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLint   level          = (GLint  )luaL_checkinteger(L, 2);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 3);
    GLint   x              = (GLint  )luaL_checkinteger(L, 4);
    GLint   y              = (GLint  )luaL_checkinteger(L, 5);
    GLsizei width          = (GLsizei)luaL_checkinteger(L, 6);
    GLint   border         = (GLint  )luaL_checkinteger(L, 7);

    glCopyTexImage1D(target, level, internalformat, x, y, width, border);
    return 0;
}

int GlCopyTexImage2D(lua_State *L) {
    GLenum  target         = (GLenum )luaL_checkinteger(L, 1);
    GLint   level          = (GLint  )luaL_checkinteger(L, 2);
    GLenum  internalformat = (GLenum )luaL_checkinteger(L, 3);
    GLint   x              = (GLint  )luaL_checkinteger(L, 4);
    GLint   y              = (GLint  )luaL_checkinteger(L, 5);
    GLsizei width          = (GLsizei)luaL_checkinteger(L, 6);
    GLsizei height         = (GLsizei)luaL_checkinteger(L, 7);
    GLint   border         = (GLint  )luaL_checkinteger(L, 8);

    glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
    return 0;
}

int GlCopyTexSubImage1D(lua_State *L) {
    GLenum  target  = (GLenum )luaL_checkinteger(L, 1);
    GLint   level   = (GLint  )luaL_checkinteger(L, 2);
    GLint   xoffset = (GLint  )luaL_checkinteger(L, 3);
    GLint   x       = (GLint  )luaL_checkinteger(L, 4);
    GLint   y       = (GLint  )luaL_checkinteger(L, 5);
    GLsizei width   = (GLsizei)luaL_checkinteger(L, 6);

    glCopyTexSubImage1D(target, level, xoffset, x, y, width);
    return 0;
}

int GlCopyTexSubImage2D(lua_State *L) {
    GLenum  target  = (GLenum )luaL_checkinteger(L, 1);
    GLint   level   = (GLint  )luaL_checkinteger(L, 2);
    GLint   xoffset = (GLint  )luaL_checkinteger(L, 3);
    GLint   yoffset = (GLint  )luaL_checkinteger(L, 4);
    GLint   x       = (GLint  )luaL_checkinteger(L, 5);
    GLint   y       = (GLint  )luaL_checkinteger(L, 6);
    GLsizei width   = (GLsizei)luaL_checkinteger(L, 7);
    GLsizei height  = (GLsizei)luaL_checkinteger(L, 8);

    glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    return 0;
}

int GlDeleteTextures(lua_State *L) {
    GLsizei        n        = (GLsizei       )luaL_checkinteger(L, 1);
    const GLuint * textures = (const GLuint *)luaL_checkudata(L, 2, "const GLuint *");

    glDeleteTextures(n, textures);
    return 0;
}

int GlDisableClientState(lua_State *L) {
    GLenum ren_array = (GLenum)luaL_checkinteger(L, 1);

    glDisableClientState(ren_array);
    return 0;
}

int GlDrawArrays(lua_State *L) {
    GLenum  mode  = (GLenum )luaL_checkinteger(L, 1);
    GLint   first = (GLint  )luaL_checkinteger(L, 2);
    GLsizei count = (GLsizei)luaL_checkinteger(L, 3);

    glDrawArrays(mode, first, count);
    return 0;
}

int GlDrawElements(lua_State *L) {
    GLenum       mode    = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      count   = (GLsizei     )luaL_checkinteger(L, 2);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 3);
    const void * indices = (const void *)luaL_checkudata(L, 4, "const void *");

    glDrawElements(mode, count, type, indices);
    return 0;
}

int GlEdgeFlagPointer(lua_State *L) {
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 1);
    const void * pointer = (const void *)luaL_checkudata(L, 2, "const void *");

    glEdgeFlagPointer(stride, pointer);
    return 0;
}

int GlEnableClientState(lua_State *L) {
    GLenum ren_array = (GLenum)luaL_checkinteger(L, 1);

    glEnableClientState(ren_array);
    return 0;
}

int GlGenTextures(lua_State *L) {
    GLsizei  n        = (GLsizei )luaL_checkinteger(L, 1);
    GLuint * textures = (GLuint *)luaL_checkudata(L, 2, "GLuint *");

    glGenTextures(n, textures);
    return 0;
}

int GlGetPointerv(lua_State *L) {
    GLenum  pname  = (GLenum )luaL_checkinteger(L, 1);
    void ** params = (void **)luaL_checkudata(L, 2, "void **");

    glGetPointerv(pname, params);
    return 0;
}

int GlIndexPointer(lua_State *L) {
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 2);
    const void * pointer = (const void *)luaL_checkudata(L, 3, "const void *");

    glIndexPointer(type, stride, pointer);
    return 0;
}

int GlIndexub(lua_State *L) {
    GLubyte c = (GLubyte)luaL_checkinteger(L, 1);

    glIndexub(c);
    return 0;
}

int GlIndexubv(lua_State *L) {
    const GLubyte * c = (const GLubyte *)luaL_checkudata(L, 1, "const GLubyte *");

    glIndexubv(c);
    return 0;
}

int GlInterleavedArrays(lua_State *L) {
    GLenum       format  = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 2);
    const void * pointer = (const void *)luaL_checkudata(L, 3, "const void *");

    glInterleavedArrays(format, stride, pointer);
    return 0;
}

int GlIsTexture(lua_State *L) {
    GLuint texture = (GLuint)luaL_checkinteger(L, 1);

    glIsTexture(texture);
    return 0;
}

int GlNormalPointer(lua_State *L) {
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 1);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 2);
    const void * pointer = (const void *)luaL_checkudata(L, 3, "const void *");

    glNormalPointer(type, stride, pointer);
    return 0;
}

int GlPolygonOffset(lua_State *L) {
    GLfloat factor = (GLfloat)luaL_checknumber(L, 1);
    GLfloat units  = (GLfloat)luaL_checknumber(L, 2);

    glPolygonOffset(factor, units);
    return 0;
}

int GlPopClientAttrib(lua_State *L) {

    glPopClientAttrib();
    return 0;
}

int GlPrioritizeTextures(lua_State *L) {
    GLsizei         n          = (GLsizei        )luaL_checkinteger(L, 1);
    const GLuint *  textures   = (const GLuint * )luaL_checkudata(L, 2, "const GLuint *");
    const GLfloat * priorities = (const GLfloat *)luaL_checkudata(L, 3, "const GLfloat *");

    glPrioritizeTextures(n, textures, priorities);
    return 0;
}

int GlPushClientAttrib(lua_State *L) {
    GLbitfield mask = (GLbitfield)luaL_checkinteger(L, 1);

    glPushClientAttrib(mask);
    return 0;
}

int GlTexCoordPointer(lua_State *L) {
    GLint        size    = (GLint       )luaL_checkinteger(L, 1);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 2);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 3);
    const void * pointer = (const void *)luaL_checkudata(L, 4, "const void *");

    glTexCoordPointer(size, type, stride, pointer);
    return 0;
}

int GlTexSubImage1D(lua_State *L) {
    GLenum       target  = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level   = (GLint       )luaL_checkinteger(L, 2);
    GLint        xoffset = (GLint       )luaL_checkinteger(L, 3);
    GLsizei      width   = (GLsizei     )luaL_checkinteger(L, 4);
    GLenum       format  = (GLenum      )luaL_checkinteger(L, 5);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 6);
    const void * pixels  = (const void *)luaL_checkudata(L, 7, "const void *");

    glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
    return 0;
}

int GlTexSubImage2D(lua_State *L) {
    GLenum       target  = (GLenum      )luaL_checkinteger(L, 1);
    GLint        level   = (GLint       )luaL_checkinteger(L, 2);
    GLint        xoffset = (GLint       )luaL_checkinteger(L, 3);
    GLint        yoffset = (GLint       )luaL_checkinteger(L, 4);
    GLsizei      width   = (GLsizei     )luaL_checkinteger(L, 5);
    GLsizei      height  = (GLsizei     )luaL_checkinteger(L, 6);
    GLenum       format  = (GLenum      )luaL_checkinteger(L, 7);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 8);
    const void * pixels  = (const void *)luaL_checkudata(L, 9, "const void *");

    glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    return 0;
}

int GlVertexPointer(lua_State *L) {
    GLint        size    = (GLint       )luaL_checkinteger(L, 1);
    GLenum       type    = (GLenum      )luaL_checkinteger(L, 2);
    GLsizei      stride  = (GLsizei     )luaL_checkinteger(L, 3);
    const void * pointer = (const void *)luaL_checkudata(L, 4, "const void *");

    glVertexPointer(size, type, stride, pointer);
    return 0;
}

